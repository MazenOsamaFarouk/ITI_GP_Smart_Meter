
usart_adc_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005de4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a0  08005ef8  08005ef8  00015ef8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006198  08006198  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08006198  08006198  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006198  08006198  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006198  08006198  00016198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800619c  0800619c  0001619c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080061a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d84  200001dc  0800637c  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000f60  0800637c  00020f60  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cd33  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001faf  00000000  00000000  0002cf38  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d88  00000000  00000000  0002eee8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c80  00000000  00000000  0002fc70  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000186ff  00000000  00000000  000308f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b2fb  00000000  00000000  00048fef  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008f744  00000000  00000000  000542ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e3a2e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042e0  00000000  00000000  000e3aac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08005edc 	.word	0x08005edc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	08005edc 	.word	0x08005edc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000b44:	f1a2 0201 	sub.w	r2, r2, #1
 8000b48:	d1ed      	bne.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf6:	2afd      	cmp	r2, #253	; 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	; 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	; 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <sqrt2>:
 * to calculate the sqrt
 * source: codeproject.com/Articles/69941/Best-Square-Root-Method-Algorithm-Function-Precisi
 */
#define SQRT_MAGIC_F 0x5f3759df
float sqrt2(const float x)
{
 8000f44:	b590      	push	{r4, r7, lr}
 8000f46:	b085      	sub	sp, #20
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
	const float xhalf = 0.5f*x;
 8000f4c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8000f50:	6878      	ldr	r0, [r7, #4]
 8000f52:	f7ff fea7 	bl	8000ca4 <__aeabi_fmul>
 8000f56:	4603      	mov	r3, r0
 8000f58:	60fb      	str	r3, [r7, #12]
	union // get bits for floating value
	{
		float x;
		int i;
	} u;
	u.x = x;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	60bb      	str	r3, [r7, #8]
	u.i = SQRT_MAGIC_F - (u.i >> 1); // gives initial guess y0
 8000f5e:	68bb      	ldr	r3, [r7, #8]
 8000f60:	105a      	asrs	r2, r3, #1
 8000f62:	4b20      	ldr	r3, [pc, #128]	; (8000fe4 <sqrt2+0xa0>)
 8000f64:	1a9b      	subs	r3, r3, r2
 8000f66:	60bb      	str	r3, [r7, #8]

	u.x = u.x*(1.5f - xhalf*u.x*u.x); // Newton step, repeating increases accuracy
 8000f68:	68bc      	ldr	r4, [r7, #8]
 8000f6a:	68bb      	ldr	r3, [r7, #8]
 8000f6c:	68f9      	ldr	r1, [r7, #12]
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f7ff fe98 	bl	8000ca4 <__aeabi_fmul>
 8000f74:	4603      	mov	r3, r0
 8000f76:	461a      	mov	r2, r3
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	4610      	mov	r0, r2
 8000f7e:	f7ff fe91 	bl	8000ca4 <__aeabi_fmul>
 8000f82:	4603      	mov	r3, r0
 8000f84:	4619      	mov	r1, r3
 8000f86:	f04f 507f 	mov.w	r0, #1069547520	; 0x3fc00000
 8000f8a:	f7ff fd81 	bl	8000a90 <__aeabi_fsub>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	4619      	mov	r1, r3
 8000f92:	4620      	mov	r0, r4
 8000f94:	f7ff fe86 	bl	8000ca4 <__aeabi_fmul>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	60bb      	str	r3, [r7, #8]
	u.x = u.x*(1.5f - xhalf*u.x*u.x);
 8000f9c:	68bc      	ldr	r4, [r7, #8]
 8000f9e:	68bb      	ldr	r3, [r7, #8]
 8000fa0:	68f9      	ldr	r1, [r7, #12]
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f7ff fe7e 	bl	8000ca4 <__aeabi_fmul>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	461a      	mov	r2, r3
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	4619      	mov	r1, r3
 8000fb0:	4610      	mov	r0, r2
 8000fb2:	f7ff fe77 	bl	8000ca4 <__aeabi_fmul>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	4619      	mov	r1, r3
 8000fba:	f04f 507f 	mov.w	r0, #1069547520	; 0x3fc00000
 8000fbe:	f7ff fd67 	bl	8000a90 <__aeabi_fsub>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	4620      	mov	r0, r4
 8000fc8:	f7ff fe6c 	bl	8000ca4 <__aeabi_fmul>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	60bb      	str	r3, [r7, #8]
	return x*u.x;
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	6879      	ldr	r1, [r7, #4]
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff fe65 	bl	8000ca4 <__aeabi_fmul>
 8000fda:	4603      	mov	r3, r0
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	3714      	adds	r7, #20
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd90      	pop	{r4, r7, pc}
 8000fe4:	5f3759df 	.word	0x5f3759df

08000fe8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fee:	f000 fc93 	bl	8001918 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ff2:	f000 f8ef 	bl	80011d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ff6:	f000 fa35 	bl	8001464 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ffa:	f000 fa15 	bl	8001428 <MX_DMA_Init>
  MX_ADC1_Init();
 8000ffe:	f000 f945 	bl	800128c <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8001002:	f000 f9e7 	bl	80013d4 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8001006:	f000 f997 	bl	8001338 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
//	uint16_t adc_reading = {0};
//  HAL_ADC_Start_IT(&hadc1);
  if( HAL_OK != HAL_ADC_Start_DMA(&hadc1, adc_buf, 2) )
 800100a:	2202      	movs	r2, #2
 800100c:	4963      	ldr	r1, [pc, #396]	; (800119c <main+0x1b4>)
 800100e:	4864      	ldr	r0, [pc, #400]	; (80011a0 <main+0x1b8>)
 8001010:	f000 fdbc 	bl	8001b8c <HAL_ADC_Start_DMA>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <main+0x36>
  {
	  Error_Handler();
 800101a:	f000 facf 	bl	80015bc <Error_Handler>
  }
  if( HAL_OK != HAL_TIM_Base_Start(&htim3))
 800101e:	4861      	ldr	r0, [pc, #388]	; (80011a4 <main+0x1bc>)
 8001020:	f002 fadc 	bl	80035dc <HAL_TIM_Base_Start>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <main+0x46>
  {
	  Error_Handler();
 800102a:	f000 fac7 	bl	80015bc <Error_Handler>
//		HAL_ADC_Start(&hadc1);
//		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
//		adc_reading = HAL_ADC_GetValue(&hadc1);
//

		if(bCalculateRMS)
 800102e:	4b5e      	ldr	r3, [pc, #376]	; (80011a8 <main+0x1c0>)
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d0fb      	beq.n	800102e <main+0x46>
		{
//			HAL_ADC_Start(&hadc1);
//			HAL_ADC_Start_IT(&hadc1);
			bCalculateRMS = 0; // clear flag
 8001036:	4b5c      	ldr	r3, [pc, #368]	; (80011a8 <main+0x1c0>)
 8001038:	2200      	movs	r2, #0
 800103a:	701a      	strb	r2, [r3, #0]
			Vrms[Vrms_index] = sqrt2(adc_mean[_V]) ;
 800103c:	4b5b      	ldr	r3, [pc, #364]	; (80011ac <main+0x1c4>)
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	4b5b      	ldr	r3, [pc, #364]	; (80011b0 <main+0x1c8>)
 8001042:	881b      	ldrh	r3, [r3, #0]
 8001044:	461c      	mov	r4, r3
 8001046:	4610      	mov	r0, r2
 8001048:	f7ff ff7c 	bl	8000f44 <sqrt2>
 800104c:	4602      	mov	r2, r0
 800104e:	4b59      	ldr	r3, [pc, #356]	; (80011b4 <main+0x1cc>)
 8001050:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
			rms_sum[_V] = rms_sum[_V] + (Vrms[Vrms_index]*Vrms[Vrms_index]);
 8001054:	4b58      	ldr	r3, [pc, #352]	; (80011b8 <main+0x1d0>)
 8001056:	681c      	ldr	r4, [r3, #0]
 8001058:	4b55      	ldr	r3, [pc, #340]	; (80011b0 <main+0x1c8>)
 800105a:	881b      	ldrh	r3, [r3, #0]
 800105c:	461a      	mov	r2, r3
 800105e:	4b55      	ldr	r3, [pc, #340]	; (80011b4 <main+0x1cc>)
 8001060:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001064:	4b52      	ldr	r3, [pc, #328]	; (80011b0 <main+0x1c8>)
 8001066:	881b      	ldrh	r3, [r3, #0]
 8001068:	4619      	mov	r1, r3
 800106a:	4b52      	ldr	r3, [pc, #328]	; (80011b4 <main+0x1cc>)
 800106c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001070:	4619      	mov	r1, r3
 8001072:	4610      	mov	r0, r2
 8001074:	f7ff fe16 	bl	8000ca4 <__aeabi_fmul>
 8001078:	4603      	mov	r3, r0
 800107a:	4619      	mov	r1, r3
 800107c:	4620      	mov	r0, r4
 800107e:	f7ff fd09 	bl	8000a94 <__addsf3>
 8001082:	4603      	mov	r3, r0
 8001084:	461a      	mov	r2, r3
 8001086:	4b4c      	ldr	r3, [pc, #304]	; (80011b8 <main+0x1d0>)
 8001088:	601a      	str	r2, [r3, #0]

			Irms[Irms_index] = sqrt2(adc_mean[_I]) ;
 800108a:	4b48      	ldr	r3, [pc, #288]	; (80011ac <main+0x1c4>)
 800108c:	685a      	ldr	r2, [r3, #4]
 800108e:	4b4b      	ldr	r3, [pc, #300]	; (80011bc <main+0x1d4>)
 8001090:	881b      	ldrh	r3, [r3, #0]
 8001092:	461c      	mov	r4, r3
 8001094:	4610      	mov	r0, r2
 8001096:	f7ff ff55 	bl	8000f44 <sqrt2>
 800109a:	4602      	mov	r2, r0
 800109c:	4b48      	ldr	r3, [pc, #288]	; (80011c0 <main+0x1d8>)
 800109e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
			rms_sum[_I] = rms_sum[_I] + (Irms[Irms_index]*Irms[Irms_index]);
 80010a2:	4b45      	ldr	r3, [pc, #276]	; (80011b8 <main+0x1d0>)
 80010a4:	685c      	ldr	r4, [r3, #4]
 80010a6:	4b45      	ldr	r3, [pc, #276]	; (80011bc <main+0x1d4>)
 80010a8:	881b      	ldrh	r3, [r3, #0]
 80010aa:	461a      	mov	r2, r3
 80010ac:	4b44      	ldr	r3, [pc, #272]	; (80011c0 <main+0x1d8>)
 80010ae:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80010b2:	4b42      	ldr	r3, [pc, #264]	; (80011bc <main+0x1d4>)
 80010b4:	881b      	ldrh	r3, [r3, #0]
 80010b6:	4619      	mov	r1, r3
 80010b8:	4b41      	ldr	r3, [pc, #260]	; (80011c0 <main+0x1d8>)
 80010ba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80010be:	4619      	mov	r1, r3
 80010c0:	4610      	mov	r0, r2
 80010c2:	f7ff fdef 	bl	8000ca4 <__aeabi_fmul>
 80010c6:	4603      	mov	r3, r0
 80010c8:	4619      	mov	r1, r3
 80010ca:	4620      	mov	r0, r4
 80010cc:	f7ff fce2 	bl	8000a94 <__addsf3>
 80010d0:	4603      	mov	r3, r0
 80010d2:	461a      	mov	r2, r3
 80010d4:	4b38      	ldr	r3, [pc, #224]	; (80011b8 <main+0x1d0>)
 80010d6:	605a      	str	r2, [r3, #4]

			if((Vrms_index == RMS_BUFFER_SIZE-1)||(Irms_index == RMS_BUFFER_SIZE-1))
 80010d8:	4b35      	ldr	r3, [pc, #212]	; (80011b0 <main+0x1c8>)
 80010da:	881b      	ldrh	r3, [r3, #0]
 80010dc:	2bff      	cmp	r3, #255	; 0xff
 80010de:	d003      	beq.n	80010e8 <main+0x100>
 80010e0:	4b36      	ldr	r3, [pc, #216]	; (80011bc <main+0x1d4>)
 80010e2:	881b      	ldrh	r3, [r3, #0]
 80010e4:	2bff      	cmp	r3, #255	; 0xff
 80010e6:	d12a      	bne.n	800113e <main+0x156>
			{
				rms_total[_V] = sqrt2(rms_sum[_V]/RMS_BUFFER_SIZE);
 80010e8:	4b33      	ldr	r3, [pc, #204]	; (80011b8 <main+0x1d0>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80010f0:	4618      	mov	r0, r3
 80010f2:	f7ff fe8b 	bl	8000e0c <__aeabi_fdiv>
 80010f6:	4603      	mov	r3, r0
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff23 	bl	8000f44 <sqrt2>
 80010fe:	4602      	mov	r2, r0
 8001100:	4b30      	ldr	r3, [pc, #192]	; (80011c4 <main+0x1dc>)
 8001102:	601a      	str	r2, [r3, #0]
				rms_total[_I] = sqrt2(rms_sum[_I]/RMS_BUFFER_SIZE);
 8001104:	4b2c      	ldr	r3, [pc, #176]	; (80011b8 <main+0x1d0>)
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff fe7d 	bl	8000e0c <__aeabi_fdiv>
 8001112:	4603      	mov	r3, r0
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff ff15 	bl	8000f44 <sqrt2>
 800111a:	4602      	mov	r2, r0
 800111c:	4b29      	ldr	r3, [pc, #164]	; (80011c4 <main+0x1dc>)
 800111e:	605a      	str	r2, [r3, #4]

				Vrms_index = 0;
 8001120:	4b23      	ldr	r3, [pc, #140]	; (80011b0 <main+0x1c8>)
 8001122:	2200      	movs	r2, #0
 8001124:	801a      	strh	r2, [r3, #0]
				rms_sum[_V] = 0;
 8001126:	4b24      	ldr	r3, [pc, #144]	; (80011b8 <main+0x1d0>)
 8001128:	f04f 0200 	mov.w	r2, #0
 800112c:	601a      	str	r2, [r3, #0]
				Irms_index = 0;
 800112e:	4b23      	ldr	r3, [pc, #140]	; (80011bc <main+0x1d4>)
 8001130:	2200      	movs	r2, #0
 8001132:	801a      	strh	r2, [r3, #0]
				rms_sum[_I] = 0;
 8001134:	4b20      	ldr	r3, [pc, #128]	; (80011b8 <main+0x1d0>)
 8001136:	f04f 0200 	mov.w	r2, #0
 800113a:	605a      	str	r2, [r3, #4]
 800113c:	e00b      	b.n	8001156 <main+0x16e>
			}
			else
			{
				Vrms_index++ ;
 800113e:	4b1c      	ldr	r3, [pc, #112]	; (80011b0 <main+0x1c8>)
 8001140:	881b      	ldrh	r3, [r3, #0]
 8001142:	3301      	adds	r3, #1
 8001144:	b29a      	uxth	r2, r3
 8001146:	4b1a      	ldr	r3, [pc, #104]	; (80011b0 <main+0x1c8>)
 8001148:	801a      	strh	r2, [r3, #0]
				Vrms_index++ ;
 800114a:	4b19      	ldr	r3, [pc, #100]	; (80011b0 <main+0x1c8>)
 800114c:	881b      	ldrh	r3, [r3, #0]
 800114e:	3301      	adds	r3, #1
 8001150:	b29a      	uxth	r2, r3
 8001152:	4b17      	ldr	r3, [pc, #92]	; (80011b0 <main+0x1c8>)
 8001154:	801a      	strh	r2, [r3, #0]
			}
			sprintf(output_str,"%.3f V, %.3f A\r\n", rms_total[_V], rms_total[_I]);
 8001156:	4b1b      	ldr	r3, [pc, #108]	; (80011c4 <main+0x1dc>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4618      	mov	r0, r3
 800115c:	f7ff f964 	bl	8000428 <__aeabi_f2d>
 8001160:	4605      	mov	r5, r0
 8001162:	460e      	mov	r6, r1
 8001164:	4b17      	ldr	r3, [pc, #92]	; (80011c4 <main+0x1dc>)
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff f95d 	bl	8000428 <__aeabi_f2d>
 800116e:	4603      	mov	r3, r0
 8001170:	460c      	mov	r4, r1
 8001172:	e9cd 3400 	strd	r3, r4, [sp]
 8001176:	462a      	mov	r2, r5
 8001178:	4633      	mov	r3, r6
 800117a:	4913      	ldr	r1, [pc, #76]	; (80011c8 <main+0x1e0>)
 800117c:	4813      	ldr	r0, [pc, #76]	; (80011cc <main+0x1e4>)
 800117e:	f003 fabf 	bl	8004700 <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)output_str, strlen(output_str), HAL_MAX_DELAY);
 8001182:	4812      	ldr	r0, [pc, #72]	; (80011cc <main+0x1e4>)
 8001184:	f7fe ffe4 	bl	8000150 <strlen>
 8001188:	4603      	mov	r3, r0
 800118a:	b29a      	uxth	r2, r3
 800118c:	f04f 33ff 	mov.w	r3, #4294967295
 8001190:	490e      	ldr	r1, [pc, #56]	; (80011cc <main+0x1e4>)
 8001192:	480f      	ldr	r0, [pc, #60]	; (80011d0 <main+0x1e8>)
 8001194:	f002 fcc7 	bl	8003b26 <HAL_UART_Transmit>
		if(bCalculateRMS)
 8001198:	e749      	b.n	800102e <main+0x46>
 800119a:	bf00      	nop
 800119c:	20000f40 	.word	0x20000f40
 80011a0:	20000664 	.word	0x20000664
 80011a4:	2000061c 	.word	0x2000061c
 80011a8:	200001f8 	.word	0x200001f8
 80011ac:	20000f48 	.word	0x20000f48
 80011b0:	200001fa 	.word	0x200001fa
 80011b4:	20000ad4 	.word	0x20000ad4
 80011b8:	2000060c 	.word	0x2000060c
 80011bc:	200001fc 	.word	0x200001fc
 80011c0:	2000020c 	.word	0x2000020c
 80011c4:	20000f38 	.word	0x20000f38
 80011c8:	08005ef8 	.word	0x08005ef8
 80011cc:	20000f18 	.word	0x20000f18
 80011d0:	20000694 	.word	0x20000694

080011d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b094      	sub	sp, #80	; 0x50
 80011d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011de:	2228      	movs	r2, #40	; 0x28
 80011e0:	2100      	movs	r1, #0
 80011e2:	4618      	mov	r0, r3
 80011e4:	f002 fe34 	bl	8003e50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011e8:	f107 0314 	add.w	r3, r7, #20
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	605a      	str	r2, [r3, #4]
 80011f2:	609a      	str	r2, [r3, #8]
 80011f4:	60da      	str	r2, [r3, #12]
 80011f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011f8:	1d3b      	adds	r3, r7, #4
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
 80011fe:	605a      	str	r2, [r3, #4]
 8001200:	609a      	str	r2, [r3, #8]
 8001202:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001204:	2301      	movs	r3, #1
 8001206:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001208:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800120c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800120e:	2300      	movs	r3, #0
 8001210:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001212:	2301      	movs	r3, #1
 8001214:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001216:	2302      	movs	r3, #2
 8001218:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800121a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800121e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001220:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001224:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001226:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800122a:	4618      	mov	r0, r3
 800122c:	f001 fcb4 	bl	8002b98 <HAL_RCC_OscConfig>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001236:	f000 f9c1 	bl	80015bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800123a:	230f      	movs	r3, #15
 800123c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800123e:	2302      	movs	r3, #2
 8001240:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001242:	2300      	movs	r3, #0
 8001244:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001246:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800124a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800124c:	2300      	movs	r3, #0
 800124e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001250:	f107 0314 	add.w	r3, r7, #20
 8001254:	2102      	movs	r1, #2
 8001256:	4618      	mov	r0, r3
 8001258:	f001 ff1e 	bl	8003098 <HAL_RCC_ClockConfig>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001262:	f000 f9ab 	bl	80015bc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001266:	2302      	movs	r3, #2
 8001268:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 800126a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800126e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001270:	1d3b      	adds	r3, r7, #4
 8001272:	4618      	mov	r0, r3
 8001274:	f002 f8ac 	bl	80033d0 <HAL_RCCEx_PeriphCLKConfig>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800127e:	f000 f99d 	bl	80015bc <Error_Handler>
  }
}
 8001282:	bf00      	nop
 8001284:	3750      	adds	r7, #80	; 0x50
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
	...

0800128c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001292:	1d3b      	adds	r3, r7, #4
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	605a      	str	r2, [r3, #4]
 800129a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800129c:	4b23      	ldr	r3, [pc, #140]	; (800132c <MX_ADC1_Init+0xa0>)
 800129e:	4a24      	ldr	r2, [pc, #144]	; (8001330 <MX_ADC1_Init+0xa4>)
 80012a0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80012a2:	4b22      	ldr	r3, [pc, #136]	; (800132c <MX_ADC1_Init+0xa0>)
 80012a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012a8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80012aa:	4b20      	ldr	r3, [pc, #128]	; (800132c <MX_ADC1_Init+0xa0>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012b0:	4b1e      	ldr	r3, [pc, #120]	; (800132c <MX_ADC1_Init+0xa0>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80012b6:	4b1d      	ldr	r3, [pc, #116]	; (800132c <MX_ADC1_Init+0xa0>)
 80012b8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80012bc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012be:	4b1b      	ldr	r3, [pc, #108]	; (800132c <MX_ADC1_Init+0xa0>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 80012c4:	4b19      	ldr	r3, [pc, #100]	; (800132c <MX_ADC1_Init+0xa0>)
 80012c6:	2202      	movs	r2, #2
 80012c8:	611a      	str	r2, [r3, #16]
  hadc1.DMA_Handle = &hdma_adc1 ;
 80012ca:	4b18      	ldr	r3, [pc, #96]	; (800132c <MX_ADC1_Init+0xa0>)
 80012cc:	4a19      	ldr	r2, [pc, #100]	; (8001334 <MX_ADC1_Init+0xa8>)
 80012ce:	621a      	str	r2, [r3, #32]
  hdma_adc1.Parent = &hadc1;
 80012d0:	4b18      	ldr	r3, [pc, #96]	; (8001334 <MX_ADC1_Init+0xa8>)
 80012d2:	4a16      	ldr	r2, [pc, #88]	; (800132c <MX_ADC1_Init+0xa0>)
 80012d4:	625a      	str	r2, [r3, #36]	; 0x24

  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012d6:	4815      	ldr	r0, [pc, #84]	; (800132c <MX_ADC1_Init+0xa0>)
 80012d8:	f000 fb80 	bl	80019dc <HAL_ADC_Init>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <MX_ADC1_Init+0x5a>
  {
    Error_Handler();
 80012e2:	f000 f96b 	bl	80015bc <Error_Handler>
//  __HAL_LINKDMA(hadc1,DMA_Handle,hdma_adc1);


  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80012e6:	2300      	movs	r3, #0
 80012e8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012ea:	2301      	movs	r3, #1
 80012ec:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80012ee:	2300      	movs	r3, #0
 80012f0:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012f2:	1d3b      	adds	r3, r7, #4
 80012f4:	4619      	mov	r1, r3
 80012f6:	480d      	ldr	r0, [pc, #52]	; (800132c <MX_ADC1_Init+0xa0>)
 80012f8:	f000 fe04 	bl	8001f04 <HAL_ADC_ConfigChannel>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <MX_ADC1_Init+0x7a>
  {
    Error_Handler();
 8001302:	f000 f95b 	bl	80015bc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001306:	2301      	movs	r3, #1
 8001308:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800130a:	2302      	movs	r3, #2
 800130c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800130e:	1d3b      	adds	r3, r7, #4
 8001310:	4619      	mov	r1, r3
 8001312:	4806      	ldr	r0, [pc, #24]	; (800132c <MX_ADC1_Init+0xa0>)
 8001314:	f000 fdf6 	bl	8001f04 <HAL_ADC_ConfigChannel>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 800131e:	f000 f94d 	bl	80015bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001322:	bf00      	nop
 8001324:	3710      	adds	r7, #16
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	20000664 	.word	0x20000664
 8001330:	40012400 	.word	0x40012400
 8001334:	20000ed4 	.word	0x20000ed4

08001338 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b086      	sub	sp, #24
 800133c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800133e:	f107 0308 	add.w	r3, r7, #8
 8001342:	2200      	movs	r2, #0
 8001344:	601a      	str	r2, [r3, #0]
 8001346:	605a      	str	r2, [r3, #4]
 8001348:	609a      	str	r2, [r3, #8]
 800134a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800134c:	463b      	mov	r3, r7
 800134e:	2200      	movs	r2, #0
 8001350:	601a      	str	r2, [r3, #0]
 8001352:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001354:	4b1d      	ldr	r3, [pc, #116]	; (80013cc <MX_TIM3_Init+0x94>)
 8001356:	4a1e      	ldr	r2, [pc, #120]	; (80013d0 <MX_TIM3_Init+0x98>)
 8001358:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800135a:	4b1c      	ldr	r3, [pc, #112]	; (80013cc <MX_TIM3_Init+0x94>)
 800135c:	2200      	movs	r2, #0
 800135e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8001360:	4b1a      	ldr	r3, [pc, #104]	; (80013cc <MX_TIM3_Init+0x94>)
 8001362:	2210      	movs	r2, #16
 8001364:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 5661;
 8001366:	4b19      	ldr	r3, [pc, #100]	; (80013cc <MX_TIM3_Init+0x94>)
 8001368:	f241 621d 	movw	r2, #5661	; 0x161d
 800136c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800136e:	4b17      	ldr	r3, [pc, #92]	; (80013cc <MX_TIM3_Init+0x94>)
 8001370:	2200      	movs	r2, #0
 8001372:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001374:	4b15      	ldr	r3, [pc, #84]	; (80013cc <MX_TIM3_Init+0x94>)
 8001376:	2280      	movs	r2, #128	; 0x80
 8001378:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800137a:	4814      	ldr	r0, [pc, #80]	; (80013cc <MX_TIM3_Init+0x94>)
 800137c:	f002 f8de 	bl	800353c <HAL_TIM_Base_Init>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001386:	f000 f919 	bl	80015bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800138a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800138e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001390:	f107 0308 	add.w	r3, r7, #8
 8001394:	4619      	mov	r1, r3
 8001396:	480d      	ldr	r0, [pc, #52]	; (80013cc <MX_TIM3_Init+0x94>)
 8001398:	f002 f96a 	bl	8003670 <HAL_TIM_ConfigClockSource>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80013a2:	f000 f90b 	bl	80015bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80013a6:	2320      	movs	r3, #32
 80013a8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013aa:	2300      	movs	r3, #0
 80013ac:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013ae:	463b      	mov	r3, r7
 80013b0:	4619      	mov	r1, r3
 80013b2:	4806      	ldr	r0, [pc, #24]	; (80013cc <MX_TIM3_Init+0x94>)
 80013b4:	f002 fb0c 	bl	80039d0 <HAL_TIMEx_MasterConfigSynchronization>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80013be:	f000 f8fd 	bl	80015bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80013c2:	bf00      	nop
 80013c4:	3718      	adds	r7, #24
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	2000061c 	.word	0x2000061c
 80013d0:	40000400 	.word	0x40000400

080013d4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013d8:	4b11      	ldr	r3, [pc, #68]	; (8001420 <MX_USART1_UART_Init+0x4c>)
 80013da:	4a12      	ldr	r2, [pc, #72]	; (8001424 <MX_USART1_UART_Init+0x50>)
 80013dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80013de:	4b10      	ldr	r3, [pc, #64]	; (8001420 <MX_USART1_UART_Init+0x4c>)
 80013e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013e6:	4b0e      	ldr	r3, [pc, #56]	; (8001420 <MX_USART1_UART_Init+0x4c>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013ec:	4b0c      	ldr	r3, [pc, #48]	; (8001420 <MX_USART1_UART_Init+0x4c>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013f2:	4b0b      	ldr	r3, [pc, #44]	; (8001420 <MX_USART1_UART_Init+0x4c>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013f8:	4b09      	ldr	r3, [pc, #36]	; (8001420 <MX_USART1_UART_Init+0x4c>)
 80013fa:	220c      	movs	r2, #12
 80013fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013fe:	4b08      	ldr	r3, [pc, #32]	; (8001420 <MX_USART1_UART_Init+0x4c>)
 8001400:	2200      	movs	r2, #0
 8001402:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001404:	4b06      	ldr	r3, [pc, #24]	; (8001420 <MX_USART1_UART_Init+0x4c>)
 8001406:	2200      	movs	r2, #0
 8001408:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800140a:	4805      	ldr	r0, [pc, #20]	; (8001420 <MX_USART1_UART_Init+0x4c>)
 800140c:	f002 fb3e 	bl	8003a8c <HAL_UART_Init>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001416:	f000 f8d1 	bl	80015bc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800141a:	bf00      	nop
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	20000694 	.word	0x20000694
 8001424:	40013800 	.word	0x40013800

08001428 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800142e:	4b0c      	ldr	r3, [pc, #48]	; (8001460 <MX_DMA_Init+0x38>)
 8001430:	695b      	ldr	r3, [r3, #20]
 8001432:	4a0b      	ldr	r2, [pc, #44]	; (8001460 <MX_DMA_Init+0x38>)
 8001434:	f043 0301 	orr.w	r3, r3, #1
 8001438:	6153      	str	r3, [r2, #20]
 800143a:	4b09      	ldr	r3, [pc, #36]	; (8001460 <MX_DMA_Init+0x38>)
 800143c:	695b      	ldr	r3, [r3, #20]
 800143e:	f003 0301 	and.w	r3, r3, #1
 8001442:	607b      	str	r3, [r7, #4]
 8001444:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001446:	2200      	movs	r2, #0
 8001448:	2100      	movs	r1, #0
 800144a:	200b      	movs	r0, #11
 800144c:	f001 f825 	bl	800249a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001450:	200b      	movs	r0, #11
 8001452:	f001 f83e 	bl	80024d2 <HAL_NVIC_EnableIRQ>

}
 8001456:	bf00      	nop
 8001458:	3708      	adds	r7, #8
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	40021000 	.word	0x40021000

08001464 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800146a:	4b0e      	ldr	r3, [pc, #56]	; (80014a4 <MX_GPIO_Init+0x40>)
 800146c:	699b      	ldr	r3, [r3, #24]
 800146e:	4a0d      	ldr	r2, [pc, #52]	; (80014a4 <MX_GPIO_Init+0x40>)
 8001470:	f043 0320 	orr.w	r3, r3, #32
 8001474:	6193      	str	r3, [r2, #24]
 8001476:	4b0b      	ldr	r3, [pc, #44]	; (80014a4 <MX_GPIO_Init+0x40>)
 8001478:	699b      	ldr	r3, [r3, #24]
 800147a:	f003 0320 	and.w	r3, r3, #32
 800147e:	607b      	str	r3, [r7, #4]
 8001480:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001482:	4b08      	ldr	r3, [pc, #32]	; (80014a4 <MX_GPIO_Init+0x40>)
 8001484:	699b      	ldr	r3, [r3, #24]
 8001486:	4a07      	ldr	r2, [pc, #28]	; (80014a4 <MX_GPIO_Init+0x40>)
 8001488:	f043 0304 	orr.w	r3, r3, #4
 800148c:	6193      	str	r3, [r2, #24]
 800148e:	4b05      	ldr	r3, [pc, #20]	; (80014a4 <MX_GPIO_Init+0x40>)
 8001490:	699b      	ldr	r3, [r3, #24]
 8001492:	f003 0304 	and.w	r3, r3, #4
 8001496:	603b      	str	r3, [r7, #0]
 8001498:	683b      	ldr	r3, [r7, #0]

}
 800149a:	bf00      	nop
 800149c:	370c      	adds	r7, #12
 800149e:	46bd      	mov	sp, r7
 80014a0:	bc80      	pop	{r7}
 80014a2:	4770      	bx	lr
 80014a4:	40021000 	.word	0x40021000

080014a8 <HAL_ADC_ConvCpltCallback>:
/**
 * This function has a reserved name that us provided by the HAL
 * but.. you provide the implementation
 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80014a8:	b590      	push	{r4, r7, lr}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]

//	adc_buf = HAL_ADC_GetValue(&hadc1);

	/* convert adc value to volts */
	/* input_volt = ( (3300mV/(2^12))*ADC_Value  )/1000 [in Volts]  */
	adc_volt[_V] = ((3300UL*adc_buf[_V])>>12)/1000 ;
 80014b0:	4b3b      	ldr	r3, [pc, #236]	; (80015a0 <HAL_ADC_ConvCpltCallback+0xf8>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f640 42e4 	movw	r2, #3300	; 0xce4
 80014b8:	fb02 f303 	mul.w	r3, r2, r3
 80014bc:	0b1b      	lsrs	r3, r3, #12
 80014be:	4a39      	ldr	r2, [pc, #228]	; (80015a4 <HAL_ADC_ConvCpltCallback+0xfc>)
 80014c0:	fba2 2303 	umull	r2, r3, r2, r3
 80014c4:	099b      	lsrs	r3, r3, #6
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7ff fb94 	bl	8000bf4 <__aeabi_ui2f>
 80014cc:	4602      	mov	r2, r0
 80014ce:	4b36      	ldr	r3, [pc, #216]	; (80015a8 <HAL_ADC_ConvCpltCallback+0x100>)
 80014d0:	601a      	str	r2, [r3, #0]
	adc_sum[_V] = adc_sum[_V] + (adc_volt[_V]*adc_volt[_V]);
 80014d2:	4b36      	ldr	r3, [pc, #216]	; (80015ac <HAL_ADC_ConvCpltCallback+0x104>)
 80014d4:	681c      	ldr	r4, [r3, #0]
 80014d6:	4b34      	ldr	r3, [pc, #208]	; (80015a8 <HAL_ADC_ConvCpltCallback+0x100>)
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	4b33      	ldr	r3, [pc, #204]	; (80015a8 <HAL_ADC_ConvCpltCallback+0x100>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4619      	mov	r1, r3
 80014e0:	4610      	mov	r0, r2
 80014e2:	f7ff fbdf 	bl	8000ca4 <__aeabi_fmul>
 80014e6:	4603      	mov	r3, r0
 80014e8:	4619      	mov	r1, r3
 80014ea:	4620      	mov	r0, r4
 80014ec:	f7ff fad2 	bl	8000a94 <__addsf3>
 80014f0:	4603      	mov	r3, r0
 80014f2:	461a      	mov	r2, r3
 80014f4:	4b2d      	ldr	r3, [pc, #180]	; (80015ac <HAL_ADC_ConvCpltCallback+0x104>)
 80014f6:	601a      	str	r2, [r3, #0]

	adc_volt[_I] = ((3300UL*adc_buf[_I])>>12)/1000 ;
 80014f8:	4b29      	ldr	r3, [pc, #164]	; (80015a0 <HAL_ADC_ConvCpltCallback+0xf8>)
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f640 42e4 	movw	r2, #3300	; 0xce4
 8001500:	fb02 f303 	mul.w	r3, r2, r3
 8001504:	0b1b      	lsrs	r3, r3, #12
 8001506:	4a27      	ldr	r2, [pc, #156]	; (80015a4 <HAL_ADC_ConvCpltCallback+0xfc>)
 8001508:	fba2 2303 	umull	r2, r3, r2, r3
 800150c:	099b      	lsrs	r3, r3, #6
 800150e:	4618      	mov	r0, r3
 8001510:	f7ff fb70 	bl	8000bf4 <__aeabi_ui2f>
 8001514:	4602      	mov	r2, r0
 8001516:	4b24      	ldr	r3, [pc, #144]	; (80015a8 <HAL_ADC_ConvCpltCallback+0x100>)
 8001518:	605a      	str	r2, [r3, #4]
	adc_sum[_I] = adc_sum[_I] + (adc_volt[_I]*adc_volt[_I]);
 800151a:	4b24      	ldr	r3, [pc, #144]	; (80015ac <HAL_ADC_ConvCpltCallback+0x104>)
 800151c:	685c      	ldr	r4, [r3, #4]
 800151e:	4b22      	ldr	r3, [pc, #136]	; (80015a8 <HAL_ADC_ConvCpltCallback+0x100>)
 8001520:	685a      	ldr	r2, [r3, #4]
 8001522:	4b21      	ldr	r3, [pc, #132]	; (80015a8 <HAL_ADC_ConvCpltCallback+0x100>)
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	4619      	mov	r1, r3
 8001528:	4610      	mov	r0, r2
 800152a:	f7ff fbbb 	bl	8000ca4 <__aeabi_fmul>
 800152e:	4603      	mov	r3, r0
 8001530:	4619      	mov	r1, r3
 8001532:	4620      	mov	r0, r4
 8001534:	f7ff faae 	bl	8000a94 <__addsf3>
 8001538:	4603      	mov	r3, r0
 800153a:	461a      	mov	r2, r3
 800153c:	4b1b      	ldr	r3, [pc, #108]	; (80015ac <HAL_ADC_ConvCpltCallback+0x104>)
 800153e:	605a      	str	r2, [r3, #4]

	if(index==ADC_BUFFER_SIZE-1)
 8001540:	4b1b      	ldr	r3, [pc, #108]	; (80015b0 <HAL_ADC_ConvCpltCallback+0x108>)
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	2bff      	cmp	r3, #255	; 0xff
 8001546:	d120      	bne.n	800158a <HAL_ADC_ConvCpltCallback+0xe2>
	{
		bCalculateRMS = 1;
 8001548:	4b1a      	ldr	r3, [pc, #104]	; (80015b4 <HAL_ADC_ConvCpltCallback+0x10c>)
 800154a:	2201      	movs	r2, #1
 800154c:	701a      	strb	r2, [r3, #0]
		adc_mean[_V] = adc_sum[_V]/ADC_BUFFER_SIZE;
 800154e:	4b17      	ldr	r3, [pc, #92]	; (80015ac <HAL_ADC_ConvCpltCallback+0x104>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8001556:	4618      	mov	r0, r3
 8001558:	f7ff fc58 	bl	8000e0c <__aeabi_fdiv>
 800155c:	4603      	mov	r3, r0
 800155e:	461a      	mov	r2, r3
 8001560:	4b15      	ldr	r3, [pc, #84]	; (80015b8 <HAL_ADC_ConvCpltCallback+0x110>)
 8001562:	601a      	str	r2, [r3, #0]
		adc_sum[_V] = 0;
 8001564:	4b11      	ldr	r3, [pc, #68]	; (80015ac <HAL_ADC_ConvCpltCallback+0x104>)
 8001566:	f04f 0200 	mov.w	r2, #0
 800156a:	601a      	str	r2, [r3, #0]

		adc_mean[_I] = adc_sum[_I]/ADC_BUFFER_SIZE;
 800156c:	4b0f      	ldr	r3, [pc, #60]	; (80015ac <HAL_ADC_ConvCpltCallback+0x104>)
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8001574:	4618      	mov	r0, r3
 8001576:	f7ff fc49 	bl	8000e0c <__aeabi_fdiv>
 800157a:	4603      	mov	r3, r0
 800157c:	461a      	mov	r2, r3
 800157e:	4b0e      	ldr	r3, [pc, #56]	; (80015b8 <HAL_ADC_ConvCpltCallback+0x110>)
 8001580:	605a      	str	r2, [r3, #4]
		adc_sum[_I] = 0;
 8001582:	4b0a      	ldr	r3, [pc, #40]	; (80015ac <HAL_ADC_ConvCpltCallback+0x104>)
 8001584:	f04f 0200 	mov.w	r2, #0
 8001588:	605a      	str	r2, [r3, #4]
	}

	index ++ ;
 800158a:	4b09      	ldr	r3, [pc, #36]	; (80015b0 <HAL_ADC_ConvCpltCallback+0x108>)
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	3301      	adds	r3, #1
 8001590:	b2da      	uxtb	r2, r3
 8001592:	4b07      	ldr	r3, [pc, #28]	; (80015b0 <HAL_ADC_ConvCpltCallback+0x108>)
 8001594:	701a      	strb	r2, [r3, #0]
//	HAL_ADC_Start_IT(&hadc1);

}
 8001596:	bf00      	nop
 8001598:	370c      	adds	r7, #12
 800159a:	46bd      	mov	sp, r7
 800159c:	bd90      	pop	{r4, r7, pc}
 800159e:	bf00      	nop
 80015a0:	20000f40 	.word	0x20000f40
 80015a4:	10624dd3 	.word	0x10624dd3
 80015a8:	20000f50 	.word	0x20000f50
 80015ac:	20000614 	.word	0x20000614
 80015b0:	200001fe 	.word	0x200001fe
 80015b4:	200001f8 	.word	0x200001f8
 80015b8:	20000f48 	.word	0x20000f48

080015bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015c0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80015c2:	e7fe      	b.n	80015c2 <Error_Handler+0x6>

080015c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b085      	sub	sp, #20
 80015c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80015ca:	4b15      	ldr	r3, [pc, #84]	; (8001620 <HAL_MspInit+0x5c>)
 80015cc:	699b      	ldr	r3, [r3, #24]
 80015ce:	4a14      	ldr	r2, [pc, #80]	; (8001620 <HAL_MspInit+0x5c>)
 80015d0:	f043 0301 	orr.w	r3, r3, #1
 80015d4:	6193      	str	r3, [r2, #24]
 80015d6:	4b12      	ldr	r3, [pc, #72]	; (8001620 <HAL_MspInit+0x5c>)
 80015d8:	699b      	ldr	r3, [r3, #24]
 80015da:	f003 0301 	and.w	r3, r3, #1
 80015de:	60bb      	str	r3, [r7, #8]
 80015e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015e2:	4b0f      	ldr	r3, [pc, #60]	; (8001620 <HAL_MspInit+0x5c>)
 80015e4:	69db      	ldr	r3, [r3, #28]
 80015e6:	4a0e      	ldr	r2, [pc, #56]	; (8001620 <HAL_MspInit+0x5c>)
 80015e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015ec:	61d3      	str	r3, [r2, #28]
 80015ee:	4b0c      	ldr	r3, [pc, #48]	; (8001620 <HAL_MspInit+0x5c>)
 80015f0:	69db      	ldr	r3, [r3, #28]
 80015f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015f6:	607b      	str	r3, [r7, #4]
 80015f8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80015fa:	4b0a      	ldr	r3, [pc, #40]	; (8001624 <HAL_MspInit+0x60>)
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	60fb      	str	r3, [r7, #12]
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001606:	60fb      	str	r3, [r7, #12]
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800160e:	60fb      	str	r3, [r7, #12]
 8001610:	4a04      	ldr	r2, [pc, #16]	; (8001624 <HAL_MspInit+0x60>)
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001616:	bf00      	nop
 8001618:	3714      	adds	r7, #20
 800161a:	46bd      	mov	sp, r7
 800161c:	bc80      	pop	{r7}
 800161e:	4770      	bx	lr
 8001620:	40021000 	.word	0x40021000
 8001624:	40010000 	.word	0x40010000

08001628 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b088      	sub	sp, #32
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001630:	f107 0310 	add.w	r3, r7, #16
 8001634:	2200      	movs	r2, #0
 8001636:	601a      	str	r2, [r3, #0]
 8001638:	605a      	str	r2, [r3, #4]
 800163a:	609a      	str	r2, [r3, #8]
 800163c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a2c      	ldr	r2, [pc, #176]	; (80016f4 <HAL_ADC_MspInit+0xcc>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d151      	bne.n	80016ec <HAL_ADC_MspInit+0xc4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001648:	4b2b      	ldr	r3, [pc, #172]	; (80016f8 <HAL_ADC_MspInit+0xd0>)
 800164a:	699b      	ldr	r3, [r3, #24]
 800164c:	4a2a      	ldr	r2, [pc, #168]	; (80016f8 <HAL_ADC_MspInit+0xd0>)
 800164e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001652:	6193      	str	r3, [r2, #24]
 8001654:	4b28      	ldr	r3, [pc, #160]	; (80016f8 <HAL_ADC_MspInit+0xd0>)
 8001656:	699b      	ldr	r3, [r3, #24]
 8001658:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800165c:	60fb      	str	r3, [r7, #12]
 800165e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001660:	4b25      	ldr	r3, [pc, #148]	; (80016f8 <HAL_ADC_MspInit+0xd0>)
 8001662:	699b      	ldr	r3, [r3, #24]
 8001664:	4a24      	ldr	r2, [pc, #144]	; (80016f8 <HAL_ADC_MspInit+0xd0>)
 8001666:	f043 0304 	orr.w	r3, r3, #4
 800166a:	6193      	str	r3, [r2, #24]
 800166c:	4b22      	ldr	r3, [pc, #136]	; (80016f8 <HAL_ADC_MspInit+0xd0>)
 800166e:	699b      	ldr	r3, [r3, #24]
 8001670:	f003 0304 	and.w	r3, r3, #4
 8001674:	60bb      	str	r3, [r7, #8]
 8001676:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001678:	2303      	movs	r3, #3
 800167a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800167c:	2303      	movs	r3, #3
 800167e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001680:	f107 0310 	add.w	r3, r7, #16
 8001684:	4619      	mov	r1, r3
 8001686:	481d      	ldr	r0, [pc, #116]	; (80016fc <HAL_ADC_MspInit+0xd4>)
 8001688:	f001 f92c 	bl	80028e4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800168c:	4b1c      	ldr	r3, [pc, #112]	; (8001700 <HAL_ADC_MspInit+0xd8>)
 800168e:	4a1d      	ldr	r2, [pc, #116]	; (8001704 <HAL_ADC_MspInit+0xdc>)
 8001690:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001692:	4b1b      	ldr	r3, [pc, #108]	; (8001700 <HAL_ADC_MspInit+0xd8>)
 8001694:	2200      	movs	r2, #0
 8001696:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001698:	4b19      	ldr	r3, [pc, #100]	; (8001700 <HAL_ADC_MspInit+0xd8>)
 800169a:	2200      	movs	r2, #0
 800169c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800169e:	4b18      	ldr	r3, [pc, #96]	; (8001700 <HAL_ADC_MspInit+0xd8>)
 80016a0:	2280      	movs	r2, #128	; 0x80
 80016a2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80016a4:	4b16      	ldr	r3, [pc, #88]	; (8001700 <HAL_ADC_MspInit+0xd8>)
 80016a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016aa:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80016ac:	4b14      	ldr	r3, [pc, #80]	; (8001700 <HAL_ADC_MspInit+0xd8>)
 80016ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80016b2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80016b4:	4b12      	ldr	r3, [pc, #72]	; (8001700 <HAL_ADC_MspInit+0xd8>)
 80016b6:	2220      	movs	r2, #32
 80016b8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80016ba:	4b11      	ldr	r3, [pc, #68]	; (8001700 <HAL_ADC_MspInit+0xd8>)
 80016bc:	2200      	movs	r2, #0
 80016be:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80016c0:	480f      	ldr	r0, [pc, #60]	; (8001700 <HAL_ADC_MspInit+0xd8>)
 80016c2:	f000 ff21 	bl	8002508 <HAL_DMA_Init>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80016cc:	f7ff ff76 	bl	80015bc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	4a0b      	ldr	r2, [pc, #44]	; (8001700 <HAL_ADC_MspInit+0xd8>)
 80016d4:	621a      	str	r2, [r3, #32]
 80016d6:	4a0a      	ldr	r2, [pc, #40]	; (8001700 <HAL_ADC_MspInit+0xd8>)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80016dc:	2200      	movs	r2, #0
 80016de:	2100      	movs	r1, #0
 80016e0:	2012      	movs	r0, #18
 80016e2:	f000 feda 	bl	800249a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80016e6:	2012      	movs	r0, #18
 80016e8:	f000 fef3 	bl	80024d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80016ec:	bf00      	nop
 80016ee:	3720      	adds	r7, #32
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	40012400 	.word	0x40012400
 80016f8:	40021000 	.word	0x40021000
 80016fc:	40010800 	.word	0x40010800
 8001700:	20000ed4 	.word	0x20000ed4
 8001704:	40020008 	.word	0x40020008

08001708 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001708:	b480      	push	{r7}
 800170a:	b085      	sub	sp, #20
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a09      	ldr	r2, [pc, #36]	; (800173c <HAL_TIM_Base_MspInit+0x34>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d10b      	bne.n	8001732 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800171a:	4b09      	ldr	r3, [pc, #36]	; (8001740 <HAL_TIM_Base_MspInit+0x38>)
 800171c:	69db      	ldr	r3, [r3, #28]
 800171e:	4a08      	ldr	r2, [pc, #32]	; (8001740 <HAL_TIM_Base_MspInit+0x38>)
 8001720:	f043 0302 	orr.w	r3, r3, #2
 8001724:	61d3      	str	r3, [r2, #28]
 8001726:	4b06      	ldr	r3, [pc, #24]	; (8001740 <HAL_TIM_Base_MspInit+0x38>)
 8001728:	69db      	ldr	r3, [r3, #28]
 800172a:	f003 0302 	and.w	r3, r3, #2
 800172e:	60fb      	str	r3, [r7, #12]
 8001730:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001732:	bf00      	nop
 8001734:	3714      	adds	r7, #20
 8001736:	46bd      	mov	sp, r7
 8001738:	bc80      	pop	{r7}
 800173a:	4770      	bx	lr
 800173c:	40000400 	.word	0x40000400
 8001740:	40021000 	.word	0x40021000

08001744 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b088      	sub	sp, #32
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800174c:	f107 0310 	add.w	r3, r7, #16
 8001750:	2200      	movs	r2, #0
 8001752:	601a      	str	r2, [r3, #0]
 8001754:	605a      	str	r2, [r3, #4]
 8001756:	609a      	str	r2, [r3, #8]
 8001758:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a1c      	ldr	r2, [pc, #112]	; (80017d0 <HAL_UART_MspInit+0x8c>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d131      	bne.n	80017c8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001764:	4b1b      	ldr	r3, [pc, #108]	; (80017d4 <HAL_UART_MspInit+0x90>)
 8001766:	699b      	ldr	r3, [r3, #24]
 8001768:	4a1a      	ldr	r2, [pc, #104]	; (80017d4 <HAL_UART_MspInit+0x90>)
 800176a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800176e:	6193      	str	r3, [r2, #24]
 8001770:	4b18      	ldr	r3, [pc, #96]	; (80017d4 <HAL_UART_MspInit+0x90>)
 8001772:	699b      	ldr	r3, [r3, #24]
 8001774:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001778:	60fb      	str	r3, [r7, #12]
 800177a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800177c:	4b15      	ldr	r3, [pc, #84]	; (80017d4 <HAL_UART_MspInit+0x90>)
 800177e:	699b      	ldr	r3, [r3, #24]
 8001780:	4a14      	ldr	r2, [pc, #80]	; (80017d4 <HAL_UART_MspInit+0x90>)
 8001782:	f043 0304 	orr.w	r3, r3, #4
 8001786:	6193      	str	r3, [r2, #24]
 8001788:	4b12      	ldr	r3, [pc, #72]	; (80017d4 <HAL_UART_MspInit+0x90>)
 800178a:	699b      	ldr	r3, [r3, #24]
 800178c:	f003 0304 	and.w	r3, r3, #4
 8001790:	60bb      	str	r3, [r7, #8]
 8001792:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001794:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001798:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179a:	2302      	movs	r3, #2
 800179c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800179e:	2303      	movs	r3, #3
 80017a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017a2:	f107 0310 	add.w	r3, r7, #16
 80017a6:	4619      	mov	r1, r3
 80017a8:	480b      	ldr	r0, [pc, #44]	; (80017d8 <HAL_UART_MspInit+0x94>)
 80017aa:	f001 f89b 	bl	80028e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80017ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017b4:	2300      	movs	r3, #0
 80017b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b8:	2300      	movs	r3, #0
 80017ba:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017bc:	f107 0310 	add.w	r3, r7, #16
 80017c0:	4619      	mov	r1, r3
 80017c2:	4805      	ldr	r0, [pc, #20]	; (80017d8 <HAL_UART_MspInit+0x94>)
 80017c4:	f001 f88e 	bl	80028e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80017c8:	bf00      	nop
 80017ca:	3720      	adds	r7, #32
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	40013800 	.word	0x40013800
 80017d4:	40021000 	.word	0x40021000
 80017d8:	40010800 	.word	0x40010800

080017dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017e0:	e7fe      	b.n	80017e0 <NMI_Handler+0x4>

080017e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017e2:	b480      	push	{r7}
 80017e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017e6:	e7fe      	b.n	80017e6 <HardFault_Handler+0x4>

080017e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017ec:	e7fe      	b.n	80017ec <MemManage_Handler+0x4>

080017ee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017ee:	b480      	push	{r7}
 80017f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017f2:	e7fe      	b.n	80017f2 <BusFault_Handler+0x4>

080017f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017f8:	e7fe      	b.n	80017f8 <UsageFault_Handler+0x4>

080017fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017fa:	b480      	push	{r7}
 80017fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017fe:	bf00      	nop
 8001800:	46bd      	mov	sp, r7
 8001802:	bc80      	pop	{r7}
 8001804:	4770      	bx	lr

08001806 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001806:	b480      	push	{r7}
 8001808:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800180a:	bf00      	nop
 800180c:	46bd      	mov	sp, r7
 800180e:	bc80      	pop	{r7}
 8001810:	4770      	bx	lr

08001812 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001812:	b480      	push	{r7}
 8001814:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001816:	bf00      	nop
 8001818:	46bd      	mov	sp, r7
 800181a:	bc80      	pop	{r7}
 800181c:	4770      	bx	lr

0800181e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800181e:	b580      	push	{r7, lr}
 8001820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001822:	f000 f8bf 	bl	80019a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001826:	bf00      	nop
 8001828:	bd80      	pop	{r7, pc}
	...

0800182c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001830:	4802      	ldr	r0, [pc, #8]	; (800183c <DMA1_Channel1_IRQHandler+0x10>)
 8001832:	f000 ff23 	bl	800267c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001836:	bf00      	nop
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	20000ed4 	.word	0x20000ed4

08001840 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001844:	4802      	ldr	r0, [pc, #8]	; (8001850 <ADC1_2_IRQHandler+0x10>)
 8001846:	f000 fa7f 	bl	8001d48 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800184a:	bf00      	nop
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	20000664 	.word	0x20000664

08001854 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b086      	sub	sp, #24
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800185c:	4a14      	ldr	r2, [pc, #80]	; (80018b0 <_sbrk+0x5c>)
 800185e:	4b15      	ldr	r3, [pc, #84]	; (80018b4 <_sbrk+0x60>)
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001868:	4b13      	ldr	r3, [pc, #76]	; (80018b8 <_sbrk+0x64>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d102      	bne.n	8001876 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001870:	4b11      	ldr	r3, [pc, #68]	; (80018b8 <_sbrk+0x64>)
 8001872:	4a12      	ldr	r2, [pc, #72]	; (80018bc <_sbrk+0x68>)
 8001874:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001876:	4b10      	ldr	r3, [pc, #64]	; (80018b8 <_sbrk+0x64>)
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4413      	add	r3, r2
 800187e:	693a      	ldr	r2, [r7, #16]
 8001880:	429a      	cmp	r2, r3
 8001882:	d207      	bcs.n	8001894 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001884:	f002 faba 	bl	8003dfc <__errno>
 8001888:	4602      	mov	r2, r0
 800188a:	230c      	movs	r3, #12
 800188c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800188e:	f04f 33ff 	mov.w	r3, #4294967295
 8001892:	e009      	b.n	80018a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001894:	4b08      	ldr	r3, [pc, #32]	; (80018b8 <_sbrk+0x64>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800189a:	4b07      	ldr	r3, [pc, #28]	; (80018b8 <_sbrk+0x64>)
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4413      	add	r3, r2
 80018a2:	4a05      	ldr	r2, [pc, #20]	; (80018b8 <_sbrk+0x64>)
 80018a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018a6:	68fb      	ldr	r3, [r7, #12]
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3718      	adds	r7, #24
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	20005000 	.word	0x20005000
 80018b4:	00000400 	.word	0x00000400
 80018b8:	20000200 	.word	0x20000200
 80018bc:	20000f60 	.word	0x20000f60

080018c0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018c4:	bf00      	nop
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bc80      	pop	{r7}
 80018ca:	4770      	bx	lr

080018cc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80018cc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80018ce:	e003      	b.n	80018d8 <LoopCopyDataInit>

080018d0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80018d0:	4b0b      	ldr	r3, [pc, #44]	; (8001900 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80018d2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80018d4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80018d6:	3104      	adds	r1, #4

080018d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80018d8:	480a      	ldr	r0, [pc, #40]	; (8001904 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80018da:	4b0b      	ldr	r3, [pc, #44]	; (8001908 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80018dc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80018de:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80018e0:	d3f6      	bcc.n	80018d0 <CopyDataInit>
  ldr r2, =_sbss
 80018e2:	4a0a      	ldr	r2, [pc, #40]	; (800190c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80018e4:	e002      	b.n	80018ec <LoopFillZerobss>

080018e6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80018e6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80018e8:	f842 3b04 	str.w	r3, [r2], #4

080018ec <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80018ec:	4b08      	ldr	r3, [pc, #32]	; (8001910 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80018ee:	429a      	cmp	r2, r3
  bcc FillZerobss
 80018f0:	d3f9      	bcc.n	80018e6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80018f2:	f7ff ffe5 	bl	80018c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018f6:	f002 fa87 	bl	8003e08 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80018fa:	f7ff fb75 	bl	8000fe8 <main>
  bx lr
 80018fe:	4770      	bx	lr
  ldr r3, =_sidata
 8001900:	080061a0 	.word	0x080061a0
  ldr r0, =_sdata
 8001904:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001908:	200001dc 	.word	0x200001dc
  ldr r2, =_sbss
 800190c:	200001dc 	.word	0x200001dc
  ldr r3, = _ebss
 8001910:	20000f60 	.word	0x20000f60

08001914 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001914:	e7fe      	b.n	8001914 <CAN1_RX1_IRQHandler>
	...

08001918 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800191c:	4b08      	ldr	r3, [pc, #32]	; (8001940 <HAL_Init+0x28>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a07      	ldr	r2, [pc, #28]	; (8001940 <HAL_Init+0x28>)
 8001922:	f043 0310 	orr.w	r3, r3, #16
 8001926:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001928:	2003      	movs	r0, #3
 800192a:	f000 fdab 	bl	8002484 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800192e:	2000      	movs	r0, #0
 8001930:	f000 f808 	bl	8001944 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001934:	f7ff fe46 	bl	80015c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001938:	2300      	movs	r3, #0
}
 800193a:	4618      	mov	r0, r3
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	40022000 	.word	0x40022000

08001944 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800194c:	4b12      	ldr	r3, [pc, #72]	; (8001998 <HAL_InitTick+0x54>)
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	4b12      	ldr	r3, [pc, #72]	; (800199c <HAL_InitTick+0x58>)
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	4619      	mov	r1, r3
 8001956:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800195a:	fbb3 f3f1 	udiv	r3, r3, r1
 800195e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001962:	4618      	mov	r0, r3
 8001964:	f000 fdc3 	bl	80024ee <HAL_SYSTICK_Config>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d001      	beq.n	8001972 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e00e      	b.n	8001990 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2b0f      	cmp	r3, #15
 8001976:	d80a      	bhi.n	800198e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001978:	2200      	movs	r2, #0
 800197a:	6879      	ldr	r1, [r7, #4]
 800197c:	f04f 30ff 	mov.w	r0, #4294967295
 8001980:	f000 fd8b 	bl	800249a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001984:	4a06      	ldr	r2, [pc, #24]	; (80019a0 <HAL_InitTick+0x5c>)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800198a:	2300      	movs	r3, #0
 800198c:	e000      	b.n	8001990 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
}
 8001990:	4618      	mov	r0, r3
 8001992:	3708      	adds	r7, #8
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	20000000 	.word	0x20000000
 800199c:	20000008 	.word	0x20000008
 80019a0:	20000004 	.word	0x20000004

080019a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019a8:	4b05      	ldr	r3, [pc, #20]	; (80019c0 <HAL_IncTick+0x1c>)
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	461a      	mov	r2, r3
 80019ae:	4b05      	ldr	r3, [pc, #20]	; (80019c4 <HAL_IncTick+0x20>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4413      	add	r3, r2
 80019b4:	4a03      	ldr	r2, [pc, #12]	; (80019c4 <HAL_IncTick+0x20>)
 80019b6:	6013      	str	r3, [r2, #0]
}
 80019b8:	bf00      	nop
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bc80      	pop	{r7}
 80019be:	4770      	bx	lr
 80019c0:	20000008 	.word	0x20000008
 80019c4:	20000f58 	.word	0x20000f58

080019c8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  return uwTick;
 80019cc:	4b02      	ldr	r3, [pc, #8]	; (80019d8 <HAL_GetTick+0x10>)
 80019ce:	681b      	ldr	r3, [r3, #0]
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bc80      	pop	{r7}
 80019d6:	4770      	bx	lr
 80019d8:	20000f58 	.word	0x20000f58

080019dc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b086      	sub	sp, #24
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019e4:	2300      	movs	r3, #0
 80019e6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80019e8:	2300      	movs	r3, #0
 80019ea:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80019ec:	2300      	movs	r3, #0
 80019ee:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80019f0:	2300      	movs	r3, #0
 80019f2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d101      	bne.n	80019fe <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e0be      	b.n	8001b7c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d109      	bne.n	8001a20 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2200      	movs	r2, #0
 8001a16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f7ff fe04 	bl	8001628 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f000 fbb9 	bl	8002198 <ADC_ConversionStop_Disable>
 8001a26:	4603      	mov	r3, r0
 8001a28:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a2e:	f003 0310 	and.w	r3, r3, #16
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	f040 8099 	bne.w	8001b6a <HAL_ADC_Init+0x18e>
 8001a38:	7dfb      	ldrb	r3, [r7, #23]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	f040 8095 	bne.w	8001b6a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a44:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001a48:	f023 0302 	bic.w	r3, r3, #2
 8001a4c:	f043 0202 	orr.w	r2, r3, #2
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001a5c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	7b1b      	ldrb	r3, [r3, #12]
 8001a62:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001a64:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001a66:	68ba      	ldr	r2, [r7, #8]
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a74:	d003      	beq.n	8001a7e <HAL_ADC_Init+0xa2>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d102      	bne.n	8001a84 <HAL_ADC_Init+0xa8>
 8001a7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a82:	e000      	b.n	8001a86 <HAL_ADC_Init+0xaa>
 8001a84:	2300      	movs	r3, #0
 8001a86:	693a      	ldr	r2, [r7, #16]
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	7d1b      	ldrb	r3, [r3, #20]
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d119      	bne.n	8001ac8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	7b1b      	ldrb	r3, [r3, #12]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d109      	bne.n	8001ab0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	699b      	ldr	r3, [r3, #24]
 8001aa0:	3b01      	subs	r3, #1
 8001aa2:	035a      	lsls	r2, r3, #13
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001aac:	613b      	str	r3, [r7, #16]
 8001aae:	e00b      	b.n	8001ac8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ab4:	f043 0220 	orr.w	r2, r3, #32
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ac0:	f043 0201 	orr.w	r2, r3, #1
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	693a      	ldr	r2, [r7, #16]
 8001ad8:	430a      	orrs	r2, r1
 8001ada:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	689a      	ldr	r2, [r3, #8]
 8001ae2:	4b28      	ldr	r3, [pc, #160]	; (8001b84 <HAL_ADC_Init+0x1a8>)
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	687a      	ldr	r2, [r7, #4]
 8001ae8:	6812      	ldr	r2, [r2, #0]
 8001aea:	68b9      	ldr	r1, [r7, #8]
 8001aec:	430b      	orrs	r3, r1
 8001aee:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001af8:	d003      	beq.n	8001b02 <HAL_ADC_Init+0x126>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d104      	bne.n	8001b0c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	691b      	ldr	r3, [r3, #16]
 8001b06:	3b01      	subs	r3, #1
 8001b08:	051b      	lsls	r3, r3, #20
 8001b0a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b12:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	68fa      	ldr	r2, [r7, #12]
 8001b1c:	430a      	orrs	r2, r1
 8001b1e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	689a      	ldr	r2, [r3, #8]
 8001b26:	4b18      	ldr	r3, [pc, #96]	; (8001b88 <HAL_ADC_Init+0x1ac>)
 8001b28:	4013      	ands	r3, r2
 8001b2a:	68ba      	ldr	r2, [r7, #8]
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d10b      	bne.n	8001b48 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2200      	movs	r2, #0
 8001b34:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b3a:	f023 0303 	bic.w	r3, r3, #3
 8001b3e:	f043 0201 	orr.w	r2, r3, #1
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001b46:	e018      	b.n	8001b7a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b4c:	f023 0312 	bic.w	r3, r3, #18
 8001b50:	f043 0210 	orr.w	r2, r3, #16
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b5c:	f043 0201 	orr.w	r2, r3, #1
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001b68:	e007      	b.n	8001b7a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b6e:	f043 0210 	orr.w	r2, r3, #16
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001b7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3718      	adds	r7, #24
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	ffe1f7fd 	.word	0xffe1f7fd
 8001b88:	ff1f0efe 	.word	0xff1f0efe

08001b8c <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b086      	sub	sp, #24
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	60f8      	str	r0, [r7, #12]
 8001b94:	60b9      	str	r1, [r7, #8]
 8001b96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a64      	ldr	r2, [pc, #400]	; (8001d34 <HAL_ADC_Start_DMA+0x1a8>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d004      	beq.n	8001bb0 <HAL_ADC_Start_DMA+0x24>
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a63      	ldr	r2, [pc, #396]	; (8001d38 <HAL_ADC_Start_DMA+0x1ac>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d106      	bne.n	8001bbe <HAL_ADC_Start_DMA+0x32>
 8001bb0:	4b60      	ldr	r3, [pc, #384]	; (8001d34 <HAL_ADC_Start_DMA+0x1a8>)
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	f040 80b3 	bne.w	8001d24 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d101      	bne.n	8001bcc <HAL_ADC_Start_DMA+0x40>
 8001bc8:	2302      	movs	r3, #2
 8001bca:	e0ae      	b.n	8001d2a <HAL_ADC_Start_DMA+0x19e>
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2201      	movs	r2, #1
 8001bd0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001bd4:	68f8      	ldr	r0, [r7, #12]
 8001bd6:	f000 fa8d 	bl	80020f4 <ADC_Enable>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001bde:	7dfb      	ldrb	r3, [r7, #23]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	f040 809a 	bne.w	8001d1a <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bea:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001bee:	f023 0301 	bic.w	r3, r3, #1
 8001bf2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a4e      	ldr	r2, [pc, #312]	; (8001d38 <HAL_ADC_Start_DMA+0x1ac>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d105      	bne.n	8001c10 <HAL_ADC_Start_DMA+0x84>
 8001c04:	4b4b      	ldr	r3, [pc, #300]	; (8001d34 <HAL_ADC_Start_DMA+0x1a8>)
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d115      	bne.n	8001c3c <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c14:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d026      	beq.n	8001c78 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c2e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001c32:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001c3a:	e01d      	b.n	8001c78 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c40:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a39      	ldr	r2, [pc, #228]	; (8001d34 <HAL_ADC_Start_DMA+0x1a8>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d004      	beq.n	8001c5c <HAL_ADC_Start_DMA+0xd0>
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a38      	ldr	r2, [pc, #224]	; (8001d38 <HAL_ADC_Start_DMA+0x1ac>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d10d      	bne.n	8001c78 <HAL_ADC_Start_DMA+0xec>
 8001c5c:	4b35      	ldr	r3, [pc, #212]	; (8001d34 <HAL_ADC_Start_DMA+0x1a8>)
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d007      	beq.n	8001c78 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c6c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001c70:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d006      	beq.n	8001c92 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c88:	f023 0206 	bic.w	r2, r3, #6
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001c90:	e002      	b.n	8001c98 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	2200      	movs	r2, #0
 8001c96:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	6a1b      	ldr	r3, [r3, #32]
 8001ca4:	4a25      	ldr	r2, [pc, #148]	; (8001d3c <HAL_ADC_Start_DMA+0x1b0>)
 8001ca6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	6a1b      	ldr	r3, [r3, #32]
 8001cac:	4a24      	ldr	r2, [pc, #144]	; (8001d40 <HAL_ADC_Start_DMA+0x1b4>)
 8001cae:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	6a1b      	ldr	r3, [r3, #32]
 8001cb4:	4a23      	ldr	r2, [pc, #140]	; (8001d44 <HAL_ADC_Start_DMA+0x1b8>)
 8001cb6:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f06f 0202 	mvn.w	r2, #2
 8001cc0:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	689a      	ldr	r2, [r3, #8]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001cd0:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	6a18      	ldr	r0, [r3, #32]
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	334c      	adds	r3, #76	; 0x4c
 8001cdc:	4619      	mov	r1, r3
 8001cde:	68ba      	ldr	r2, [r7, #8]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f000 fc6b 	bl	80025bc <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001cf0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001cf4:	d108      	bne.n	8001d08 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	689a      	ldr	r2, [r3, #8]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001d04:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001d06:	e00f      	b.n	8001d28 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	689a      	ldr	r2, [r3, #8]
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001d16:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001d18:	e006      	b.n	8001d28 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8001d22:	e001      	b.n	8001d28 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001d28:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3718      	adds	r7, #24
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	40012400 	.word	0x40012400
 8001d38:	40012800 	.word	0x40012800
 8001d3c:	0800220d 	.word	0x0800220d
 8001d40:	08002289 	.word	0x08002289
 8001d44:	080022a5 	.word	0x080022a5

08001d48 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	f003 0320 	and.w	r3, r3, #32
 8001d5a:	2b20      	cmp	r3, #32
 8001d5c:	d140      	bne.n	8001de0 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 0302 	and.w	r3, r3, #2
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	d139      	bne.n	8001de0 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d70:	f003 0310 	and.w	r3, r3, #16
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d105      	bne.n	8001d84 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d7c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001d8e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001d92:	d11d      	bne.n	8001dd0 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d119      	bne.n	8001dd0 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	685a      	ldr	r2, [r3, #4]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f022 0220 	bic.w	r2, r2, #32
 8001daa:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001db0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dbc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d105      	bne.n	8001dd0 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dc8:	f043 0201 	orr.w	r2, r3, #1
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	f7ff fb69 	bl	80014a8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f06f 0212 	mvn.w	r2, #18
 8001dde:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dea:	2b80      	cmp	r3, #128	; 0x80
 8001dec:	d14f      	bne.n	8001e8e <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 0304 	and.w	r3, r3, #4
 8001df8:	2b04      	cmp	r3, #4
 8001dfa:	d148      	bne.n	8001e8e <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e00:	f003 0310 	and.w	r3, r3, #16
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d105      	bne.n	8001e14 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e0c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8001e1e:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8001e22:	d012      	beq.n	8001e4a <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d125      	bne.n	8001e7e <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001e3c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001e40:	d11d      	bne.n	8001e7e <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d119      	bne.n	8001e7e <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	685a      	ldr	r2, [r3, #4]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e58:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e5e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d105      	bne.n	8001e7e <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e76:	f043 0201 	orr.w	r2, r3, #1
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f000 fa2a 	bl	80022d8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f06f 020c 	mvn.w	r2, #12
 8001e8c:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e98:	2b40      	cmp	r3, #64	; 0x40
 8001e9a:	d114      	bne.n	8001ec6 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 0301 	and.w	r3, r3, #1
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d10d      	bne.n	8001ec6 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eae:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f000 f812 	bl	8001ee0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f06f 0201 	mvn.w	r2, #1
 8001ec4:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001ec6:	bf00      	nop
 8001ec8:	3708      	adds	r7, #8
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}

08001ece <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001ece:	b480      	push	{r7}
 8001ed0:	b083      	sub	sp, #12
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001ed6:	bf00      	nop
 8001ed8:	370c      	adds	r7, #12
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bc80      	pop	{r7}
 8001ede:	4770      	bx	lr

08001ee0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001ee8:	bf00      	nop
 8001eea:	370c      	adds	r7, #12
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bc80      	pop	{r7}
 8001ef0:	4770      	bx	lr

08001ef2 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001ef2:	b480      	push	{r7}
 8001ef4:	b083      	sub	sp, #12
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001efa:	bf00      	nop
 8001efc:	370c      	adds	r7, #12
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bc80      	pop	{r7}
 8001f02:	4770      	bx	lr

08001f04 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001f04:	b480      	push	{r7}
 8001f06:	b085      	sub	sp, #20
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001f12:	2300      	movs	r3, #0
 8001f14:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d101      	bne.n	8001f24 <HAL_ADC_ConfigChannel+0x20>
 8001f20:	2302      	movs	r3, #2
 8001f22:	e0dc      	b.n	80020de <HAL_ADC_ConfigChannel+0x1da>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2201      	movs	r2, #1
 8001f28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	2b06      	cmp	r3, #6
 8001f32:	d81c      	bhi.n	8001f6e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	685a      	ldr	r2, [r3, #4]
 8001f3e:	4613      	mov	r3, r2
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	4413      	add	r3, r2
 8001f44:	3b05      	subs	r3, #5
 8001f46:	221f      	movs	r2, #31
 8001f48:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4c:	43db      	mvns	r3, r3
 8001f4e:	4019      	ands	r1, r3
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	6818      	ldr	r0, [r3, #0]
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	685a      	ldr	r2, [r3, #4]
 8001f58:	4613      	mov	r3, r2
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	4413      	add	r3, r2
 8001f5e:	3b05      	subs	r3, #5
 8001f60:	fa00 f203 	lsl.w	r2, r0, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	430a      	orrs	r2, r1
 8001f6a:	635a      	str	r2, [r3, #52]	; 0x34
 8001f6c:	e03c      	b.n	8001fe8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	2b0c      	cmp	r3, #12
 8001f74:	d81c      	bhi.n	8001fb0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	685a      	ldr	r2, [r3, #4]
 8001f80:	4613      	mov	r3, r2
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	4413      	add	r3, r2
 8001f86:	3b23      	subs	r3, #35	; 0x23
 8001f88:	221f      	movs	r2, #31
 8001f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8e:	43db      	mvns	r3, r3
 8001f90:	4019      	ands	r1, r3
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	6818      	ldr	r0, [r3, #0]
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	685a      	ldr	r2, [r3, #4]
 8001f9a:	4613      	mov	r3, r2
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	4413      	add	r3, r2
 8001fa0:	3b23      	subs	r3, #35	; 0x23
 8001fa2:	fa00 f203 	lsl.w	r2, r0, r3
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	430a      	orrs	r2, r1
 8001fac:	631a      	str	r2, [r3, #48]	; 0x30
 8001fae:	e01b      	b.n	8001fe8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	685a      	ldr	r2, [r3, #4]
 8001fba:	4613      	mov	r3, r2
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	4413      	add	r3, r2
 8001fc0:	3b41      	subs	r3, #65	; 0x41
 8001fc2:	221f      	movs	r2, #31
 8001fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc8:	43db      	mvns	r3, r3
 8001fca:	4019      	ands	r1, r3
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	6818      	ldr	r0, [r3, #0]
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685a      	ldr	r2, [r3, #4]
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	4413      	add	r3, r2
 8001fda:	3b41      	subs	r3, #65	; 0x41
 8001fdc:	fa00 f203 	lsl.w	r2, r0, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	430a      	orrs	r2, r1
 8001fe6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	2b09      	cmp	r3, #9
 8001fee:	d91c      	bls.n	800202a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	68d9      	ldr	r1, [r3, #12]
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	4613      	mov	r3, r2
 8001ffc:	005b      	lsls	r3, r3, #1
 8001ffe:	4413      	add	r3, r2
 8002000:	3b1e      	subs	r3, #30
 8002002:	2207      	movs	r2, #7
 8002004:	fa02 f303 	lsl.w	r3, r2, r3
 8002008:	43db      	mvns	r3, r3
 800200a:	4019      	ands	r1, r3
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	6898      	ldr	r0, [r3, #8]
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	4613      	mov	r3, r2
 8002016:	005b      	lsls	r3, r3, #1
 8002018:	4413      	add	r3, r2
 800201a:	3b1e      	subs	r3, #30
 800201c:	fa00 f203 	lsl.w	r2, r0, r3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	430a      	orrs	r2, r1
 8002026:	60da      	str	r2, [r3, #12]
 8002028:	e019      	b.n	800205e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	6919      	ldr	r1, [r3, #16]
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	4613      	mov	r3, r2
 8002036:	005b      	lsls	r3, r3, #1
 8002038:	4413      	add	r3, r2
 800203a:	2207      	movs	r2, #7
 800203c:	fa02 f303 	lsl.w	r3, r2, r3
 8002040:	43db      	mvns	r3, r3
 8002042:	4019      	ands	r1, r3
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	6898      	ldr	r0, [r3, #8]
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	4613      	mov	r3, r2
 800204e:	005b      	lsls	r3, r3, #1
 8002050:	4413      	add	r3, r2
 8002052:	fa00 f203 	lsl.w	r2, r0, r3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	430a      	orrs	r2, r1
 800205c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	2b10      	cmp	r3, #16
 8002064:	d003      	beq.n	800206e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800206a:	2b11      	cmp	r3, #17
 800206c:	d132      	bne.n	80020d4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a1d      	ldr	r2, [pc, #116]	; (80020e8 <HAL_ADC_ConfigChannel+0x1e4>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d125      	bne.n	80020c4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d126      	bne.n	80020d4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	689a      	ldr	r2, [r3, #8]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002094:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	2b10      	cmp	r3, #16
 800209c:	d11a      	bne.n	80020d4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800209e:	4b13      	ldr	r3, [pc, #76]	; (80020ec <HAL_ADC_ConfigChannel+0x1e8>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a13      	ldr	r2, [pc, #76]	; (80020f0 <HAL_ADC_ConfigChannel+0x1ec>)
 80020a4:	fba2 2303 	umull	r2, r3, r2, r3
 80020a8:	0c9a      	lsrs	r2, r3, #18
 80020aa:	4613      	mov	r3, r2
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	4413      	add	r3, r2
 80020b0:	005b      	lsls	r3, r3, #1
 80020b2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80020b4:	e002      	b.n	80020bc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	3b01      	subs	r3, #1
 80020ba:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d1f9      	bne.n	80020b6 <HAL_ADC_ConfigChannel+0x1b2>
 80020c2:	e007      	b.n	80020d4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020c8:	f043 0220 	orr.w	r2, r3, #32
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2200      	movs	r2, #0
 80020d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80020dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3714      	adds	r7, #20
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bc80      	pop	{r7}
 80020e6:	4770      	bx	lr
 80020e8:	40012400 	.word	0x40012400
 80020ec:	20000000 	.word	0x20000000
 80020f0:	431bde83 	.word	0x431bde83

080020f4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b084      	sub	sp, #16
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80020fc:	2300      	movs	r3, #0
 80020fe:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002100:	2300      	movs	r3, #0
 8002102:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	f003 0301 	and.w	r3, r3, #1
 800210e:	2b01      	cmp	r3, #1
 8002110:	d039      	beq.n	8002186 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	689a      	ldr	r2, [r3, #8]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f042 0201 	orr.w	r2, r2, #1
 8002120:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002122:	4b1b      	ldr	r3, [pc, #108]	; (8002190 <ADC_Enable+0x9c>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a1b      	ldr	r2, [pc, #108]	; (8002194 <ADC_Enable+0xa0>)
 8002128:	fba2 2303 	umull	r2, r3, r2, r3
 800212c:	0c9b      	lsrs	r3, r3, #18
 800212e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002130:	e002      	b.n	8002138 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	3b01      	subs	r3, #1
 8002136:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d1f9      	bne.n	8002132 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800213e:	f7ff fc43 	bl	80019c8 <HAL_GetTick>
 8002142:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002144:	e018      	b.n	8002178 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002146:	f7ff fc3f 	bl	80019c8 <HAL_GetTick>
 800214a:	4602      	mov	r2, r0
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	1ad3      	subs	r3, r2, r3
 8002150:	2b02      	cmp	r3, #2
 8002152:	d911      	bls.n	8002178 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002158:	f043 0210 	orr.w	r2, r3, #16
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002164:	f043 0201 	orr.w	r2, r3, #1
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2200      	movs	r2, #0
 8002170:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e007      	b.n	8002188 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	f003 0301 	and.w	r3, r3, #1
 8002182:	2b01      	cmp	r3, #1
 8002184:	d1df      	bne.n	8002146 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002186:	2300      	movs	r3, #0
}
 8002188:	4618      	mov	r0, r3
 800218a:	3710      	adds	r7, #16
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}
 8002190:	20000000 	.word	0x20000000
 8002194:	431bde83 	.word	0x431bde83

08002198 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b084      	sub	sp, #16
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80021a0:	2300      	movs	r3, #0
 80021a2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	f003 0301 	and.w	r3, r3, #1
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d127      	bne.n	8002202 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	689a      	ldr	r2, [r3, #8]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f022 0201 	bic.w	r2, r2, #1
 80021c0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80021c2:	f7ff fc01 	bl	80019c8 <HAL_GetTick>
 80021c6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80021c8:	e014      	b.n	80021f4 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80021ca:	f7ff fbfd 	bl	80019c8 <HAL_GetTick>
 80021ce:	4602      	mov	r2, r0
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	2b02      	cmp	r3, #2
 80021d6:	d90d      	bls.n	80021f4 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021dc:	f043 0210 	orr.w	r2, r3, #16
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021e8:	f043 0201 	orr.w	r2, r3, #1
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e007      	b.n	8002204 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	f003 0301 	and.w	r3, r3, #1
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d0e3      	beq.n	80021ca <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002202:	2300      	movs	r3, #0
}
 8002204:	4618      	mov	r0, r3
 8002206:	3710      	adds	r7, #16
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}

0800220c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b084      	sub	sp, #16
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002218:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800221e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002222:	2b00      	cmp	r3, #0
 8002224:	d127      	bne.n	8002276 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800222a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800223c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002240:	d115      	bne.n	800226e <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002246:	2b00      	cmp	r3, #0
 8002248:	d111      	bne.n	800226e <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800224e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800225a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d105      	bne.n	800226e <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002266:	f043 0201 	orr.w	r2, r3, #1
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800226e:	68f8      	ldr	r0, [r7, #12]
 8002270:	f7ff f91a 	bl	80014a8 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002274:	e004      	b.n	8002280 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	6a1b      	ldr	r3, [r3, #32]
 800227a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	4798      	blx	r3
}
 8002280:	bf00      	nop
 8002282:	3710      	adds	r7, #16
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}

08002288 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002294:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002296:	68f8      	ldr	r0, [r7, #12]
 8002298:	f7ff fe19 	bl	8001ece <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800229c:	bf00      	nop
 800229e:	3710      	adds	r7, #16
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b0:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022c2:	f043 0204 	orr.w	r2, r3, #4
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80022ca:	68f8      	ldr	r0, [r7, #12]
 80022cc:	f7ff fe11 	bl	8001ef2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80022d0:	bf00      	nop
 80022d2:	3710      	adds	r7, #16
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}

080022d8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80022e0:	bf00      	nop
 80022e2:	370c      	adds	r7, #12
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bc80      	pop	{r7}
 80022e8:	4770      	bx	lr
	...

080022ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b085      	sub	sp, #20
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f003 0307 	and.w	r3, r3, #7
 80022fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022fc:	4b0c      	ldr	r3, [pc, #48]	; (8002330 <__NVIC_SetPriorityGrouping+0x44>)
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002302:	68ba      	ldr	r2, [r7, #8]
 8002304:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002308:	4013      	ands	r3, r2
 800230a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002314:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002318:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800231c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800231e:	4a04      	ldr	r2, [pc, #16]	; (8002330 <__NVIC_SetPriorityGrouping+0x44>)
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	60d3      	str	r3, [r2, #12]
}
 8002324:	bf00      	nop
 8002326:	3714      	adds	r7, #20
 8002328:	46bd      	mov	sp, r7
 800232a:	bc80      	pop	{r7}
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	e000ed00 	.word	0xe000ed00

08002334 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002338:	4b04      	ldr	r3, [pc, #16]	; (800234c <__NVIC_GetPriorityGrouping+0x18>)
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	0a1b      	lsrs	r3, r3, #8
 800233e:	f003 0307 	and.w	r3, r3, #7
}
 8002342:	4618      	mov	r0, r3
 8002344:	46bd      	mov	sp, r7
 8002346:	bc80      	pop	{r7}
 8002348:	4770      	bx	lr
 800234a:	bf00      	nop
 800234c:	e000ed00 	.word	0xe000ed00

08002350 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	4603      	mov	r3, r0
 8002358:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800235a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800235e:	2b00      	cmp	r3, #0
 8002360:	db0b      	blt.n	800237a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002362:	79fb      	ldrb	r3, [r7, #7]
 8002364:	f003 021f 	and.w	r2, r3, #31
 8002368:	4906      	ldr	r1, [pc, #24]	; (8002384 <__NVIC_EnableIRQ+0x34>)
 800236a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800236e:	095b      	lsrs	r3, r3, #5
 8002370:	2001      	movs	r0, #1
 8002372:	fa00 f202 	lsl.w	r2, r0, r2
 8002376:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800237a:	bf00      	nop
 800237c:	370c      	adds	r7, #12
 800237e:	46bd      	mov	sp, r7
 8002380:	bc80      	pop	{r7}
 8002382:	4770      	bx	lr
 8002384:	e000e100 	.word	0xe000e100

08002388 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
 800238e:	4603      	mov	r3, r0
 8002390:	6039      	str	r1, [r7, #0]
 8002392:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002394:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002398:	2b00      	cmp	r3, #0
 800239a:	db0a      	blt.n	80023b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	b2da      	uxtb	r2, r3
 80023a0:	490c      	ldr	r1, [pc, #48]	; (80023d4 <__NVIC_SetPriority+0x4c>)
 80023a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a6:	0112      	lsls	r2, r2, #4
 80023a8:	b2d2      	uxtb	r2, r2
 80023aa:	440b      	add	r3, r1
 80023ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023b0:	e00a      	b.n	80023c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	b2da      	uxtb	r2, r3
 80023b6:	4908      	ldr	r1, [pc, #32]	; (80023d8 <__NVIC_SetPriority+0x50>)
 80023b8:	79fb      	ldrb	r3, [r7, #7]
 80023ba:	f003 030f 	and.w	r3, r3, #15
 80023be:	3b04      	subs	r3, #4
 80023c0:	0112      	lsls	r2, r2, #4
 80023c2:	b2d2      	uxtb	r2, r2
 80023c4:	440b      	add	r3, r1
 80023c6:	761a      	strb	r2, [r3, #24]
}
 80023c8:	bf00      	nop
 80023ca:	370c      	adds	r7, #12
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bc80      	pop	{r7}
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	e000e100 	.word	0xe000e100
 80023d8:	e000ed00 	.word	0xe000ed00

080023dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023dc:	b480      	push	{r7}
 80023de:	b089      	sub	sp, #36	; 0x24
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	60f8      	str	r0, [r7, #12]
 80023e4:	60b9      	str	r1, [r7, #8]
 80023e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	f003 0307 	and.w	r3, r3, #7
 80023ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	f1c3 0307 	rsb	r3, r3, #7
 80023f6:	2b04      	cmp	r3, #4
 80023f8:	bf28      	it	cs
 80023fa:	2304      	movcs	r3, #4
 80023fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	3304      	adds	r3, #4
 8002402:	2b06      	cmp	r3, #6
 8002404:	d902      	bls.n	800240c <NVIC_EncodePriority+0x30>
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	3b03      	subs	r3, #3
 800240a:	e000      	b.n	800240e <NVIC_EncodePriority+0x32>
 800240c:	2300      	movs	r3, #0
 800240e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002410:	f04f 32ff 	mov.w	r2, #4294967295
 8002414:	69bb      	ldr	r3, [r7, #24]
 8002416:	fa02 f303 	lsl.w	r3, r2, r3
 800241a:	43da      	mvns	r2, r3
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	401a      	ands	r2, r3
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002424:	f04f 31ff 	mov.w	r1, #4294967295
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	fa01 f303 	lsl.w	r3, r1, r3
 800242e:	43d9      	mvns	r1, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002434:	4313      	orrs	r3, r2
         );
}
 8002436:	4618      	mov	r0, r3
 8002438:	3724      	adds	r7, #36	; 0x24
 800243a:	46bd      	mov	sp, r7
 800243c:	bc80      	pop	{r7}
 800243e:	4770      	bx	lr

08002440 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	3b01      	subs	r3, #1
 800244c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002450:	d301      	bcc.n	8002456 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002452:	2301      	movs	r3, #1
 8002454:	e00f      	b.n	8002476 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002456:	4a0a      	ldr	r2, [pc, #40]	; (8002480 <SysTick_Config+0x40>)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	3b01      	subs	r3, #1
 800245c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800245e:	210f      	movs	r1, #15
 8002460:	f04f 30ff 	mov.w	r0, #4294967295
 8002464:	f7ff ff90 	bl	8002388 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002468:	4b05      	ldr	r3, [pc, #20]	; (8002480 <SysTick_Config+0x40>)
 800246a:	2200      	movs	r2, #0
 800246c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800246e:	4b04      	ldr	r3, [pc, #16]	; (8002480 <SysTick_Config+0x40>)
 8002470:	2207      	movs	r2, #7
 8002472:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	3708      	adds	r7, #8
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	e000e010 	.word	0xe000e010

08002484 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f7ff ff2d 	bl	80022ec <__NVIC_SetPriorityGrouping>
}
 8002492:	bf00      	nop
 8002494:	3708      	adds	r7, #8
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}

0800249a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800249a:	b580      	push	{r7, lr}
 800249c:	b086      	sub	sp, #24
 800249e:	af00      	add	r7, sp, #0
 80024a0:	4603      	mov	r3, r0
 80024a2:	60b9      	str	r1, [r7, #8]
 80024a4:	607a      	str	r2, [r7, #4]
 80024a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024a8:	2300      	movs	r3, #0
 80024aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024ac:	f7ff ff42 	bl	8002334 <__NVIC_GetPriorityGrouping>
 80024b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	68b9      	ldr	r1, [r7, #8]
 80024b6:	6978      	ldr	r0, [r7, #20]
 80024b8:	f7ff ff90 	bl	80023dc <NVIC_EncodePriority>
 80024bc:	4602      	mov	r2, r0
 80024be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024c2:	4611      	mov	r1, r2
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7ff ff5f 	bl	8002388 <__NVIC_SetPriority>
}
 80024ca:	bf00      	nop
 80024cc:	3718      	adds	r7, #24
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}

080024d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024d2:	b580      	push	{r7, lr}
 80024d4:	b082      	sub	sp, #8
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	4603      	mov	r3, r0
 80024da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024e0:	4618      	mov	r0, r3
 80024e2:	f7ff ff35 	bl	8002350 <__NVIC_EnableIRQ>
}
 80024e6:	bf00      	nop
 80024e8:	3708      	adds	r7, #8
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}

080024ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024ee:	b580      	push	{r7, lr}
 80024f0:	b082      	sub	sp, #8
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f7ff ffa2 	bl	8002440 <SysTick_Config>
 80024fc:	4603      	mov	r3, r0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3708      	adds	r7, #8
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
	...

08002508 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002508:	b480      	push	{r7}
 800250a:	b085      	sub	sp, #20
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002510:	2300      	movs	r3, #0
 8002512:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d101      	bne.n	800251e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e043      	b.n	80025a6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	461a      	mov	r2, r3
 8002524:	4b22      	ldr	r3, [pc, #136]	; (80025b0 <HAL_DMA_Init+0xa8>)
 8002526:	4413      	add	r3, r2
 8002528:	4a22      	ldr	r2, [pc, #136]	; (80025b4 <HAL_DMA_Init+0xac>)
 800252a:	fba2 2303 	umull	r2, r3, r2, r3
 800252e:	091b      	lsrs	r3, r3, #4
 8002530:	009a      	lsls	r2, r3, #2
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4a1f      	ldr	r2, [pc, #124]	; (80025b8 <HAL_DMA_Init+0xb0>)
 800253a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2202      	movs	r2, #2
 8002540:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002552:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002556:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002560:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	68db      	ldr	r3, [r3, #12]
 8002566:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800256c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	695b      	ldr	r3, [r3, #20]
 8002572:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002578:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	69db      	ldr	r3, [r3, #28]
 800257e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002580:	68fa      	ldr	r2, [r7, #12]
 8002582:	4313      	orrs	r3, r2
 8002584:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	68fa      	ldr	r2, [r7, #12]
 800258c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2200      	movs	r2, #0
 8002592:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2201      	movs	r2, #1
 8002598:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2200      	movs	r2, #0
 80025a0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80025a4:	2300      	movs	r3, #0
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3714      	adds	r7, #20
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bc80      	pop	{r7}
 80025ae:	4770      	bx	lr
 80025b0:	bffdfff8 	.word	0xbffdfff8
 80025b4:	cccccccd 	.word	0xcccccccd
 80025b8:	40020000 	.word	0x40020000

080025bc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b086      	sub	sp, #24
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	60f8      	str	r0, [r7, #12]
 80025c4:	60b9      	str	r1, [r7, #8]
 80025c6:	607a      	str	r2, [r7, #4]
 80025c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025ca:	2300      	movs	r3, #0
 80025cc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d101      	bne.n	80025dc <HAL_DMA_Start_IT+0x20>
 80025d8:	2302      	movs	r3, #2
 80025da:	e04a      	b.n	8002672 <HAL_DMA_Start_IT+0xb6>
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2201      	movs	r2, #1
 80025e0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d13a      	bne.n	8002664 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2202      	movs	r2, #2
 80025f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2200      	movs	r2, #0
 80025fa:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f022 0201 	bic.w	r2, r2, #1
 800260a:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	68b9      	ldr	r1, [r7, #8]
 8002612:	68f8      	ldr	r0, [r7, #12]
 8002614:	f000 f938 	bl	8002888 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800261c:	2b00      	cmp	r3, #0
 800261e:	d008      	beq.n	8002632 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f042 020e 	orr.w	r2, r2, #14
 800262e:	601a      	str	r2, [r3, #0]
 8002630:	e00f      	b.n	8002652 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f022 0204 	bic.w	r2, r2, #4
 8002640:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f042 020a 	orr.w	r2, r2, #10
 8002650:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f042 0201 	orr.w	r2, r2, #1
 8002660:	601a      	str	r2, [r3, #0]
 8002662:	e005      	b.n	8002670 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2200      	movs	r2, #0
 8002668:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800266c:	2302      	movs	r3, #2
 800266e:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002670:	7dfb      	ldrb	r3, [r7, #23]
}
 8002672:	4618      	mov	r0, r3
 8002674:	3718      	adds	r7, #24
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
	...

0800267c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b084      	sub	sp, #16
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002698:	2204      	movs	r2, #4
 800269a:	409a      	lsls	r2, r3
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	4013      	ands	r3, r2
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d04f      	beq.n	8002744 <HAL_DMA_IRQHandler+0xc8>
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	f003 0304 	and.w	r3, r3, #4
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d04a      	beq.n	8002744 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0320 	and.w	r3, r3, #32
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d107      	bne.n	80026cc <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f022 0204 	bic.w	r2, r2, #4
 80026ca:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a66      	ldr	r2, [pc, #408]	; (800286c <HAL_DMA_IRQHandler+0x1f0>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d029      	beq.n	800272a <HAL_DMA_IRQHandler+0xae>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a65      	ldr	r2, [pc, #404]	; (8002870 <HAL_DMA_IRQHandler+0x1f4>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d022      	beq.n	8002726 <HAL_DMA_IRQHandler+0xaa>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a63      	ldr	r2, [pc, #396]	; (8002874 <HAL_DMA_IRQHandler+0x1f8>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d01a      	beq.n	8002720 <HAL_DMA_IRQHandler+0xa4>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a62      	ldr	r2, [pc, #392]	; (8002878 <HAL_DMA_IRQHandler+0x1fc>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d012      	beq.n	800271a <HAL_DMA_IRQHandler+0x9e>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a60      	ldr	r2, [pc, #384]	; (800287c <HAL_DMA_IRQHandler+0x200>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d00a      	beq.n	8002714 <HAL_DMA_IRQHandler+0x98>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a5f      	ldr	r2, [pc, #380]	; (8002880 <HAL_DMA_IRQHandler+0x204>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d102      	bne.n	800270e <HAL_DMA_IRQHandler+0x92>
 8002708:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800270c:	e00e      	b.n	800272c <HAL_DMA_IRQHandler+0xb0>
 800270e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002712:	e00b      	b.n	800272c <HAL_DMA_IRQHandler+0xb0>
 8002714:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002718:	e008      	b.n	800272c <HAL_DMA_IRQHandler+0xb0>
 800271a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800271e:	e005      	b.n	800272c <HAL_DMA_IRQHandler+0xb0>
 8002720:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002724:	e002      	b.n	800272c <HAL_DMA_IRQHandler+0xb0>
 8002726:	2340      	movs	r3, #64	; 0x40
 8002728:	e000      	b.n	800272c <HAL_DMA_IRQHandler+0xb0>
 800272a:	2304      	movs	r3, #4
 800272c:	4a55      	ldr	r2, [pc, #340]	; (8002884 <HAL_DMA_IRQHandler+0x208>)
 800272e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002734:	2b00      	cmp	r3, #0
 8002736:	f000 8094 	beq.w	8002862 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002742:	e08e      	b.n	8002862 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002748:	2202      	movs	r2, #2
 800274a:	409a      	lsls	r2, r3
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	4013      	ands	r3, r2
 8002750:	2b00      	cmp	r3, #0
 8002752:	d056      	beq.n	8002802 <HAL_DMA_IRQHandler+0x186>
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	f003 0302 	and.w	r3, r3, #2
 800275a:	2b00      	cmp	r3, #0
 800275c:	d051      	beq.n	8002802 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 0320 	and.w	r3, r3, #32
 8002768:	2b00      	cmp	r3, #0
 800276a:	d10b      	bne.n	8002784 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f022 020a 	bic.w	r2, r2, #10
 800277a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2201      	movs	r2, #1
 8002780:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a38      	ldr	r2, [pc, #224]	; (800286c <HAL_DMA_IRQHandler+0x1f0>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d029      	beq.n	80027e2 <HAL_DMA_IRQHandler+0x166>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a37      	ldr	r2, [pc, #220]	; (8002870 <HAL_DMA_IRQHandler+0x1f4>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d022      	beq.n	80027de <HAL_DMA_IRQHandler+0x162>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a35      	ldr	r2, [pc, #212]	; (8002874 <HAL_DMA_IRQHandler+0x1f8>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d01a      	beq.n	80027d8 <HAL_DMA_IRQHandler+0x15c>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a34      	ldr	r2, [pc, #208]	; (8002878 <HAL_DMA_IRQHandler+0x1fc>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d012      	beq.n	80027d2 <HAL_DMA_IRQHandler+0x156>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a32      	ldr	r2, [pc, #200]	; (800287c <HAL_DMA_IRQHandler+0x200>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d00a      	beq.n	80027cc <HAL_DMA_IRQHandler+0x150>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a31      	ldr	r2, [pc, #196]	; (8002880 <HAL_DMA_IRQHandler+0x204>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d102      	bne.n	80027c6 <HAL_DMA_IRQHandler+0x14a>
 80027c0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80027c4:	e00e      	b.n	80027e4 <HAL_DMA_IRQHandler+0x168>
 80027c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027ca:	e00b      	b.n	80027e4 <HAL_DMA_IRQHandler+0x168>
 80027cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027d0:	e008      	b.n	80027e4 <HAL_DMA_IRQHandler+0x168>
 80027d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80027d6:	e005      	b.n	80027e4 <HAL_DMA_IRQHandler+0x168>
 80027d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027dc:	e002      	b.n	80027e4 <HAL_DMA_IRQHandler+0x168>
 80027de:	2320      	movs	r3, #32
 80027e0:	e000      	b.n	80027e4 <HAL_DMA_IRQHandler+0x168>
 80027e2:	2302      	movs	r3, #2
 80027e4:	4a27      	ldr	r2, [pc, #156]	; (8002884 <HAL_DMA_IRQHandler+0x208>)
 80027e6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2200      	movs	r2, #0
 80027ec:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d034      	beq.n	8002862 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002800:	e02f      	b.n	8002862 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002806:	2208      	movs	r2, #8
 8002808:	409a      	lsls	r2, r3
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	4013      	ands	r3, r2
 800280e:	2b00      	cmp	r3, #0
 8002810:	d028      	beq.n	8002864 <HAL_DMA_IRQHandler+0x1e8>
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	f003 0308 	and.w	r3, r3, #8
 8002818:	2b00      	cmp	r3, #0
 800281a:	d023      	beq.n	8002864 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f022 020e 	bic.w	r2, r2, #14
 800282a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002834:	2101      	movs	r1, #1
 8002836:	fa01 f202 	lsl.w	r2, r1, r2
 800283a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2201      	movs	r2, #1
 8002840:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2201      	movs	r2, #1
 8002846:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2200      	movs	r2, #0
 800284e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002856:	2b00      	cmp	r3, #0
 8002858:	d004      	beq.n	8002864 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	4798      	blx	r3
    }
  }
  return;
 8002862:	bf00      	nop
 8002864:	bf00      	nop
}
 8002866:	3710      	adds	r7, #16
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}
 800286c:	40020008 	.word	0x40020008
 8002870:	4002001c 	.word	0x4002001c
 8002874:	40020030 	.word	0x40020030
 8002878:	40020044 	.word	0x40020044
 800287c:	40020058 	.word	0x40020058
 8002880:	4002006c 	.word	0x4002006c
 8002884:	40020000 	.word	0x40020000

08002888 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002888:	b480      	push	{r7}
 800288a:	b085      	sub	sp, #20
 800288c:	af00      	add	r7, sp, #0
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	60b9      	str	r1, [r7, #8]
 8002892:	607a      	str	r2, [r7, #4]
 8002894:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800289e:	2101      	movs	r1, #1
 80028a0:	fa01 f202 	lsl.w	r2, r1, r2
 80028a4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	683a      	ldr	r2, [r7, #0]
 80028ac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	2b10      	cmp	r3, #16
 80028b4:	d108      	bne.n	80028c8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	68ba      	ldr	r2, [r7, #8]
 80028c4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80028c6:	e007      	b.n	80028d8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	68ba      	ldr	r2, [r7, #8]
 80028ce:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	687a      	ldr	r2, [r7, #4]
 80028d6:	60da      	str	r2, [r3, #12]
}
 80028d8:	bf00      	nop
 80028da:	3714      	adds	r7, #20
 80028dc:	46bd      	mov	sp, r7
 80028de:	bc80      	pop	{r7}
 80028e0:	4770      	bx	lr
	...

080028e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b08b      	sub	sp, #44	; 0x2c
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80028ee:	2300      	movs	r3, #0
 80028f0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80028f2:	2300      	movs	r3, #0
 80028f4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028f6:	e127      	b.n	8002b48 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80028f8:	2201      	movs	r2, #1
 80028fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002900:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	69fa      	ldr	r2, [r7, #28]
 8002908:	4013      	ands	r3, r2
 800290a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800290c:	69ba      	ldr	r2, [r7, #24]
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	429a      	cmp	r2, r3
 8002912:	f040 8116 	bne.w	8002b42 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	2b12      	cmp	r3, #18
 800291c:	d034      	beq.n	8002988 <HAL_GPIO_Init+0xa4>
 800291e:	2b12      	cmp	r3, #18
 8002920:	d80d      	bhi.n	800293e <HAL_GPIO_Init+0x5a>
 8002922:	2b02      	cmp	r3, #2
 8002924:	d02b      	beq.n	800297e <HAL_GPIO_Init+0x9a>
 8002926:	2b02      	cmp	r3, #2
 8002928:	d804      	bhi.n	8002934 <HAL_GPIO_Init+0x50>
 800292a:	2b00      	cmp	r3, #0
 800292c:	d031      	beq.n	8002992 <HAL_GPIO_Init+0xae>
 800292e:	2b01      	cmp	r3, #1
 8002930:	d01c      	beq.n	800296c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002932:	e048      	b.n	80029c6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002934:	2b03      	cmp	r3, #3
 8002936:	d043      	beq.n	80029c0 <HAL_GPIO_Init+0xdc>
 8002938:	2b11      	cmp	r3, #17
 800293a:	d01b      	beq.n	8002974 <HAL_GPIO_Init+0x90>
          break;
 800293c:	e043      	b.n	80029c6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800293e:	4a89      	ldr	r2, [pc, #548]	; (8002b64 <HAL_GPIO_Init+0x280>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d026      	beq.n	8002992 <HAL_GPIO_Init+0xae>
 8002944:	4a87      	ldr	r2, [pc, #540]	; (8002b64 <HAL_GPIO_Init+0x280>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d806      	bhi.n	8002958 <HAL_GPIO_Init+0x74>
 800294a:	4a87      	ldr	r2, [pc, #540]	; (8002b68 <HAL_GPIO_Init+0x284>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d020      	beq.n	8002992 <HAL_GPIO_Init+0xae>
 8002950:	4a86      	ldr	r2, [pc, #536]	; (8002b6c <HAL_GPIO_Init+0x288>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d01d      	beq.n	8002992 <HAL_GPIO_Init+0xae>
          break;
 8002956:	e036      	b.n	80029c6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002958:	4a85      	ldr	r2, [pc, #532]	; (8002b70 <HAL_GPIO_Init+0x28c>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d019      	beq.n	8002992 <HAL_GPIO_Init+0xae>
 800295e:	4a85      	ldr	r2, [pc, #532]	; (8002b74 <HAL_GPIO_Init+0x290>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d016      	beq.n	8002992 <HAL_GPIO_Init+0xae>
 8002964:	4a84      	ldr	r2, [pc, #528]	; (8002b78 <HAL_GPIO_Init+0x294>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d013      	beq.n	8002992 <HAL_GPIO_Init+0xae>
          break;
 800296a:	e02c      	b.n	80029c6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	623b      	str	r3, [r7, #32]
          break;
 8002972:	e028      	b.n	80029c6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	3304      	adds	r3, #4
 800297a:	623b      	str	r3, [r7, #32]
          break;
 800297c:	e023      	b.n	80029c6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	68db      	ldr	r3, [r3, #12]
 8002982:	3308      	adds	r3, #8
 8002984:	623b      	str	r3, [r7, #32]
          break;
 8002986:	e01e      	b.n	80029c6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	330c      	adds	r3, #12
 800298e:	623b      	str	r3, [r7, #32]
          break;
 8002990:	e019      	b.n	80029c6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d102      	bne.n	80029a0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800299a:	2304      	movs	r3, #4
 800299c:	623b      	str	r3, [r7, #32]
          break;
 800299e:	e012      	b.n	80029c6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d105      	bne.n	80029b4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80029a8:	2308      	movs	r3, #8
 80029aa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	69fa      	ldr	r2, [r7, #28]
 80029b0:	611a      	str	r2, [r3, #16]
          break;
 80029b2:	e008      	b.n	80029c6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80029b4:	2308      	movs	r3, #8
 80029b6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	69fa      	ldr	r2, [r7, #28]
 80029bc:	615a      	str	r2, [r3, #20]
          break;
 80029be:	e002      	b.n	80029c6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80029c0:	2300      	movs	r3, #0
 80029c2:	623b      	str	r3, [r7, #32]
          break;
 80029c4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80029c6:	69bb      	ldr	r3, [r7, #24]
 80029c8:	2bff      	cmp	r3, #255	; 0xff
 80029ca:	d801      	bhi.n	80029d0 <HAL_GPIO_Init+0xec>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	e001      	b.n	80029d4 <HAL_GPIO_Init+0xf0>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	3304      	adds	r3, #4
 80029d4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80029d6:	69bb      	ldr	r3, [r7, #24]
 80029d8:	2bff      	cmp	r3, #255	; 0xff
 80029da:	d802      	bhi.n	80029e2 <HAL_GPIO_Init+0xfe>
 80029dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	e002      	b.n	80029e8 <HAL_GPIO_Init+0x104>
 80029e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e4:	3b08      	subs	r3, #8
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	210f      	movs	r1, #15
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	fa01 f303 	lsl.w	r3, r1, r3
 80029f6:	43db      	mvns	r3, r3
 80029f8:	401a      	ands	r2, r3
 80029fa:	6a39      	ldr	r1, [r7, #32]
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002a02:	431a      	orrs	r2, r3
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	f000 8096 	beq.w	8002b42 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002a16:	4b59      	ldr	r3, [pc, #356]	; (8002b7c <HAL_GPIO_Init+0x298>)
 8002a18:	699b      	ldr	r3, [r3, #24]
 8002a1a:	4a58      	ldr	r2, [pc, #352]	; (8002b7c <HAL_GPIO_Init+0x298>)
 8002a1c:	f043 0301 	orr.w	r3, r3, #1
 8002a20:	6193      	str	r3, [r2, #24]
 8002a22:	4b56      	ldr	r3, [pc, #344]	; (8002b7c <HAL_GPIO_Init+0x298>)
 8002a24:	699b      	ldr	r3, [r3, #24]
 8002a26:	f003 0301 	and.w	r3, r3, #1
 8002a2a:	60bb      	str	r3, [r7, #8]
 8002a2c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002a2e:	4a54      	ldr	r2, [pc, #336]	; (8002b80 <HAL_GPIO_Init+0x29c>)
 8002a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a32:	089b      	lsrs	r3, r3, #2
 8002a34:	3302      	adds	r3, #2
 8002a36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a3a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3e:	f003 0303 	and.w	r3, r3, #3
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	220f      	movs	r2, #15
 8002a46:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4a:	43db      	mvns	r3, r3
 8002a4c:	68fa      	ldr	r2, [r7, #12]
 8002a4e:	4013      	ands	r3, r2
 8002a50:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	4a4b      	ldr	r2, [pc, #300]	; (8002b84 <HAL_GPIO_Init+0x2a0>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d013      	beq.n	8002a82 <HAL_GPIO_Init+0x19e>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4a4a      	ldr	r2, [pc, #296]	; (8002b88 <HAL_GPIO_Init+0x2a4>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d00d      	beq.n	8002a7e <HAL_GPIO_Init+0x19a>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4a49      	ldr	r2, [pc, #292]	; (8002b8c <HAL_GPIO_Init+0x2a8>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d007      	beq.n	8002a7a <HAL_GPIO_Init+0x196>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	4a48      	ldr	r2, [pc, #288]	; (8002b90 <HAL_GPIO_Init+0x2ac>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d101      	bne.n	8002a76 <HAL_GPIO_Init+0x192>
 8002a72:	2303      	movs	r3, #3
 8002a74:	e006      	b.n	8002a84 <HAL_GPIO_Init+0x1a0>
 8002a76:	2304      	movs	r3, #4
 8002a78:	e004      	b.n	8002a84 <HAL_GPIO_Init+0x1a0>
 8002a7a:	2302      	movs	r3, #2
 8002a7c:	e002      	b.n	8002a84 <HAL_GPIO_Init+0x1a0>
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e000      	b.n	8002a84 <HAL_GPIO_Init+0x1a0>
 8002a82:	2300      	movs	r3, #0
 8002a84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a86:	f002 0203 	and.w	r2, r2, #3
 8002a8a:	0092      	lsls	r2, r2, #2
 8002a8c:	4093      	lsls	r3, r2
 8002a8e:	68fa      	ldr	r2, [r7, #12]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002a94:	493a      	ldr	r1, [pc, #232]	; (8002b80 <HAL_GPIO_Init+0x29c>)
 8002a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a98:	089b      	lsrs	r3, r3, #2
 8002a9a:	3302      	adds	r3, #2
 8002a9c:	68fa      	ldr	r2, [r7, #12]
 8002a9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d006      	beq.n	8002abc <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002aae:	4b39      	ldr	r3, [pc, #228]	; (8002b94 <HAL_GPIO_Init+0x2b0>)
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	4938      	ldr	r1, [pc, #224]	; (8002b94 <HAL_GPIO_Init+0x2b0>)
 8002ab4:	69bb      	ldr	r3, [r7, #24]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	600b      	str	r3, [r1, #0]
 8002aba:	e006      	b.n	8002aca <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002abc:	4b35      	ldr	r3, [pc, #212]	; (8002b94 <HAL_GPIO_Init+0x2b0>)
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	69bb      	ldr	r3, [r7, #24]
 8002ac2:	43db      	mvns	r3, r3
 8002ac4:	4933      	ldr	r1, [pc, #204]	; (8002b94 <HAL_GPIO_Init+0x2b0>)
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d006      	beq.n	8002ae4 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002ad6:	4b2f      	ldr	r3, [pc, #188]	; (8002b94 <HAL_GPIO_Init+0x2b0>)
 8002ad8:	685a      	ldr	r2, [r3, #4]
 8002ada:	492e      	ldr	r1, [pc, #184]	; (8002b94 <HAL_GPIO_Init+0x2b0>)
 8002adc:	69bb      	ldr	r3, [r7, #24]
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	604b      	str	r3, [r1, #4]
 8002ae2:	e006      	b.n	8002af2 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002ae4:	4b2b      	ldr	r3, [pc, #172]	; (8002b94 <HAL_GPIO_Init+0x2b0>)
 8002ae6:	685a      	ldr	r2, [r3, #4]
 8002ae8:	69bb      	ldr	r3, [r7, #24]
 8002aea:	43db      	mvns	r3, r3
 8002aec:	4929      	ldr	r1, [pc, #164]	; (8002b94 <HAL_GPIO_Init+0x2b0>)
 8002aee:	4013      	ands	r3, r2
 8002af0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d006      	beq.n	8002b0c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002afe:	4b25      	ldr	r3, [pc, #148]	; (8002b94 <HAL_GPIO_Init+0x2b0>)
 8002b00:	689a      	ldr	r2, [r3, #8]
 8002b02:	4924      	ldr	r1, [pc, #144]	; (8002b94 <HAL_GPIO_Init+0x2b0>)
 8002b04:	69bb      	ldr	r3, [r7, #24]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	608b      	str	r3, [r1, #8]
 8002b0a:	e006      	b.n	8002b1a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002b0c:	4b21      	ldr	r3, [pc, #132]	; (8002b94 <HAL_GPIO_Init+0x2b0>)
 8002b0e:	689a      	ldr	r2, [r3, #8]
 8002b10:	69bb      	ldr	r3, [r7, #24]
 8002b12:	43db      	mvns	r3, r3
 8002b14:	491f      	ldr	r1, [pc, #124]	; (8002b94 <HAL_GPIO_Init+0x2b0>)
 8002b16:	4013      	ands	r3, r2
 8002b18:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d006      	beq.n	8002b34 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002b26:	4b1b      	ldr	r3, [pc, #108]	; (8002b94 <HAL_GPIO_Init+0x2b0>)
 8002b28:	68da      	ldr	r2, [r3, #12]
 8002b2a:	491a      	ldr	r1, [pc, #104]	; (8002b94 <HAL_GPIO_Init+0x2b0>)
 8002b2c:	69bb      	ldr	r3, [r7, #24]
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	60cb      	str	r3, [r1, #12]
 8002b32:	e006      	b.n	8002b42 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002b34:	4b17      	ldr	r3, [pc, #92]	; (8002b94 <HAL_GPIO_Init+0x2b0>)
 8002b36:	68da      	ldr	r2, [r3, #12]
 8002b38:	69bb      	ldr	r3, [r7, #24]
 8002b3a:	43db      	mvns	r3, r3
 8002b3c:	4915      	ldr	r1, [pc, #84]	; (8002b94 <HAL_GPIO_Init+0x2b0>)
 8002b3e:	4013      	ands	r3, r2
 8002b40:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b44:	3301      	adds	r3, #1
 8002b46:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4e:	fa22 f303 	lsr.w	r3, r2, r3
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	f47f aed0 	bne.w	80028f8 <HAL_GPIO_Init+0x14>
  }
}
 8002b58:	bf00      	nop
 8002b5a:	372c      	adds	r7, #44	; 0x2c
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bc80      	pop	{r7}
 8002b60:	4770      	bx	lr
 8002b62:	bf00      	nop
 8002b64:	10210000 	.word	0x10210000
 8002b68:	10110000 	.word	0x10110000
 8002b6c:	10120000 	.word	0x10120000
 8002b70:	10310000 	.word	0x10310000
 8002b74:	10320000 	.word	0x10320000
 8002b78:	10220000 	.word	0x10220000
 8002b7c:	40021000 	.word	0x40021000
 8002b80:	40010000 	.word	0x40010000
 8002b84:	40010800 	.word	0x40010800
 8002b88:	40010c00 	.word	0x40010c00
 8002b8c:	40011000 	.word	0x40011000
 8002b90:	40011400 	.word	0x40011400
 8002b94:	40010400 	.word	0x40010400

08002b98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b086      	sub	sp, #24
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d101      	bne.n	8002baa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e26c      	b.n	8003084 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0301 	and.w	r3, r3, #1
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	f000 8087 	beq.w	8002cc6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002bb8:	4b92      	ldr	r3, [pc, #584]	; (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f003 030c 	and.w	r3, r3, #12
 8002bc0:	2b04      	cmp	r3, #4
 8002bc2:	d00c      	beq.n	8002bde <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002bc4:	4b8f      	ldr	r3, [pc, #572]	; (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f003 030c 	and.w	r3, r3, #12
 8002bcc:	2b08      	cmp	r3, #8
 8002bce:	d112      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x5e>
 8002bd0:	4b8c      	ldr	r3, [pc, #560]	; (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bdc:	d10b      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bde:	4b89      	ldr	r3, [pc, #548]	; (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d06c      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x12c>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d168      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e246      	b.n	8003084 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bfe:	d106      	bne.n	8002c0e <HAL_RCC_OscConfig+0x76>
 8002c00:	4b80      	ldr	r3, [pc, #512]	; (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a7f      	ldr	r2, [pc, #508]	; (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002c06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c0a:	6013      	str	r3, [r2, #0]
 8002c0c:	e02e      	b.n	8002c6c <HAL_RCC_OscConfig+0xd4>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d10c      	bne.n	8002c30 <HAL_RCC_OscConfig+0x98>
 8002c16:	4b7b      	ldr	r3, [pc, #492]	; (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a7a      	ldr	r2, [pc, #488]	; (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002c1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c20:	6013      	str	r3, [r2, #0]
 8002c22:	4b78      	ldr	r3, [pc, #480]	; (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a77      	ldr	r2, [pc, #476]	; (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002c28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c2c:	6013      	str	r3, [r2, #0]
 8002c2e:	e01d      	b.n	8002c6c <HAL_RCC_OscConfig+0xd4>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c38:	d10c      	bne.n	8002c54 <HAL_RCC_OscConfig+0xbc>
 8002c3a:	4b72      	ldr	r3, [pc, #456]	; (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a71      	ldr	r2, [pc, #452]	; (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002c40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c44:	6013      	str	r3, [r2, #0]
 8002c46:	4b6f      	ldr	r3, [pc, #444]	; (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a6e      	ldr	r2, [pc, #440]	; (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002c4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c50:	6013      	str	r3, [r2, #0]
 8002c52:	e00b      	b.n	8002c6c <HAL_RCC_OscConfig+0xd4>
 8002c54:	4b6b      	ldr	r3, [pc, #428]	; (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a6a      	ldr	r2, [pc, #424]	; (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002c5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c5e:	6013      	str	r3, [r2, #0]
 8002c60:	4b68      	ldr	r3, [pc, #416]	; (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a67      	ldr	r2, [pc, #412]	; (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002c66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c6a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d013      	beq.n	8002c9c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c74:	f7fe fea8 	bl	80019c8 <HAL_GetTick>
 8002c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c7a:	e008      	b.n	8002c8e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c7c:	f7fe fea4 	bl	80019c8 <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	2b64      	cmp	r3, #100	; 0x64
 8002c88:	d901      	bls.n	8002c8e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e1fa      	b.n	8003084 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c8e:	4b5d      	ldr	r3, [pc, #372]	; (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d0f0      	beq.n	8002c7c <HAL_RCC_OscConfig+0xe4>
 8002c9a:	e014      	b.n	8002cc6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c9c:	f7fe fe94 	bl	80019c8 <HAL_GetTick>
 8002ca0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ca2:	e008      	b.n	8002cb6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ca4:	f7fe fe90 	bl	80019c8 <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	2b64      	cmp	r3, #100	; 0x64
 8002cb0:	d901      	bls.n	8002cb6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e1e6      	b.n	8003084 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cb6:	4b53      	ldr	r3, [pc, #332]	; (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d1f0      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x10c>
 8002cc2:	e000      	b.n	8002cc6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0302 	and.w	r3, r3, #2
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d063      	beq.n	8002d9a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002cd2:	4b4c      	ldr	r3, [pc, #304]	; (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	f003 030c 	and.w	r3, r3, #12
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d00b      	beq.n	8002cf6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002cde:	4b49      	ldr	r3, [pc, #292]	; (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f003 030c 	and.w	r3, r3, #12
 8002ce6:	2b08      	cmp	r3, #8
 8002ce8:	d11c      	bne.n	8002d24 <HAL_RCC_OscConfig+0x18c>
 8002cea:	4b46      	ldr	r3, [pc, #280]	; (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d116      	bne.n	8002d24 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cf6:	4b43      	ldr	r3, [pc, #268]	; (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0302 	and.w	r3, r3, #2
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d005      	beq.n	8002d0e <HAL_RCC_OscConfig+0x176>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	691b      	ldr	r3, [r3, #16]
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d001      	beq.n	8002d0e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e1ba      	b.n	8003084 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d0e:	4b3d      	ldr	r3, [pc, #244]	; (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	695b      	ldr	r3, [r3, #20]
 8002d1a:	00db      	lsls	r3, r3, #3
 8002d1c:	4939      	ldr	r1, [pc, #228]	; (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d22:	e03a      	b.n	8002d9a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	691b      	ldr	r3, [r3, #16]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d020      	beq.n	8002d6e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d2c:	4b36      	ldr	r3, [pc, #216]	; (8002e08 <HAL_RCC_OscConfig+0x270>)
 8002d2e:	2201      	movs	r2, #1
 8002d30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d32:	f7fe fe49 	bl	80019c8 <HAL_GetTick>
 8002d36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d38:	e008      	b.n	8002d4c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d3a:	f7fe fe45 	bl	80019c8 <HAL_GetTick>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	2b02      	cmp	r3, #2
 8002d46:	d901      	bls.n	8002d4c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002d48:	2303      	movs	r3, #3
 8002d4a:	e19b      	b.n	8003084 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d4c:	4b2d      	ldr	r3, [pc, #180]	; (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0302 	and.w	r3, r3, #2
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d0f0      	beq.n	8002d3a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d58:	4b2a      	ldr	r3, [pc, #168]	; (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	695b      	ldr	r3, [r3, #20]
 8002d64:	00db      	lsls	r3, r3, #3
 8002d66:	4927      	ldr	r1, [pc, #156]	; (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	600b      	str	r3, [r1, #0]
 8002d6c:	e015      	b.n	8002d9a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d6e:	4b26      	ldr	r3, [pc, #152]	; (8002e08 <HAL_RCC_OscConfig+0x270>)
 8002d70:	2200      	movs	r2, #0
 8002d72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d74:	f7fe fe28 	bl	80019c8 <HAL_GetTick>
 8002d78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d7a:	e008      	b.n	8002d8e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d7c:	f7fe fe24 	bl	80019c8 <HAL_GetTick>
 8002d80:	4602      	mov	r2, r0
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d901      	bls.n	8002d8e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e17a      	b.n	8003084 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d8e:	4b1d      	ldr	r3, [pc, #116]	; (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0302 	and.w	r3, r3, #2
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d1f0      	bne.n	8002d7c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0308 	and.w	r3, r3, #8
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d03a      	beq.n	8002e1c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	699b      	ldr	r3, [r3, #24]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d019      	beq.n	8002de2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dae:	4b17      	ldr	r3, [pc, #92]	; (8002e0c <HAL_RCC_OscConfig+0x274>)
 8002db0:	2201      	movs	r2, #1
 8002db2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002db4:	f7fe fe08 	bl	80019c8 <HAL_GetTick>
 8002db8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dba:	e008      	b.n	8002dce <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dbc:	f7fe fe04 	bl	80019c8 <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	d901      	bls.n	8002dce <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e15a      	b.n	8003084 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dce:	4b0d      	ldr	r3, [pc, #52]	; (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd2:	f003 0302 	and.w	r3, r3, #2
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d0f0      	beq.n	8002dbc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002dda:	2001      	movs	r0, #1
 8002ddc:	f000 fada 	bl	8003394 <RCC_Delay>
 8002de0:	e01c      	b.n	8002e1c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002de2:	4b0a      	ldr	r3, [pc, #40]	; (8002e0c <HAL_RCC_OscConfig+0x274>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002de8:	f7fe fdee 	bl	80019c8 <HAL_GetTick>
 8002dec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dee:	e00f      	b.n	8002e10 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002df0:	f7fe fdea 	bl	80019c8 <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	2b02      	cmp	r3, #2
 8002dfc:	d908      	bls.n	8002e10 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e140      	b.n	8003084 <HAL_RCC_OscConfig+0x4ec>
 8002e02:	bf00      	nop
 8002e04:	40021000 	.word	0x40021000
 8002e08:	42420000 	.word	0x42420000
 8002e0c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e10:	4b9e      	ldr	r3, [pc, #632]	; (800308c <HAL_RCC_OscConfig+0x4f4>)
 8002e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e14:	f003 0302 	and.w	r3, r3, #2
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d1e9      	bne.n	8002df0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0304 	and.w	r3, r3, #4
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	f000 80a6 	beq.w	8002f76 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e2e:	4b97      	ldr	r3, [pc, #604]	; (800308c <HAL_RCC_OscConfig+0x4f4>)
 8002e30:	69db      	ldr	r3, [r3, #28]
 8002e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d10d      	bne.n	8002e56 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e3a:	4b94      	ldr	r3, [pc, #592]	; (800308c <HAL_RCC_OscConfig+0x4f4>)
 8002e3c:	69db      	ldr	r3, [r3, #28]
 8002e3e:	4a93      	ldr	r2, [pc, #588]	; (800308c <HAL_RCC_OscConfig+0x4f4>)
 8002e40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e44:	61d3      	str	r3, [r2, #28]
 8002e46:	4b91      	ldr	r3, [pc, #580]	; (800308c <HAL_RCC_OscConfig+0x4f4>)
 8002e48:	69db      	ldr	r3, [r3, #28]
 8002e4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e4e:	60bb      	str	r3, [r7, #8]
 8002e50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e52:	2301      	movs	r3, #1
 8002e54:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e56:	4b8e      	ldr	r3, [pc, #568]	; (8003090 <HAL_RCC_OscConfig+0x4f8>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d118      	bne.n	8002e94 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e62:	4b8b      	ldr	r3, [pc, #556]	; (8003090 <HAL_RCC_OscConfig+0x4f8>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a8a      	ldr	r2, [pc, #552]	; (8003090 <HAL_RCC_OscConfig+0x4f8>)
 8002e68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e6e:	f7fe fdab 	bl	80019c8 <HAL_GetTick>
 8002e72:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e74:	e008      	b.n	8002e88 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e76:	f7fe fda7 	bl	80019c8 <HAL_GetTick>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	2b64      	cmp	r3, #100	; 0x64
 8002e82:	d901      	bls.n	8002e88 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002e84:	2303      	movs	r3, #3
 8002e86:	e0fd      	b.n	8003084 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e88:	4b81      	ldr	r3, [pc, #516]	; (8003090 <HAL_RCC_OscConfig+0x4f8>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d0f0      	beq.n	8002e76 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d106      	bne.n	8002eaa <HAL_RCC_OscConfig+0x312>
 8002e9c:	4b7b      	ldr	r3, [pc, #492]	; (800308c <HAL_RCC_OscConfig+0x4f4>)
 8002e9e:	6a1b      	ldr	r3, [r3, #32]
 8002ea0:	4a7a      	ldr	r2, [pc, #488]	; (800308c <HAL_RCC_OscConfig+0x4f4>)
 8002ea2:	f043 0301 	orr.w	r3, r3, #1
 8002ea6:	6213      	str	r3, [r2, #32]
 8002ea8:	e02d      	b.n	8002f06 <HAL_RCC_OscConfig+0x36e>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d10c      	bne.n	8002ecc <HAL_RCC_OscConfig+0x334>
 8002eb2:	4b76      	ldr	r3, [pc, #472]	; (800308c <HAL_RCC_OscConfig+0x4f4>)
 8002eb4:	6a1b      	ldr	r3, [r3, #32]
 8002eb6:	4a75      	ldr	r2, [pc, #468]	; (800308c <HAL_RCC_OscConfig+0x4f4>)
 8002eb8:	f023 0301 	bic.w	r3, r3, #1
 8002ebc:	6213      	str	r3, [r2, #32]
 8002ebe:	4b73      	ldr	r3, [pc, #460]	; (800308c <HAL_RCC_OscConfig+0x4f4>)
 8002ec0:	6a1b      	ldr	r3, [r3, #32]
 8002ec2:	4a72      	ldr	r2, [pc, #456]	; (800308c <HAL_RCC_OscConfig+0x4f4>)
 8002ec4:	f023 0304 	bic.w	r3, r3, #4
 8002ec8:	6213      	str	r3, [r2, #32]
 8002eca:	e01c      	b.n	8002f06 <HAL_RCC_OscConfig+0x36e>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	2b05      	cmp	r3, #5
 8002ed2:	d10c      	bne.n	8002eee <HAL_RCC_OscConfig+0x356>
 8002ed4:	4b6d      	ldr	r3, [pc, #436]	; (800308c <HAL_RCC_OscConfig+0x4f4>)
 8002ed6:	6a1b      	ldr	r3, [r3, #32]
 8002ed8:	4a6c      	ldr	r2, [pc, #432]	; (800308c <HAL_RCC_OscConfig+0x4f4>)
 8002eda:	f043 0304 	orr.w	r3, r3, #4
 8002ede:	6213      	str	r3, [r2, #32]
 8002ee0:	4b6a      	ldr	r3, [pc, #424]	; (800308c <HAL_RCC_OscConfig+0x4f4>)
 8002ee2:	6a1b      	ldr	r3, [r3, #32]
 8002ee4:	4a69      	ldr	r2, [pc, #420]	; (800308c <HAL_RCC_OscConfig+0x4f4>)
 8002ee6:	f043 0301 	orr.w	r3, r3, #1
 8002eea:	6213      	str	r3, [r2, #32]
 8002eec:	e00b      	b.n	8002f06 <HAL_RCC_OscConfig+0x36e>
 8002eee:	4b67      	ldr	r3, [pc, #412]	; (800308c <HAL_RCC_OscConfig+0x4f4>)
 8002ef0:	6a1b      	ldr	r3, [r3, #32]
 8002ef2:	4a66      	ldr	r2, [pc, #408]	; (800308c <HAL_RCC_OscConfig+0x4f4>)
 8002ef4:	f023 0301 	bic.w	r3, r3, #1
 8002ef8:	6213      	str	r3, [r2, #32]
 8002efa:	4b64      	ldr	r3, [pc, #400]	; (800308c <HAL_RCC_OscConfig+0x4f4>)
 8002efc:	6a1b      	ldr	r3, [r3, #32]
 8002efe:	4a63      	ldr	r2, [pc, #396]	; (800308c <HAL_RCC_OscConfig+0x4f4>)
 8002f00:	f023 0304 	bic.w	r3, r3, #4
 8002f04:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d015      	beq.n	8002f3a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f0e:	f7fe fd5b 	bl	80019c8 <HAL_GetTick>
 8002f12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f14:	e00a      	b.n	8002f2c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f16:	f7fe fd57 	bl	80019c8 <HAL_GetTick>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	1ad3      	subs	r3, r2, r3
 8002f20:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d901      	bls.n	8002f2c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002f28:	2303      	movs	r3, #3
 8002f2a:	e0ab      	b.n	8003084 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f2c:	4b57      	ldr	r3, [pc, #348]	; (800308c <HAL_RCC_OscConfig+0x4f4>)
 8002f2e:	6a1b      	ldr	r3, [r3, #32]
 8002f30:	f003 0302 	and.w	r3, r3, #2
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d0ee      	beq.n	8002f16 <HAL_RCC_OscConfig+0x37e>
 8002f38:	e014      	b.n	8002f64 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f3a:	f7fe fd45 	bl	80019c8 <HAL_GetTick>
 8002f3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f40:	e00a      	b.n	8002f58 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f42:	f7fe fd41 	bl	80019c8 <HAL_GetTick>
 8002f46:	4602      	mov	r2, r0
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d901      	bls.n	8002f58 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002f54:	2303      	movs	r3, #3
 8002f56:	e095      	b.n	8003084 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f58:	4b4c      	ldr	r3, [pc, #304]	; (800308c <HAL_RCC_OscConfig+0x4f4>)
 8002f5a:	6a1b      	ldr	r3, [r3, #32]
 8002f5c:	f003 0302 	and.w	r3, r3, #2
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d1ee      	bne.n	8002f42 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f64:	7dfb      	ldrb	r3, [r7, #23]
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d105      	bne.n	8002f76 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f6a:	4b48      	ldr	r3, [pc, #288]	; (800308c <HAL_RCC_OscConfig+0x4f4>)
 8002f6c:	69db      	ldr	r3, [r3, #28]
 8002f6e:	4a47      	ldr	r2, [pc, #284]	; (800308c <HAL_RCC_OscConfig+0x4f4>)
 8002f70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f74:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	69db      	ldr	r3, [r3, #28]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	f000 8081 	beq.w	8003082 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f80:	4b42      	ldr	r3, [pc, #264]	; (800308c <HAL_RCC_OscConfig+0x4f4>)
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	f003 030c 	and.w	r3, r3, #12
 8002f88:	2b08      	cmp	r3, #8
 8002f8a:	d061      	beq.n	8003050 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	69db      	ldr	r3, [r3, #28]
 8002f90:	2b02      	cmp	r3, #2
 8002f92:	d146      	bne.n	8003022 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f94:	4b3f      	ldr	r3, [pc, #252]	; (8003094 <HAL_RCC_OscConfig+0x4fc>)
 8002f96:	2200      	movs	r2, #0
 8002f98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f9a:	f7fe fd15 	bl	80019c8 <HAL_GetTick>
 8002f9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fa0:	e008      	b.n	8002fb4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fa2:	f7fe fd11 	bl	80019c8 <HAL_GetTick>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	2b02      	cmp	r3, #2
 8002fae:	d901      	bls.n	8002fb4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	e067      	b.n	8003084 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fb4:	4b35      	ldr	r3, [pc, #212]	; (800308c <HAL_RCC_OscConfig+0x4f4>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d1f0      	bne.n	8002fa2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6a1b      	ldr	r3, [r3, #32]
 8002fc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fc8:	d108      	bne.n	8002fdc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002fca:	4b30      	ldr	r3, [pc, #192]	; (800308c <HAL_RCC_OscConfig+0x4f4>)
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	492d      	ldr	r1, [pc, #180]	; (800308c <HAL_RCC_OscConfig+0x4f4>)
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fdc:	4b2b      	ldr	r3, [pc, #172]	; (800308c <HAL_RCC_OscConfig+0x4f4>)
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6a19      	ldr	r1, [r3, #32]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fec:	430b      	orrs	r3, r1
 8002fee:	4927      	ldr	r1, [pc, #156]	; (800308c <HAL_RCC_OscConfig+0x4f4>)
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ff4:	4b27      	ldr	r3, [pc, #156]	; (8003094 <HAL_RCC_OscConfig+0x4fc>)
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ffa:	f7fe fce5 	bl	80019c8 <HAL_GetTick>
 8002ffe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003000:	e008      	b.n	8003014 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003002:	f7fe fce1 	bl	80019c8 <HAL_GetTick>
 8003006:	4602      	mov	r2, r0
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	2b02      	cmp	r3, #2
 800300e:	d901      	bls.n	8003014 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003010:	2303      	movs	r3, #3
 8003012:	e037      	b.n	8003084 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003014:	4b1d      	ldr	r3, [pc, #116]	; (800308c <HAL_RCC_OscConfig+0x4f4>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800301c:	2b00      	cmp	r3, #0
 800301e:	d0f0      	beq.n	8003002 <HAL_RCC_OscConfig+0x46a>
 8003020:	e02f      	b.n	8003082 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003022:	4b1c      	ldr	r3, [pc, #112]	; (8003094 <HAL_RCC_OscConfig+0x4fc>)
 8003024:	2200      	movs	r2, #0
 8003026:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003028:	f7fe fcce 	bl	80019c8 <HAL_GetTick>
 800302c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800302e:	e008      	b.n	8003042 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003030:	f7fe fcca 	bl	80019c8 <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	2b02      	cmp	r3, #2
 800303c:	d901      	bls.n	8003042 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e020      	b.n	8003084 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003042:	4b12      	ldr	r3, [pc, #72]	; (800308c <HAL_RCC_OscConfig+0x4f4>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d1f0      	bne.n	8003030 <HAL_RCC_OscConfig+0x498>
 800304e:	e018      	b.n	8003082 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	69db      	ldr	r3, [r3, #28]
 8003054:	2b01      	cmp	r3, #1
 8003056:	d101      	bne.n	800305c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e013      	b.n	8003084 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800305c:	4b0b      	ldr	r3, [pc, #44]	; (800308c <HAL_RCC_OscConfig+0x4f4>)
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6a1b      	ldr	r3, [r3, #32]
 800306c:	429a      	cmp	r2, r3
 800306e:	d106      	bne.n	800307e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800307a:	429a      	cmp	r2, r3
 800307c:	d001      	beq.n	8003082 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e000      	b.n	8003084 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003082:	2300      	movs	r3, #0
}
 8003084:	4618      	mov	r0, r3
 8003086:	3718      	adds	r7, #24
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}
 800308c:	40021000 	.word	0x40021000
 8003090:	40007000 	.word	0x40007000
 8003094:	42420060 	.word	0x42420060

08003098 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b084      	sub	sp, #16
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d101      	bne.n	80030ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e0d0      	b.n	800324e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030ac:	4b6a      	ldr	r3, [pc, #424]	; (8003258 <HAL_RCC_ClockConfig+0x1c0>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0307 	and.w	r3, r3, #7
 80030b4:	683a      	ldr	r2, [r7, #0]
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d910      	bls.n	80030dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ba:	4b67      	ldr	r3, [pc, #412]	; (8003258 <HAL_RCC_ClockConfig+0x1c0>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f023 0207 	bic.w	r2, r3, #7
 80030c2:	4965      	ldr	r1, [pc, #404]	; (8003258 <HAL_RCC_ClockConfig+0x1c0>)
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	4313      	orrs	r3, r2
 80030c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ca:	4b63      	ldr	r3, [pc, #396]	; (8003258 <HAL_RCC_ClockConfig+0x1c0>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0307 	and.w	r3, r3, #7
 80030d2:	683a      	ldr	r2, [r7, #0]
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d001      	beq.n	80030dc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e0b8      	b.n	800324e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 0302 	and.w	r3, r3, #2
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d020      	beq.n	800312a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 0304 	and.w	r3, r3, #4
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d005      	beq.n	8003100 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030f4:	4b59      	ldr	r3, [pc, #356]	; (800325c <HAL_RCC_ClockConfig+0x1c4>)
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	4a58      	ldr	r2, [pc, #352]	; (800325c <HAL_RCC_ClockConfig+0x1c4>)
 80030fa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80030fe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0308 	and.w	r3, r3, #8
 8003108:	2b00      	cmp	r3, #0
 800310a:	d005      	beq.n	8003118 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800310c:	4b53      	ldr	r3, [pc, #332]	; (800325c <HAL_RCC_ClockConfig+0x1c4>)
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	4a52      	ldr	r2, [pc, #328]	; (800325c <HAL_RCC_ClockConfig+0x1c4>)
 8003112:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003116:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003118:	4b50      	ldr	r3, [pc, #320]	; (800325c <HAL_RCC_ClockConfig+0x1c4>)
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	494d      	ldr	r1, [pc, #308]	; (800325c <HAL_RCC_ClockConfig+0x1c4>)
 8003126:	4313      	orrs	r3, r2
 8003128:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0301 	and.w	r3, r3, #1
 8003132:	2b00      	cmp	r3, #0
 8003134:	d040      	beq.n	80031b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	2b01      	cmp	r3, #1
 800313c:	d107      	bne.n	800314e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800313e:	4b47      	ldr	r3, [pc, #284]	; (800325c <HAL_RCC_ClockConfig+0x1c4>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d115      	bne.n	8003176 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e07f      	b.n	800324e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	2b02      	cmp	r3, #2
 8003154:	d107      	bne.n	8003166 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003156:	4b41      	ldr	r3, [pc, #260]	; (800325c <HAL_RCC_ClockConfig+0x1c4>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d109      	bne.n	8003176 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e073      	b.n	800324e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003166:	4b3d      	ldr	r3, [pc, #244]	; (800325c <HAL_RCC_ClockConfig+0x1c4>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 0302 	and.w	r3, r3, #2
 800316e:	2b00      	cmp	r3, #0
 8003170:	d101      	bne.n	8003176 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e06b      	b.n	800324e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003176:	4b39      	ldr	r3, [pc, #228]	; (800325c <HAL_RCC_ClockConfig+0x1c4>)
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	f023 0203 	bic.w	r2, r3, #3
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	4936      	ldr	r1, [pc, #216]	; (800325c <HAL_RCC_ClockConfig+0x1c4>)
 8003184:	4313      	orrs	r3, r2
 8003186:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003188:	f7fe fc1e 	bl	80019c8 <HAL_GetTick>
 800318c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800318e:	e00a      	b.n	80031a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003190:	f7fe fc1a 	bl	80019c8 <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	f241 3288 	movw	r2, #5000	; 0x1388
 800319e:	4293      	cmp	r3, r2
 80031a0:	d901      	bls.n	80031a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031a2:	2303      	movs	r3, #3
 80031a4:	e053      	b.n	800324e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031a6:	4b2d      	ldr	r3, [pc, #180]	; (800325c <HAL_RCC_ClockConfig+0x1c4>)
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	f003 020c 	and.w	r2, r3, #12
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d1eb      	bne.n	8003190 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031b8:	4b27      	ldr	r3, [pc, #156]	; (8003258 <HAL_RCC_ClockConfig+0x1c0>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0307 	and.w	r3, r3, #7
 80031c0:	683a      	ldr	r2, [r7, #0]
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d210      	bcs.n	80031e8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031c6:	4b24      	ldr	r3, [pc, #144]	; (8003258 <HAL_RCC_ClockConfig+0x1c0>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f023 0207 	bic.w	r2, r3, #7
 80031ce:	4922      	ldr	r1, [pc, #136]	; (8003258 <HAL_RCC_ClockConfig+0x1c0>)
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	4313      	orrs	r3, r2
 80031d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031d6:	4b20      	ldr	r3, [pc, #128]	; (8003258 <HAL_RCC_ClockConfig+0x1c0>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0307 	and.w	r3, r3, #7
 80031de:	683a      	ldr	r2, [r7, #0]
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d001      	beq.n	80031e8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e032      	b.n	800324e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0304 	and.w	r3, r3, #4
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d008      	beq.n	8003206 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031f4:	4b19      	ldr	r3, [pc, #100]	; (800325c <HAL_RCC_ClockConfig+0x1c4>)
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	4916      	ldr	r1, [pc, #88]	; (800325c <HAL_RCC_ClockConfig+0x1c4>)
 8003202:	4313      	orrs	r3, r2
 8003204:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0308 	and.w	r3, r3, #8
 800320e:	2b00      	cmp	r3, #0
 8003210:	d009      	beq.n	8003226 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003212:	4b12      	ldr	r3, [pc, #72]	; (800325c <HAL_RCC_ClockConfig+0x1c4>)
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	691b      	ldr	r3, [r3, #16]
 800321e:	00db      	lsls	r3, r3, #3
 8003220:	490e      	ldr	r1, [pc, #56]	; (800325c <HAL_RCC_ClockConfig+0x1c4>)
 8003222:	4313      	orrs	r3, r2
 8003224:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003226:	f000 f821 	bl	800326c <HAL_RCC_GetSysClockFreq>
 800322a:	4601      	mov	r1, r0
 800322c:	4b0b      	ldr	r3, [pc, #44]	; (800325c <HAL_RCC_ClockConfig+0x1c4>)
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	091b      	lsrs	r3, r3, #4
 8003232:	f003 030f 	and.w	r3, r3, #15
 8003236:	4a0a      	ldr	r2, [pc, #40]	; (8003260 <HAL_RCC_ClockConfig+0x1c8>)
 8003238:	5cd3      	ldrb	r3, [r2, r3]
 800323a:	fa21 f303 	lsr.w	r3, r1, r3
 800323e:	4a09      	ldr	r2, [pc, #36]	; (8003264 <HAL_RCC_ClockConfig+0x1cc>)
 8003240:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003242:	4b09      	ldr	r3, [pc, #36]	; (8003268 <HAL_RCC_ClockConfig+0x1d0>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4618      	mov	r0, r3
 8003248:	f7fe fb7c 	bl	8001944 <HAL_InitTick>

  return HAL_OK;
 800324c:	2300      	movs	r3, #0
}
 800324e:	4618      	mov	r0, r3
 8003250:	3710      	adds	r7, #16
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	40022000 	.word	0x40022000
 800325c:	40021000 	.word	0x40021000
 8003260:	08005f20 	.word	0x08005f20
 8003264:	20000000 	.word	0x20000000
 8003268:	20000004 	.word	0x20000004

0800326c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800326c:	b490      	push	{r4, r7}
 800326e:	b08a      	sub	sp, #40	; 0x28
 8003270:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003272:	4b2a      	ldr	r3, [pc, #168]	; (800331c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003274:	1d3c      	adds	r4, r7, #4
 8003276:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003278:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800327c:	4b28      	ldr	r3, [pc, #160]	; (8003320 <HAL_RCC_GetSysClockFreq+0xb4>)
 800327e:	881b      	ldrh	r3, [r3, #0]
 8003280:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003282:	2300      	movs	r3, #0
 8003284:	61fb      	str	r3, [r7, #28]
 8003286:	2300      	movs	r3, #0
 8003288:	61bb      	str	r3, [r7, #24]
 800328a:	2300      	movs	r3, #0
 800328c:	627b      	str	r3, [r7, #36]	; 0x24
 800328e:	2300      	movs	r3, #0
 8003290:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003292:	2300      	movs	r3, #0
 8003294:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003296:	4b23      	ldr	r3, [pc, #140]	; (8003324 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	f003 030c 	and.w	r3, r3, #12
 80032a2:	2b04      	cmp	r3, #4
 80032a4:	d002      	beq.n	80032ac <HAL_RCC_GetSysClockFreq+0x40>
 80032a6:	2b08      	cmp	r3, #8
 80032a8:	d003      	beq.n	80032b2 <HAL_RCC_GetSysClockFreq+0x46>
 80032aa:	e02d      	b.n	8003308 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80032ac:	4b1e      	ldr	r3, [pc, #120]	; (8003328 <HAL_RCC_GetSysClockFreq+0xbc>)
 80032ae:	623b      	str	r3, [r7, #32]
      break;
 80032b0:	e02d      	b.n	800330e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	0c9b      	lsrs	r3, r3, #18
 80032b6:	f003 030f 	and.w	r3, r3, #15
 80032ba:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80032be:	4413      	add	r3, r2
 80032c0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80032c4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d013      	beq.n	80032f8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80032d0:	4b14      	ldr	r3, [pc, #80]	; (8003324 <HAL_RCC_GetSysClockFreq+0xb8>)
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	0c5b      	lsrs	r3, r3, #17
 80032d6:	f003 0301 	and.w	r3, r3, #1
 80032da:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80032de:	4413      	add	r3, r2
 80032e0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80032e4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	4a0f      	ldr	r2, [pc, #60]	; (8003328 <HAL_RCC_GetSysClockFreq+0xbc>)
 80032ea:	fb02 f203 	mul.w	r2, r2, r3
 80032ee:	69bb      	ldr	r3, [r7, #24]
 80032f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80032f4:	627b      	str	r3, [r7, #36]	; 0x24
 80032f6:	e004      	b.n	8003302 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	4a0c      	ldr	r2, [pc, #48]	; (800332c <HAL_RCC_GetSysClockFreq+0xc0>)
 80032fc:	fb02 f303 	mul.w	r3, r2, r3
 8003300:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003304:	623b      	str	r3, [r7, #32]
      break;
 8003306:	e002      	b.n	800330e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003308:	4b07      	ldr	r3, [pc, #28]	; (8003328 <HAL_RCC_GetSysClockFreq+0xbc>)
 800330a:	623b      	str	r3, [r7, #32]
      break;
 800330c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800330e:	6a3b      	ldr	r3, [r7, #32]
}
 8003310:	4618      	mov	r0, r3
 8003312:	3728      	adds	r7, #40	; 0x28
 8003314:	46bd      	mov	sp, r7
 8003316:	bc90      	pop	{r4, r7}
 8003318:	4770      	bx	lr
 800331a:	bf00      	nop
 800331c:	08005f0c 	.word	0x08005f0c
 8003320:	08005f1c 	.word	0x08005f1c
 8003324:	40021000 	.word	0x40021000
 8003328:	007a1200 	.word	0x007a1200
 800332c:	003d0900 	.word	0x003d0900

08003330 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003330:	b480      	push	{r7}
 8003332:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003334:	4b02      	ldr	r3, [pc, #8]	; (8003340 <HAL_RCC_GetHCLKFreq+0x10>)
 8003336:	681b      	ldr	r3, [r3, #0]
}
 8003338:	4618      	mov	r0, r3
 800333a:	46bd      	mov	sp, r7
 800333c:	bc80      	pop	{r7}
 800333e:	4770      	bx	lr
 8003340:	20000000 	.word	0x20000000

08003344 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003348:	f7ff fff2 	bl	8003330 <HAL_RCC_GetHCLKFreq>
 800334c:	4601      	mov	r1, r0
 800334e:	4b05      	ldr	r3, [pc, #20]	; (8003364 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	0a1b      	lsrs	r3, r3, #8
 8003354:	f003 0307 	and.w	r3, r3, #7
 8003358:	4a03      	ldr	r2, [pc, #12]	; (8003368 <HAL_RCC_GetPCLK1Freq+0x24>)
 800335a:	5cd3      	ldrb	r3, [r2, r3]
 800335c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003360:	4618      	mov	r0, r3
 8003362:	bd80      	pop	{r7, pc}
 8003364:	40021000 	.word	0x40021000
 8003368:	08005f30 	.word	0x08005f30

0800336c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003370:	f7ff ffde 	bl	8003330 <HAL_RCC_GetHCLKFreq>
 8003374:	4601      	mov	r1, r0
 8003376:	4b05      	ldr	r3, [pc, #20]	; (800338c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	0adb      	lsrs	r3, r3, #11
 800337c:	f003 0307 	and.w	r3, r3, #7
 8003380:	4a03      	ldr	r2, [pc, #12]	; (8003390 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003382:	5cd3      	ldrb	r3, [r2, r3]
 8003384:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003388:	4618      	mov	r0, r3
 800338a:	bd80      	pop	{r7, pc}
 800338c:	40021000 	.word	0x40021000
 8003390:	08005f30 	.word	0x08005f30

08003394 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003394:	b480      	push	{r7}
 8003396:	b085      	sub	sp, #20
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800339c:	4b0a      	ldr	r3, [pc, #40]	; (80033c8 <RCC_Delay+0x34>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a0a      	ldr	r2, [pc, #40]	; (80033cc <RCC_Delay+0x38>)
 80033a2:	fba2 2303 	umull	r2, r3, r2, r3
 80033a6:	0a5b      	lsrs	r3, r3, #9
 80033a8:	687a      	ldr	r2, [r7, #4]
 80033aa:	fb02 f303 	mul.w	r3, r2, r3
 80033ae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80033b0:	bf00      	nop
  }
  while (Delay --);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	1e5a      	subs	r2, r3, #1
 80033b6:	60fa      	str	r2, [r7, #12]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d1f9      	bne.n	80033b0 <RCC_Delay+0x1c>
}
 80033bc:	bf00      	nop
 80033be:	3714      	adds	r7, #20
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bc80      	pop	{r7}
 80033c4:	4770      	bx	lr
 80033c6:	bf00      	nop
 80033c8:	20000000 	.word	0x20000000
 80033cc:	10624dd3 	.word	0x10624dd3

080033d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b086      	sub	sp, #24
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80033d8:	2300      	movs	r3, #0
 80033da:	613b      	str	r3, [r7, #16]
 80033dc:	2300      	movs	r3, #0
 80033de:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 0301 	and.w	r3, r3, #1
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d07d      	beq.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80033ec:	2300      	movs	r3, #0
 80033ee:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033f0:	4b4f      	ldr	r3, [pc, #316]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033f2:	69db      	ldr	r3, [r3, #28]
 80033f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d10d      	bne.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033fc:	4b4c      	ldr	r3, [pc, #304]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033fe:	69db      	ldr	r3, [r3, #28]
 8003400:	4a4b      	ldr	r2, [pc, #300]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003402:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003406:	61d3      	str	r3, [r2, #28]
 8003408:	4b49      	ldr	r3, [pc, #292]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800340a:	69db      	ldr	r3, [r3, #28]
 800340c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003410:	60bb      	str	r3, [r7, #8]
 8003412:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003414:	2301      	movs	r3, #1
 8003416:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003418:	4b46      	ldr	r3, [pc, #280]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003420:	2b00      	cmp	r3, #0
 8003422:	d118      	bne.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003424:	4b43      	ldr	r3, [pc, #268]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a42      	ldr	r2, [pc, #264]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800342a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800342e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003430:	f7fe faca 	bl	80019c8 <HAL_GetTick>
 8003434:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003436:	e008      	b.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003438:	f7fe fac6 	bl	80019c8 <HAL_GetTick>
 800343c:	4602      	mov	r2, r0
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	2b64      	cmp	r3, #100	; 0x64
 8003444:	d901      	bls.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003446:	2303      	movs	r3, #3
 8003448:	e06d      	b.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800344a:	4b3a      	ldr	r3, [pc, #232]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003452:	2b00      	cmp	r3, #0
 8003454:	d0f0      	beq.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003456:	4b36      	ldr	r3, [pc, #216]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003458:	6a1b      	ldr	r3, [r3, #32]
 800345a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800345e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d02e      	beq.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800346e:	68fa      	ldr	r2, [r7, #12]
 8003470:	429a      	cmp	r2, r3
 8003472:	d027      	beq.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003474:	4b2e      	ldr	r3, [pc, #184]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003476:	6a1b      	ldr	r3, [r3, #32]
 8003478:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800347c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800347e:	4b2e      	ldr	r3, [pc, #184]	; (8003538 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003480:	2201      	movs	r2, #1
 8003482:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003484:	4b2c      	ldr	r3, [pc, #176]	; (8003538 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003486:	2200      	movs	r2, #0
 8003488:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800348a:	4a29      	ldr	r2, [pc, #164]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	f003 0301 	and.w	r3, r3, #1
 8003496:	2b00      	cmp	r3, #0
 8003498:	d014      	beq.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800349a:	f7fe fa95 	bl	80019c8 <HAL_GetTick>
 800349e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034a0:	e00a      	b.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034a2:	f7fe fa91 	bl	80019c8 <HAL_GetTick>
 80034a6:	4602      	mov	r2, r0
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d901      	bls.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80034b4:	2303      	movs	r3, #3
 80034b6:	e036      	b.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034b8:	4b1d      	ldr	r3, [pc, #116]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034ba:	6a1b      	ldr	r3, [r3, #32]
 80034bc:	f003 0302 	and.w	r3, r3, #2
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d0ee      	beq.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034c4:	4b1a      	ldr	r3, [pc, #104]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034c6:	6a1b      	ldr	r3, [r3, #32]
 80034c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	4917      	ldr	r1, [pc, #92]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034d2:	4313      	orrs	r3, r2
 80034d4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80034d6:	7dfb      	ldrb	r3, [r7, #23]
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d105      	bne.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034dc:	4b14      	ldr	r3, [pc, #80]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034de:	69db      	ldr	r3, [r3, #28]
 80034e0:	4a13      	ldr	r2, [pc, #76]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034e6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 0302 	and.w	r3, r3, #2
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d008      	beq.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80034f4:	4b0e      	ldr	r3, [pc, #56]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	490b      	ldr	r1, [pc, #44]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003502:	4313      	orrs	r3, r2
 8003504:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 0310 	and.w	r3, r3, #16
 800350e:	2b00      	cmp	r3, #0
 8003510:	d008      	beq.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003512:	4b07      	ldr	r3, [pc, #28]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	4904      	ldr	r1, [pc, #16]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003520:	4313      	orrs	r3, r2
 8003522:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003524:	2300      	movs	r3, #0
}
 8003526:	4618      	mov	r0, r3
 8003528:	3718      	adds	r7, #24
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	40021000 	.word	0x40021000
 8003534:	40007000 	.word	0x40007000
 8003538:	42420440 	.word	0x42420440

0800353c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b082      	sub	sp, #8
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d101      	bne.n	800354e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e041      	b.n	80035d2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003554:	b2db      	uxtb	r3, r3
 8003556:	2b00      	cmp	r3, #0
 8003558:	d106      	bne.n	8003568 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2200      	movs	r2, #0
 800355e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f7fe f8d0 	bl	8001708 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2202      	movs	r2, #2
 800356c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	3304      	adds	r3, #4
 8003578:	4619      	mov	r1, r3
 800357a:	4610      	mov	r0, r2
 800357c:	f000 f930 	bl	80037e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2201      	movs	r2, #1
 8003594:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2201      	movs	r2, #1
 800359c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2201      	movs	r2, #1
 80035a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2201      	movs	r2, #1
 80035ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2201      	movs	r2, #1
 80035b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2201      	movs	r2, #1
 80035bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2201      	movs	r2, #1
 80035c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2201      	movs	r2, #1
 80035cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035d0:	2300      	movs	r3, #0
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3708      	adds	r7, #8
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
	...

080035dc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80035dc:	b480      	push	{r7}
 80035de:	b085      	sub	sp, #20
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d001      	beq.n	80035f4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e032      	b.n	800365a <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2202      	movs	r2, #2
 80035f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a18      	ldr	r2, [pc, #96]	; (8003664 <HAL_TIM_Base_Start+0x88>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d00e      	beq.n	8003624 <HAL_TIM_Base_Start+0x48>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800360e:	d009      	beq.n	8003624 <HAL_TIM_Base_Start+0x48>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a14      	ldr	r2, [pc, #80]	; (8003668 <HAL_TIM_Base_Start+0x8c>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d004      	beq.n	8003624 <HAL_TIM_Base_Start+0x48>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a13      	ldr	r2, [pc, #76]	; (800366c <HAL_TIM_Base_Start+0x90>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d111      	bne.n	8003648 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	f003 0307 	and.w	r3, r3, #7
 800362e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2b06      	cmp	r3, #6
 8003634:	d010      	beq.n	8003658 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f042 0201 	orr.w	r2, r2, #1
 8003644:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003646:	e007      	b.n	8003658 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f042 0201 	orr.w	r2, r2, #1
 8003656:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003658:	2300      	movs	r3, #0
}
 800365a:	4618      	mov	r0, r3
 800365c:	3714      	adds	r7, #20
 800365e:	46bd      	mov	sp, r7
 8003660:	bc80      	pop	{r7}
 8003662:	4770      	bx	lr
 8003664:	40012c00 	.word	0x40012c00
 8003668:	40000400 	.word	0x40000400
 800366c:	40000800 	.word	0x40000800

08003670 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b084      	sub	sp, #16
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003680:	2b01      	cmp	r3, #1
 8003682:	d101      	bne.n	8003688 <HAL_TIM_ConfigClockSource+0x18>
 8003684:	2302      	movs	r3, #2
 8003686:	e0a6      	b.n	80037d6 <HAL_TIM_ConfigClockSource+0x166>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2201      	movs	r2, #1
 800368c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2202      	movs	r2, #2
 8003694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80036a6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80036ae:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	68fa      	ldr	r2, [r7, #12]
 80036b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	2b40      	cmp	r3, #64	; 0x40
 80036be:	d067      	beq.n	8003790 <HAL_TIM_ConfigClockSource+0x120>
 80036c0:	2b40      	cmp	r3, #64	; 0x40
 80036c2:	d80b      	bhi.n	80036dc <HAL_TIM_ConfigClockSource+0x6c>
 80036c4:	2b10      	cmp	r3, #16
 80036c6:	d073      	beq.n	80037b0 <HAL_TIM_ConfigClockSource+0x140>
 80036c8:	2b10      	cmp	r3, #16
 80036ca:	d802      	bhi.n	80036d2 <HAL_TIM_ConfigClockSource+0x62>
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d06f      	beq.n	80037b0 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80036d0:	e078      	b.n	80037c4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80036d2:	2b20      	cmp	r3, #32
 80036d4:	d06c      	beq.n	80037b0 <HAL_TIM_ConfigClockSource+0x140>
 80036d6:	2b30      	cmp	r3, #48	; 0x30
 80036d8:	d06a      	beq.n	80037b0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80036da:	e073      	b.n	80037c4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80036dc:	2b70      	cmp	r3, #112	; 0x70
 80036de:	d00d      	beq.n	80036fc <HAL_TIM_ConfigClockSource+0x8c>
 80036e0:	2b70      	cmp	r3, #112	; 0x70
 80036e2:	d804      	bhi.n	80036ee <HAL_TIM_ConfigClockSource+0x7e>
 80036e4:	2b50      	cmp	r3, #80	; 0x50
 80036e6:	d033      	beq.n	8003750 <HAL_TIM_ConfigClockSource+0xe0>
 80036e8:	2b60      	cmp	r3, #96	; 0x60
 80036ea:	d041      	beq.n	8003770 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80036ec:	e06a      	b.n	80037c4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80036ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036f2:	d066      	beq.n	80037c2 <HAL_TIM_ConfigClockSource+0x152>
 80036f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036f8:	d017      	beq.n	800372a <HAL_TIM_ConfigClockSource+0xba>
      break;
 80036fa:	e063      	b.n	80037c4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6818      	ldr	r0, [r3, #0]
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	6899      	ldr	r1, [r3, #8]
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	685a      	ldr	r2, [r3, #4]
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	f000 f941 	bl	8003992 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800371e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	68fa      	ldr	r2, [r7, #12]
 8003726:	609a      	str	r2, [r3, #8]
      break;
 8003728:	e04c      	b.n	80037c4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6818      	ldr	r0, [r3, #0]
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	6899      	ldr	r1, [r3, #8]
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	685a      	ldr	r2, [r3, #4]
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	68db      	ldr	r3, [r3, #12]
 800373a:	f000 f92a 	bl	8003992 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	689a      	ldr	r2, [r3, #8]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800374c:	609a      	str	r2, [r3, #8]
      break;
 800374e:	e039      	b.n	80037c4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6818      	ldr	r0, [r3, #0]
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	6859      	ldr	r1, [r3, #4]
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	461a      	mov	r2, r3
 800375e:	f000 f8a1 	bl	80038a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	2150      	movs	r1, #80	; 0x50
 8003768:	4618      	mov	r0, r3
 800376a:	f000 f8f8 	bl	800395e <TIM_ITRx_SetConfig>
      break;
 800376e:	e029      	b.n	80037c4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6818      	ldr	r0, [r3, #0]
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	6859      	ldr	r1, [r3, #4]
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	461a      	mov	r2, r3
 800377e:	f000 f8bf 	bl	8003900 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	2160      	movs	r1, #96	; 0x60
 8003788:	4618      	mov	r0, r3
 800378a:	f000 f8e8 	bl	800395e <TIM_ITRx_SetConfig>
      break;
 800378e:	e019      	b.n	80037c4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6818      	ldr	r0, [r3, #0]
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	6859      	ldr	r1, [r3, #4]
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	68db      	ldr	r3, [r3, #12]
 800379c:	461a      	mov	r2, r3
 800379e:	f000 f881 	bl	80038a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	2140      	movs	r1, #64	; 0x40
 80037a8:	4618      	mov	r0, r3
 80037aa:	f000 f8d8 	bl	800395e <TIM_ITRx_SetConfig>
      break;
 80037ae:	e009      	b.n	80037c4 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4619      	mov	r1, r3
 80037ba:	4610      	mov	r0, r2
 80037bc:	f000 f8cf 	bl	800395e <TIM_ITRx_SetConfig>
        break;
 80037c0:	e000      	b.n	80037c4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80037c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2201      	movs	r2, #1
 80037c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80037d4:	2300      	movs	r3, #0
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3710      	adds	r7, #16
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
	...

080037e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b085      	sub	sp, #20
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	4a29      	ldr	r2, [pc, #164]	; (8003898 <TIM_Base_SetConfig+0xb8>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d00b      	beq.n	8003810 <TIM_Base_SetConfig+0x30>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037fe:	d007      	beq.n	8003810 <TIM_Base_SetConfig+0x30>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	4a26      	ldr	r2, [pc, #152]	; (800389c <TIM_Base_SetConfig+0xbc>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d003      	beq.n	8003810 <TIM_Base_SetConfig+0x30>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	4a25      	ldr	r2, [pc, #148]	; (80038a0 <TIM_Base_SetConfig+0xc0>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d108      	bne.n	8003822 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003816:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	68fa      	ldr	r2, [r7, #12]
 800381e:	4313      	orrs	r3, r2
 8003820:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	4a1c      	ldr	r2, [pc, #112]	; (8003898 <TIM_Base_SetConfig+0xb8>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d00b      	beq.n	8003842 <TIM_Base_SetConfig+0x62>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003830:	d007      	beq.n	8003842 <TIM_Base_SetConfig+0x62>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4a19      	ldr	r2, [pc, #100]	; (800389c <TIM_Base_SetConfig+0xbc>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d003      	beq.n	8003842 <TIM_Base_SetConfig+0x62>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4a18      	ldr	r2, [pc, #96]	; (80038a0 <TIM_Base_SetConfig+0xc0>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d108      	bne.n	8003854 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003848:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	68fa      	ldr	r2, [r7, #12]
 8003850:	4313      	orrs	r3, r2
 8003852:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	695b      	ldr	r3, [r3, #20]
 800385e:	4313      	orrs	r3, r2
 8003860:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	68fa      	ldr	r2, [r7, #12]
 8003866:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	689a      	ldr	r2, [r3, #8]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	4a07      	ldr	r2, [pc, #28]	; (8003898 <TIM_Base_SetConfig+0xb8>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d103      	bne.n	8003888 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	691a      	ldr	r2, [r3, #16]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2201      	movs	r2, #1
 800388c:	615a      	str	r2, [r3, #20]
}
 800388e:	bf00      	nop
 8003890:	3714      	adds	r7, #20
 8003892:	46bd      	mov	sp, r7
 8003894:	bc80      	pop	{r7}
 8003896:	4770      	bx	lr
 8003898:	40012c00 	.word	0x40012c00
 800389c:	40000400 	.word	0x40000400
 80038a0:	40000800 	.word	0x40000800

080038a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b087      	sub	sp, #28
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	60f8      	str	r0, [r7, #12]
 80038ac:	60b9      	str	r1, [r7, #8]
 80038ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6a1b      	ldr	r3, [r3, #32]
 80038b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	6a1b      	ldr	r3, [r3, #32]
 80038ba:	f023 0201 	bic.w	r2, r3, #1
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	699b      	ldr	r3, [r3, #24]
 80038c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	011b      	lsls	r3, r3, #4
 80038d4:	693a      	ldr	r2, [r7, #16]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	f023 030a 	bic.w	r3, r3, #10
 80038e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80038e2:	697a      	ldr	r2, [r7, #20]
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	4313      	orrs	r3, r2
 80038e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	693a      	ldr	r2, [r7, #16]
 80038ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	697a      	ldr	r2, [r7, #20]
 80038f4:	621a      	str	r2, [r3, #32]
}
 80038f6:	bf00      	nop
 80038f8:	371c      	adds	r7, #28
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bc80      	pop	{r7}
 80038fe:	4770      	bx	lr

08003900 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003900:	b480      	push	{r7}
 8003902:	b087      	sub	sp, #28
 8003904:	af00      	add	r7, sp, #0
 8003906:	60f8      	str	r0, [r7, #12]
 8003908:	60b9      	str	r1, [r7, #8]
 800390a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	6a1b      	ldr	r3, [r3, #32]
 8003910:	f023 0210 	bic.w	r2, r3, #16
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	699b      	ldr	r3, [r3, #24]
 800391c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	6a1b      	ldr	r3, [r3, #32]
 8003922:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800392a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	031b      	lsls	r3, r3, #12
 8003930:	697a      	ldr	r2, [r7, #20]
 8003932:	4313      	orrs	r3, r2
 8003934:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800393c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	011b      	lsls	r3, r3, #4
 8003942:	693a      	ldr	r2, [r7, #16]
 8003944:	4313      	orrs	r3, r2
 8003946:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	697a      	ldr	r2, [r7, #20]
 800394c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	693a      	ldr	r2, [r7, #16]
 8003952:	621a      	str	r2, [r3, #32]
}
 8003954:	bf00      	nop
 8003956:	371c      	adds	r7, #28
 8003958:	46bd      	mov	sp, r7
 800395a:	bc80      	pop	{r7}
 800395c:	4770      	bx	lr

0800395e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800395e:	b480      	push	{r7}
 8003960:	b085      	sub	sp, #20
 8003962:	af00      	add	r7, sp, #0
 8003964:	6078      	str	r0, [r7, #4]
 8003966:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003974:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003976:	683a      	ldr	r2, [r7, #0]
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	4313      	orrs	r3, r2
 800397c:	f043 0307 	orr.w	r3, r3, #7
 8003980:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	68fa      	ldr	r2, [r7, #12]
 8003986:	609a      	str	r2, [r3, #8]
}
 8003988:	bf00      	nop
 800398a:	3714      	adds	r7, #20
 800398c:	46bd      	mov	sp, r7
 800398e:	bc80      	pop	{r7}
 8003990:	4770      	bx	lr

08003992 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003992:	b480      	push	{r7}
 8003994:	b087      	sub	sp, #28
 8003996:	af00      	add	r7, sp, #0
 8003998:	60f8      	str	r0, [r7, #12]
 800399a:	60b9      	str	r1, [r7, #8]
 800399c:	607a      	str	r2, [r7, #4]
 800399e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039ac:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	021a      	lsls	r2, r3, #8
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	431a      	orrs	r2, r3
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	4313      	orrs	r3, r2
 80039ba:	697a      	ldr	r2, [r7, #20]
 80039bc:	4313      	orrs	r3, r2
 80039be:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	697a      	ldr	r2, [r7, #20]
 80039c4:	609a      	str	r2, [r3, #8]
}
 80039c6:	bf00      	nop
 80039c8:	371c      	adds	r7, #28
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bc80      	pop	{r7}
 80039ce:	4770      	bx	lr

080039d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b085      	sub	sp, #20
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d101      	bne.n	80039e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80039e4:	2302      	movs	r3, #2
 80039e6:	e046      	b.n	8003a76 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2202      	movs	r2, #2
 80039f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a0e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	68fa      	ldr	r2, [r7, #12]
 8003a16:	4313      	orrs	r3, r2
 8003a18:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	68fa      	ldr	r2, [r7, #12]
 8003a20:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a16      	ldr	r2, [pc, #88]	; (8003a80 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d00e      	beq.n	8003a4a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a34:	d009      	beq.n	8003a4a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a12      	ldr	r2, [pc, #72]	; (8003a84 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d004      	beq.n	8003a4a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a10      	ldr	r2, [pc, #64]	; (8003a88 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d10c      	bne.n	8003a64 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a50:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	68ba      	ldr	r2, [r7, #8]
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	68ba      	ldr	r2, [r7, #8]
 8003a62:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2201      	movs	r2, #1
 8003a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a74:	2300      	movs	r3, #0
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3714      	adds	r7, #20
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bc80      	pop	{r7}
 8003a7e:	4770      	bx	lr
 8003a80:	40012c00 	.word	0x40012c00
 8003a84:	40000400 	.word	0x40000400
 8003a88:	40000800 	.word	0x40000800

08003a8c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b082      	sub	sp, #8
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d101      	bne.n	8003a9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e03f      	b.n	8003b1e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d106      	bne.n	8003ab8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2200      	movs	r2, #0
 8003aae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f7fd fe46 	bl	8001744 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2224      	movs	r2, #36	; 0x24
 8003abc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	68da      	ldr	r2, [r3, #12]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ace:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	f000 f905 	bl	8003ce0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	691a      	ldr	r2, [r3, #16]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ae4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	695a      	ldr	r2, [r3, #20]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003af4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	68da      	ldr	r2, [r3, #12]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b04:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2220      	movs	r2, #32
 8003b10:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2220      	movs	r2, #32
 8003b18:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003b1c:	2300      	movs	r3, #0
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3708      	adds	r7, #8
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}

08003b26 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b26:	b580      	push	{r7, lr}
 8003b28:	b08a      	sub	sp, #40	; 0x28
 8003b2a:	af02      	add	r7, sp, #8
 8003b2c:	60f8      	str	r0, [r7, #12]
 8003b2e:	60b9      	str	r1, [r7, #8]
 8003b30:	603b      	str	r3, [r7, #0]
 8003b32:	4613      	mov	r3, r2
 8003b34:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003b36:	2300      	movs	r3, #0
 8003b38:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	2b20      	cmp	r3, #32
 8003b44:	d17c      	bne.n	8003c40 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d002      	beq.n	8003b52 <HAL_UART_Transmit+0x2c>
 8003b4c:	88fb      	ldrh	r3, [r7, #6]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d101      	bne.n	8003b56 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e075      	b.n	8003c42 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d101      	bne.n	8003b64 <HAL_UART_Transmit+0x3e>
 8003b60:	2302      	movs	r3, #2
 8003b62:	e06e      	b.n	8003c42 <HAL_UART_Transmit+0x11c>
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2201      	movs	r2, #1
 8003b68:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2221      	movs	r2, #33	; 0x21
 8003b76:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003b7a:	f7fd ff25 	bl	80019c8 <HAL_GetTick>
 8003b7e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	88fa      	ldrh	r2, [r7, #6]
 8003b84:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	88fa      	ldrh	r2, [r7, #6]
 8003b8a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b94:	d108      	bne.n	8003ba8 <HAL_UART_Transmit+0x82>
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	691b      	ldr	r3, [r3, #16]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d104      	bne.n	8003ba8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	61bb      	str	r3, [r7, #24]
 8003ba6:	e003      	b.n	8003bb0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003bac:	2300      	movs	r3, #0
 8003bae:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003bb8:	e02a      	b.n	8003c10 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	9300      	str	r3, [sp, #0]
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	2180      	movs	r1, #128	; 0x80
 8003bc4:	68f8      	ldr	r0, [r7, #12]
 8003bc6:	f000 f840 	bl	8003c4a <UART_WaitOnFlagUntilTimeout>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d001      	beq.n	8003bd4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003bd0:	2303      	movs	r3, #3
 8003bd2:	e036      	b.n	8003c42 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003bd4:	69fb      	ldr	r3, [r7, #28]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d10b      	bne.n	8003bf2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003bda:	69bb      	ldr	r3, [r7, #24]
 8003bdc:	881b      	ldrh	r3, [r3, #0]
 8003bde:	461a      	mov	r2, r3
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003be8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003bea:	69bb      	ldr	r3, [r7, #24]
 8003bec:	3302      	adds	r3, #2
 8003bee:	61bb      	str	r3, [r7, #24]
 8003bf0:	e007      	b.n	8003c02 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003bf2:	69fb      	ldr	r3, [r7, #28]
 8003bf4:	781a      	ldrb	r2, [r3, #0]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	3301      	adds	r3, #1
 8003c00:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c06:	b29b      	uxth	r3, r3
 8003c08:	3b01      	subs	r3, #1
 8003c0a:	b29a      	uxth	r2, r3
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d1cf      	bne.n	8003bba <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	9300      	str	r3, [sp, #0]
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	2200      	movs	r2, #0
 8003c22:	2140      	movs	r1, #64	; 0x40
 8003c24:	68f8      	ldr	r0, [r7, #12]
 8003c26:	f000 f810 	bl	8003c4a <UART_WaitOnFlagUntilTimeout>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d001      	beq.n	8003c34 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003c30:	2303      	movs	r3, #3
 8003c32:	e006      	b.n	8003c42 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2220      	movs	r2, #32
 8003c38:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	e000      	b.n	8003c42 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003c40:	2302      	movs	r3, #2
  }
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3720      	adds	r7, #32
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}

08003c4a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003c4a:	b580      	push	{r7, lr}
 8003c4c:	b084      	sub	sp, #16
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	60f8      	str	r0, [r7, #12]
 8003c52:	60b9      	str	r1, [r7, #8]
 8003c54:	603b      	str	r3, [r7, #0]
 8003c56:	4613      	mov	r3, r2
 8003c58:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c5a:	e02c      	b.n	8003cb6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c5c:	69bb      	ldr	r3, [r7, #24]
 8003c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c62:	d028      	beq.n	8003cb6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003c64:	69bb      	ldr	r3, [r7, #24]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d007      	beq.n	8003c7a <UART_WaitOnFlagUntilTimeout+0x30>
 8003c6a:	f7fd fead 	bl	80019c8 <HAL_GetTick>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	1ad3      	subs	r3, r2, r3
 8003c74:	69ba      	ldr	r2, [r7, #24]
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d21d      	bcs.n	8003cb6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	68da      	ldr	r2, [r3, #12]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003c88:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	695a      	ldr	r2, [r3, #20]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f022 0201 	bic.w	r2, r2, #1
 8003c98:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2220      	movs	r2, #32
 8003c9e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2220      	movs	r2, #32
 8003ca6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2200      	movs	r2, #0
 8003cae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003cb2:	2303      	movs	r3, #3
 8003cb4:	e00f      	b.n	8003cd6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	68ba      	ldr	r2, [r7, #8]
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	bf0c      	ite	eq
 8003cc6:	2301      	moveq	r3, #1
 8003cc8:	2300      	movne	r3, #0
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	461a      	mov	r2, r3
 8003cce:	79fb      	ldrb	r3, [r7, #7]
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d0c3      	beq.n	8003c5c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003cd4:	2300      	movs	r3, #0
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3710      	adds	r7, #16
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
	...

08003ce0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b084      	sub	sp, #16
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	691b      	ldr	r3, [r3, #16]
 8003cee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	68da      	ldr	r2, [r3, #12]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	430a      	orrs	r2, r1
 8003cfc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	689a      	ldr	r2, [r3, #8]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	691b      	ldr	r3, [r3, #16]
 8003d06:	431a      	orrs	r2, r3
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	695b      	ldr	r3, [r3, #20]
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	68db      	ldr	r3, [r3, #12]
 8003d16:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003d1a:	f023 030c 	bic.w	r3, r3, #12
 8003d1e:	687a      	ldr	r2, [r7, #4]
 8003d20:	6812      	ldr	r2, [r2, #0]
 8003d22:	68b9      	ldr	r1, [r7, #8]
 8003d24:	430b      	orrs	r3, r1
 8003d26:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	695b      	ldr	r3, [r3, #20]
 8003d2e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	699a      	ldr	r2, [r3, #24]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	430a      	orrs	r2, r1
 8003d3c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a2c      	ldr	r2, [pc, #176]	; (8003df4 <UART_SetConfig+0x114>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d103      	bne.n	8003d50 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003d48:	f7ff fb10 	bl	800336c <HAL_RCC_GetPCLK2Freq>
 8003d4c:	60f8      	str	r0, [r7, #12]
 8003d4e:	e002      	b.n	8003d56 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003d50:	f7ff faf8 	bl	8003344 <HAL_RCC_GetPCLK1Freq>
 8003d54:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d56:	68fa      	ldr	r2, [r7, #12]
 8003d58:	4613      	mov	r3, r2
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	4413      	add	r3, r2
 8003d5e:	009a      	lsls	r2, r3, #2
 8003d60:	441a      	add	r2, r3
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	009b      	lsls	r3, r3, #2
 8003d68:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d6c:	4a22      	ldr	r2, [pc, #136]	; (8003df8 <UART_SetConfig+0x118>)
 8003d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d72:	095b      	lsrs	r3, r3, #5
 8003d74:	0119      	lsls	r1, r3, #4
 8003d76:	68fa      	ldr	r2, [r7, #12]
 8003d78:	4613      	mov	r3, r2
 8003d7a:	009b      	lsls	r3, r3, #2
 8003d7c:	4413      	add	r3, r2
 8003d7e:	009a      	lsls	r2, r3, #2
 8003d80:	441a      	add	r2, r3
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d8c:	4b1a      	ldr	r3, [pc, #104]	; (8003df8 <UART_SetConfig+0x118>)
 8003d8e:	fba3 0302 	umull	r0, r3, r3, r2
 8003d92:	095b      	lsrs	r3, r3, #5
 8003d94:	2064      	movs	r0, #100	; 0x64
 8003d96:	fb00 f303 	mul.w	r3, r0, r3
 8003d9a:	1ad3      	subs	r3, r2, r3
 8003d9c:	011b      	lsls	r3, r3, #4
 8003d9e:	3332      	adds	r3, #50	; 0x32
 8003da0:	4a15      	ldr	r2, [pc, #84]	; (8003df8 <UART_SetConfig+0x118>)
 8003da2:	fba2 2303 	umull	r2, r3, r2, r3
 8003da6:	095b      	lsrs	r3, r3, #5
 8003da8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003dac:	4419      	add	r1, r3
 8003dae:	68fa      	ldr	r2, [r7, #12]
 8003db0:	4613      	mov	r3, r2
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	4413      	add	r3, r2
 8003db6:	009a      	lsls	r2, r3, #2
 8003db8:	441a      	add	r2, r3
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	009b      	lsls	r3, r3, #2
 8003dc0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003dc4:	4b0c      	ldr	r3, [pc, #48]	; (8003df8 <UART_SetConfig+0x118>)
 8003dc6:	fba3 0302 	umull	r0, r3, r3, r2
 8003dca:	095b      	lsrs	r3, r3, #5
 8003dcc:	2064      	movs	r0, #100	; 0x64
 8003dce:	fb00 f303 	mul.w	r3, r0, r3
 8003dd2:	1ad3      	subs	r3, r2, r3
 8003dd4:	011b      	lsls	r3, r3, #4
 8003dd6:	3332      	adds	r3, #50	; 0x32
 8003dd8:	4a07      	ldr	r2, [pc, #28]	; (8003df8 <UART_SetConfig+0x118>)
 8003dda:	fba2 2303 	umull	r2, r3, r2, r3
 8003dde:	095b      	lsrs	r3, r3, #5
 8003de0:	f003 020f 	and.w	r2, r3, #15
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	440a      	add	r2, r1
 8003dea:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003dec:	bf00      	nop
 8003dee:	3710      	adds	r7, #16
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}
 8003df4:	40013800 	.word	0x40013800
 8003df8:	51eb851f 	.word	0x51eb851f

08003dfc <__errno>:
 8003dfc:	4b01      	ldr	r3, [pc, #4]	; (8003e04 <__errno+0x8>)
 8003dfe:	6818      	ldr	r0, [r3, #0]
 8003e00:	4770      	bx	lr
 8003e02:	bf00      	nop
 8003e04:	2000000c 	.word	0x2000000c

08003e08 <__libc_init_array>:
 8003e08:	b570      	push	{r4, r5, r6, lr}
 8003e0a:	2500      	movs	r5, #0
 8003e0c:	4e0c      	ldr	r6, [pc, #48]	; (8003e40 <__libc_init_array+0x38>)
 8003e0e:	4c0d      	ldr	r4, [pc, #52]	; (8003e44 <__libc_init_array+0x3c>)
 8003e10:	1ba4      	subs	r4, r4, r6
 8003e12:	10a4      	asrs	r4, r4, #2
 8003e14:	42a5      	cmp	r5, r4
 8003e16:	d109      	bne.n	8003e2c <__libc_init_array+0x24>
 8003e18:	f002 f860 	bl	8005edc <_init>
 8003e1c:	2500      	movs	r5, #0
 8003e1e:	4e0a      	ldr	r6, [pc, #40]	; (8003e48 <__libc_init_array+0x40>)
 8003e20:	4c0a      	ldr	r4, [pc, #40]	; (8003e4c <__libc_init_array+0x44>)
 8003e22:	1ba4      	subs	r4, r4, r6
 8003e24:	10a4      	asrs	r4, r4, #2
 8003e26:	42a5      	cmp	r5, r4
 8003e28:	d105      	bne.n	8003e36 <__libc_init_array+0x2e>
 8003e2a:	bd70      	pop	{r4, r5, r6, pc}
 8003e2c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003e30:	4798      	blx	r3
 8003e32:	3501      	adds	r5, #1
 8003e34:	e7ee      	b.n	8003e14 <__libc_init_array+0xc>
 8003e36:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003e3a:	4798      	blx	r3
 8003e3c:	3501      	adds	r5, #1
 8003e3e:	e7f2      	b.n	8003e26 <__libc_init_array+0x1e>
 8003e40:	08006198 	.word	0x08006198
 8003e44:	08006198 	.word	0x08006198
 8003e48:	08006198 	.word	0x08006198
 8003e4c:	0800619c 	.word	0x0800619c

08003e50 <memset>:
 8003e50:	4603      	mov	r3, r0
 8003e52:	4402      	add	r2, r0
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d100      	bne.n	8003e5a <memset+0xa>
 8003e58:	4770      	bx	lr
 8003e5a:	f803 1b01 	strb.w	r1, [r3], #1
 8003e5e:	e7f9      	b.n	8003e54 <memset+0x4>

08003e60 <__cvt>:
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e66:	461e      	mov	r6, r3
 8003e68:	bfbb      	ittet	lt
 8003e6a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8003e6e:	461e      	movlt	r6, r3
 8003e70:	2300      	movge	r3, #0
 8003e72:	232d      	movlt	r3, #45	; 0x2d
 8003e74:	b088      	sub	sp, #32
 8003e76:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8003e78:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8003e7c:	f027 0720 	bic.w	r7, r7, #32
 8003e80:	2f46      	cmp	r7, #70	; 0x46
 8003e82:	4614      	mov	r4, r2
 8003e84:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003e86:	700b      	strb	r3, [r1, #0]
 8003e88:	d004      	beq.n	8003e94 <__cvt+0x34>
 8003e8a:	2f45      	cmp	r7, #69	; 0x45
 8003e8c:	d100      	bne.n	8003e90 <__cvt+0x30>
 8003e8e:	3501      	adds	r5, #1
 8003e90:	2302      	movs	r3, #2
 8003e92:	e000      	b.n	8003e96 <__cvt+0x36>
 8003e94:	2303      	movs	r3, #3
 8003e96:	aa07      	add	r2, sp, #28
 8003e98:	9204      	str	r2, [sp, #16]
 8003e9a:	aa06      	add	r2, sp, #24
 8003e9c:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003ea0:	e9cd 3500 	strd	r3, r5, [sp]
 8003ea4:	4622      	mov	r2, r4
 8003ea6:	4633      	mov	r3, r6
 8003ea8:	f000 fcda 	bl	8004860 <_dtoa_r>
 8003eac:	2f47      	cmp	r7, #71	; 0x47
 8003eae:	4680      	mov	r8, r0
 8003eb0:	d102      	bne.n	8003eb8 <__cvt+0x58>
 8003eb2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003eb4:	07db      	lsls	r3, r3, #31
 8003eb6:	d526      	bpl.n	8003f06 <__cvt+0xa6>
 8003eb8:	2f46      	cmp	r7, #70	; 0x46
 8003eba:	eb08 0905 	add.w	r9, r8, r5
 8003ebe:	d111      	bne.n	8003ee4 <__cvt+0x84>
 8003ec0:	f898 3000 	ldrb.w	r3, [r8]
 8003ec4:	2b30      	cmp	r3, #48	; 0x30
 8003ec6:	d10a      	bne.n	8003ede <__cvt+0x7e>
 8003ec8:	2200      	movs	r2, #0
 8003eca:	2300      	movs	r3, #0
 8003ecc:	4620      	mov	r0, r4
 8003ece:	4631      	mov	r1, r6
 8003ed0:	f7fc fd6a 	bl	80009a8 <__aeabi_dcmpeq>
 8003ed4:	b918      	cbnz	r0, 8003ede <__cvt+0x7e>
 8003ed6:	f1c5 0501 	rsb	r5, r5, #1
 8003eda:	f8ca 5000 	str.w	r5, [sl]
 8003ede:	f8da 3000 	ldr.w	r3, [sl]
 8003ee2:	4499      	add	r9, r3
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	4620      	mov	r0, r4
 8003eea:	4631      	mov	r1, r6
 8003eec:	f7fc fd5c 	bl	80009a8 <__aeabi_dcmpeq>
 8003ef0:	b938      	cbnz	r0, 8003f02 <__cvt+0xa2>
 8003ef2:	2230      	movs	r2, #48	; 0x30
 8003ef4:	9b07      	ldr	r3, [sp, #28]
 8003ef6:	454b      	cmp	r3, r9
 8003ef8:	d205      	bcs.n	8003f06 <__cvt+0xa6>
 8003efa:	1c59      	adds	r1, r3, #1
 8003efc:	9107      	str	r1, [sp, #28]
 8003efe:	701a      	strb	r2, [r3, #0]
 8003f00:	e7f8      	b.n	8003ef4 <__cvt+0x94>
 8003f02:	f8cd 901c 	str.w	r9, [sp, #28]
 8003f06:	4640      	mov	r0, r8
 8003f08:	9b07      	ldr	r3, [sp, #28]
 8003f0a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003f0c:	eba3 0308 	sub.w	r3, r3, r8
 8003f10:	6013      	str	r3, [r2, #0]
 8003f12:	b008      	add	sp, #32
 8003f14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003f18 <__exponent>:
 8003f18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003f1a:	2900      	cmp	r1, #0
 8003f1c:	bfb4      	ite	lt
 8003f1e:	232d      	movlt	r3, #45	; 0x2d
 8003f20:	232b      	movge	r3, #43	; 0x2b
 8003f22:	4604      	mov	r4, r0
 8003f24:	bfb8      	it	lt
 8003f26:	4249      	neglt	r1, r1
 8003f28:	2909      	cmp	r1, #9
 8003f2a:	f804 2b02 	strb.w	r2, [r4], #2
 8003f2e:	7043      	strb	r3, [r0, #1]
 8003f30:	dd21      	ble.n	8003f76 <__exponent+0x5e>
 8003f32:	f10d 0307 	add.w	r3, sp, #7
 8003f36:	461f      	mov	r7, r3
 8003f38:	260a      	movs	r6, #10
 8003f3a:	fb91 f5f6 	sdiv	r5, r1, r6
 8003f3e:	fb06 1115 	mls	r1, r6, r5, r1
 8003f42:	2d09      	cmp	r5, #9
 8003f44:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8003f48:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003f4c:	f103 32ff 	add.w	r2, r3, #4294967295
 8003f50:	4629      	mov	r1, r5
 8003f52:	dc09      	bgt.n	8003f68 <__exponent+0x50>
 8003f54:	3130      	adds	r1, #48	; 0x30
 8003f56:	3b02      	subs	r3, #2
 8003f58:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003f5c:	42bb      	cmp	r3, r7
 8003f5e:	4622      	mov	r2, r4
 8003f60:	d304      	bcc.n	8003f6c <__exponent+0x54>
 8003f62:	1a10      	subs	r0, r2, r0
 8003f64:	b003      	add	sp, #12
 8003f66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f68:	4613      	mov	r3, r2
 8003f6a:	e7e6      	b.n	8003f3a <__exponent+0x22>
 8003f6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003f70:	f804 2b01 	strb.w	r2, [r4], #1
 8003f74:	e7f2      	b.n	8003f5c <__exponent+0x44>
 8003f76:	2330      	movs	r3, #48	; 0x30
 8003f78:	4419      	add	r1, r3
 8003f7a:	7083      	strb	r3, [r0, #2]
 8003f7c:	1d02      	adds	r2, r0, #4
 8003f7e:	70c1      	strb	r1, [r0, #3]
 8003f80:	e7ef      	b.n	8003f62 <__exponent+0x4a>
	...

08003f84 <_printf_float>:
 8003f84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f88:	b091      	sub	sp, #68	; 0x44
 8003f8a:	460c      	mov	r4, r1
 8003f8c:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8003f8e:	4693      	mov	fp, r2
 8003f90:	461e      	mov	r6, r3
 8003f92:	4605      	mov	r5, r0
 8003f94:	f001 fa18 	bl	80053c8 <_localeconv_r>
 8003f98:	6803      	ldr	r3, [r0, #0]
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	9309      	str	r3, [sp, #36]	; 0x24
 8003f9e:	f7fc f8d7 	bl	8000150 <strlen>
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	930e      	str	r3, [sp, #56]	; 0x38
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	900a      	str	r0, [sp, #40]	; 0x28
 8003faa:	3307      	adds	r3, #7
 8003fac:	f023 0307 	bic.w	r3, r3, #7
 8003fb0:	f103 0208 	add.w	r2, r3, #8
 8003fb4:	f894 8018 	ldrb.w	r8, [r4, #24]
 8003fb8:	f8d4 a000 	ldr.w	sl, [r4]
 8003fbc:	603a      	str	r2, [r7, #0]
 8003fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fc2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003fc6:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8003fca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003fce:	930b      	str	r3, [sp, #44]	; 0x2c
 8003fd0:	f04f 32ff 	mov.w	r2, #4294967295
 8003fd4:	4ba6      	ldr	r3, [pc, #664]	; (8004270 <_printf_float+0x2ec>)
 8003fd6:	4638      	mov	r0, r7
 8003fd8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003fda:	f7fc fd17 	bl	8000a0c <__aeabi_dcmpun>
 8003fde:	bb68      	cbnz	r0, 800403c <_printf_float+0xb8>
 8003fe0:	f04f 32ff 	mov.w	r2, #4294967295
 8003fe4:	4ba2      	ldr	r3, [pc, #648]	; (8004270 <_printf_float+0x2ec>)
 8003fe6:	4638      	mov	r0, r7
 8003fe8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003fea:	f7fc fcf1 	bl	80009d0 <__aeabi_dcmple>
 8003fee:	bb28      	cbnz	r0, 800403c <_printf_float+0xb8>
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	4638      	mov	r0, r7
 8003ff6:	4649      	mov	r1, r9
 8003ff8:	f7fc fce0 	bl	80009bc <__aeabi_dcmplt>
 8003ffc:	b110      	cbz	r0, 8004004 <_printf_float+0x80>
 8003ffe:	232d      	movs	r3, #45	; 0x2d
 8004000:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004004:	4f9b      	ldr	r7, [pc, #620]	; (8004274 <_printf_float+0x2f0>)
 8004006:	4b9c      	ldr	r3, [pc, #624]	; (8004278 <_printf_float+0x2f4>)
 8004008:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800400c:	bf98      	it	ls
 800400e:	461f      	movls	r7, r3
 8004010:	2303      	movs	r3, #3
 8004012:	f04f 0900 	mov.w	r9, #0
 8004016:	6123      	str	r3, [r4, #16]
 8004018:	f02a 0304 	bic.w	r3, sl, #4
 800401c:	6023      	str	r3, [r4, #0]
 800401e:	9600      	str	r6, [sp, #0]
 8004020:	465b      	mov	r3, fp
 8004022:	aa0f      	add	r2, sp, #60	; 0x3c
 8004024:	4621      	mov	r1, r4
 8004026:	4628      	mov	r0, r5
 8004028:	f000 f9e2 	bl	80043f0 <_printf_common>
 800402c:	3001      	adds	r0, #1
 800402e:	f040 8090 	bne.w	8004152 <_printf_float+0x1ce>
 8004032:	f04f 30ff 	mov.w	r0, #4294967295
 8004036:	b011      	add	sp, #68	; 0x44
 8004038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800403c:	463a      	mov	r2, r7
 800403e:	464b      	mov	r3, r9
 8004040:	4638      	mov	r0, r7
 8004042:	4649      	mov	r1, r9
 8004044:	f7fc fce2 	bl	8000a0c <__aeabi_dcmpun>
 8004048:	b110      	cbz	r0, 8004050 <_printf_float+0xcc>
 800404a:	4f8c      	ldr	r7, [pc, #560]	; (800427c <_printf_float+0x2f8>)
 800404c:	4b8c      	ldr	r3, [pc, #560]	; (8004280 <_printf_float+0x2fc>)
 800404e:	e7db      	b.n	8004008 <_printf_float+0x84>
 8004050:	6863      	ldr	r3, [r4, #4]
 8004052:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8004056:	1c59      	adds	r1, r3, #1
 8004058:	a80d      	add	r0, sp, #52	; 0x34
 800405a:	a90e      	add	r1, sp, #56	; 0x38
 800405c:	d140      	bne.n	80040e0 <_printf_float+0x15c>
 800405e:	2306      	movs	r3, #6
 8004060:	6063      	str	r3, [r4, #4]
 8004062:	f04f 0c00 	mov.w	ip, #0
 8004066:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 800406a:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800406e:	6863      	ldr	r3, [r4, #4]
 8004070:	6022      	str	r2, [r4, #0]
 8004072:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8004076:	9300      	str	r3, [sp, #0]
 8004078:	463a      	mov	r2, r7
 800407a:	464b      	mov	r3, r9
 800407c:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8004080:	4628      	mov	r0, r5
 8004082:	f7ff feed 	bl	8003e60 <__cvt>
 8004086:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 800408a:	2b47      	cmp	r3, #71	; 0x47
 800408c:	4607      	mov	r7, r0
 800408e:	d109      	bne.n	80040a4 <_printf_float+0x120>
 8004090:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004092:	1cd8      	adds	r0, r3, #3
 8004094:	db02      	blt.n	800409c <_printf_float+0x118>
 8004096:	6862      	ldr	r2, [r4, #4]
 8004098:	4293      	cmp	r3, r2
 800409a:	dd47      	ble.n	800412c <_printf_float+0x1a8>
 800409c:	f1a8 0802 	sub.w	r8, r8, #2
 80040a0:	fa5f f888 	uxtb.w	r8, r8
 80040a4:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80040a8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80040aa:	d824      	bhi.n	80040f6 <_printf_float+0x172>
 80040ac:	3901      	subs	r1, #1
 80040ae:	4642      	mov	r2, r8
 80040b0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80040b4:	910d      	str	r1, [sp, #52]	; 0x34
 80040b6:	f7ff ff2f 	bl	8003f18 <__exponent>
 80040ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80040bc:	4681      	mov	r9, r0
 80040be:	1813      	adds	r3, r2, r0
 80040c0:	2a01      	cmp	r2, #1
 80040c2:	6123      	str	r3, [r4, #16]
 80040c4:	dc02      	bgt.n	80040cc <_printf_float+0x148>
 80040c6:	6822      	ldr	r2, [r4, #0]
 80040c8:	07d1      	lsls	r1, r2, #31
 80040ca:	d501      	bpl.n	80040d0 <_printf_float+0x14c>
 80040cc:	3301      	adds	r3, #1
 80040ce:	6123      	str	r3, [r4, #16]
 80040d0:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d0a2      	beq.n	800401e <_printf_float+0x9a>
 80040d8:	232d      	movs	r3, #45	; 0x2d
 80040da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80040de:	e79e      	b.n	800401e <_printf_float+0x9a>
 80040e0:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 80040e4:	f000 816e 	beq.w	80043c4 <_printf_float+0x440>
 80040e8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80040ec:	d1b9      	bne.n	8004062 <_printf_float+0xde>
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d1b7      	bne.n	8004062 <_printf_float+0xde>
 80040f2:	2301      	movs	r3, #1
 80040f4:	e7b4      	b.n	8004060 <_printf_float+0xdc>
 80040f6:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 80040fa:	d119      	bne.n	8004130 <_printf_float+0x1ac>
 80040fc:	2900      	cmp	r1, #0
 80040fe:	6863      	ldr	r3, [r4, #4]
 8004100:	dd0c      	ble.n	800411c <_printf_float+0x198>
 8004102:	6121      	str	r1, [r4, #16]
 8004104:	b913      	cbnz	r3, 800410c <_printf_float+0x188>
 8004106:	6822      	ldr	r2, [r4, #0]
 8004108:	07d2      	lsls	r2, r2, #31
 800410a:	d502      	bpl.n	8004112 <_printf_float+0x18e>
 800410c:	3301      	adds	r3, #1
 800410e:	440b      	add	r3, r1
 8004110:	6123      	str	r3, [r4, #16]
 8004112:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004114:	f04f 0900 	mov.w	r9, #0
 8004118:	65a3      	str	r3, [r4, #88]	; 0x58
 800411a:	e7d9      	b.n	80040d0 <_printf_float+0x14c>
 800411c:	b913      	cbnz	r3, 8004124 <_printf_float+0x1a0>
 800411e:	6822      	ldr	r2, [r4, #0]
 8004120:	07d0      	lsls	r0, r2, #31
 8004122:	d501      	bpl.n	8004128 <_printf_float+0x1a4>
 8004124:	3302      	adds	r3, #2
 8004126:	e7f3      	b.n	8004110 <_printf_float+0x18c>
 8004128:	2301      	movs	r3, #1
 800412a:	e7f1      	b.n	8004110 <_printf_float+0x18c>
 800412c:	f04f 0867 	mov.w	r8, #103	; 0x67
 8004130:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004134:	4293      	cmp	r3, r2
 8004136:	db05      	blt.n	8004144 <_printf_float+0x1c0>
 8004138:	6822      	ldr	r2, [r4, #0]
 800413a:	6123      	str	r3, [r4, #16]
 800413c:	07d1      	lsls	r1, r2, #31
 800413e:	d5e8      	bpl.n	8004112 <_printf_float+0x18e>
 8004140:	3301      	adds	r3, #1
 8004142:	e7e5      	b.n	8004110 <_printf_float+0x18c>
 8004144:	2b00      	cmp	r3, #0
 8004146:	bfcc      	ite	gt
 8004148:	2301      	movgt	r3, #1
 800414a:	f1c3 0302 	rsble	r3, r3, #2
 800414e:	4413      	add	r3, r2
 8004150:	e7de      	b.n	8004110 <_printf_float+0x18c>
 8004152:	6823      	ldr	r3, [r4, #0]
 8004154:	055a      	lsls	r2, r3, #21
 8004156:	d407      	bmi.n	8004168 <_printf_float+0x1e4>
 8004158:	6923      	ldr	r3, [r4, #16]
 800415a:	463a      	mov	r2, r7
 800415c:	4659      	mov	r1, fp
 800415e:	4628      	mov	r0, r5
 8004160:	47b0      	blx	r6
 8004162:	3001      	adds	r0, #1
 8004164:	d129      	bne.n	80041ba <_printf_float+0x236>
 8004166:	e764      	b.n	8004032 <_printf_float+0xae>
 8004168:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 800416c:	f240 80d7 	bls.w	800431e <_printf_float+0x39a>
 8004170:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004174:	2200      	movs	r2, #0
 8004176:	2300      	movs	r3, #0
 8004178:	f7fc fc16 	bl	80009a8 <__aeabi_dcmpeq>
 800417c:	b388      	cbz	r0, 80041e2 <_printf_float+0x25e>
 800417e:	2301      	movs	r3, #1
 8004180:	4a40      	ldr	r2, [pc, #256]	; (8004284 <_printf_float+0x300>)
 8004182:	4659      	mov	r1, fp
 8004184:	4628      	mov	r0, r5
 8004186:	47b0      	blx	r6
 8004188:	3001      	adds	r0, #1
 800418a:	f43f af52 	beq.w	8004032 <_printf_float+0xae>
 800418e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004192:	429a      	cmp	r2, r3
 8004194:	db02      	blt.n	800419c <_printf_float+0x218>
 8004196:	6823      	ldr	r3, [r4, #0]
 8004198:	07d8      	lsls	r0, r3, #31
 800419a:	d50e      	bpl.n	80041ba <_printf_float+0x236>
 800419c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80041a0:	4659      	mov	r1, fp
 80041a2:	4628      	mov	r0, r5
 80041a4:	47b0      	blx	r6
 80041a6:	3001      	adds	r0, #1
 80041a8:	f43f af43 	beq.w	8004032 <_printf_float+0xae>
 80041ac:	2700      	movs	r7, #0
 80041ae:	f104 081a 	add.w	r8, r4, #26
 80041b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80041b4:	3b01      	subs	r3, #1
 80041b6:	42bb      	cmp	r3, r7
 80041b8:	dc09      	bgt.n	80041ce <_printf_float+0x24a>
 80041ba:	6823      	ldr	r3, [r4, #0]
 80041bc:	079f      	lsls	r7, r3, #30
 80041be:	f100 80fd 	bmi.w	80043bc <_printf_float+0x438>
 80041c2:	68e0      	ldr	r0, [r4, #12]
 80041c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80041c6:	4298      	cmp	r0, r3
 80041c8:	bfb8      	it	lt
 80041ca:	4618      	movlt	r0, r3
 80041cc:	e733      	b.n	8004036 <_printf_float+0xb2>
 80041ce:	2301      	movs	r3, #1
 80041d0:	4642      	mov	r2, r8
 80041d2:	4659      	mov	r1, fp
 80041d4:	4628      	mov	r0, r5
 80041d6:	47b0      	blx	r6
 80041d8:	3001      	adds	r0, #1
 80041da:	f43f af2a 	beq.w	8004032 <_printf_float+0xae>
 80041de:	3701      	adds	r7, #1
 80041e0:	e7e7      	b.n	80041b2 <_printf_float+0x22e>
 80041e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	dc2b      	bgt.n	8004240 <_printf_float+0x2bc>
 80041e8:	2301      	movs	r3, #1
 80041ea:	4a26      	ldr	r2, [pc, #152]	; (8004284 <_printf_float+0x300>)
 80041ec:	4659      	mov	r1, fp
 80041ee:	4628      	mov	r0, r5
 80041f0:	47b0      	blx	r6
 80041f2:	3001      	adds	r0, #1
 80041f4:	f43f af1d 	beq.w	8004032 <_printf_float+0xae>
 80041f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80041fa:	b923      	cbnz	r3, 8004206 <_printf_float+0x282>
 80041fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80041fe:	b913      	cbnz	r3, 8004206 <_printf_float+0x282>
 8004200:	6823      	ldr	r3, [r4, #0]
 8004202:	07d9      	lsls	r1, r3, #31
 8004204:	d5d9      	bpl.n	80041ba <_printf_float+0x236>
 8004206:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800420a:	4659      	mov	r1, fp
 800420c:	4628      	mov	r0, r5
 800420e:	47b0      	blx	r6
 8004210:	3001      	adds	r0, #1
 8004212:	f43f af0e 	beq.w	8004032 <_printf_float+0xae>
 8004216:	f04f 0800 	mov.w	r8, #0
 800421a:	f104 091a 	add.w	r9, r4, #26
 800421e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004220:	425b      	negs	r3, r3
 8004222:	4543      	cmp	r3, r8
 8004224:	dc01      	bgt.n	800422a <_printf_float+0x2a6>
 8004226:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004228:	e797      	b.n	800415a <_printf_float+0x1d6>
 800422a:	2301      	movs	r3, #1
 800422c:	464a      	mov	r2, r9
 800422e:	4659      	mov	r1, fp
 8004230:	4628      	mov	r0, r5
 8004232:	47b0      	blx	r6
 8004234:	3001      	adds	r0, #1
 8004236:	f43f aefc 	beq.w	8004032 <_printf_float+0xae>
 800423a:	f108 0801 	add.w	r8, r8, #1
 800423e:	e7ee      	b.n	800421e <_printf_float+0x29a>
 8004240:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004242:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004244:	429a      	cmp	r2, r3
 8004246:	bfa8      	it	ge
 8004248:	461a      	movge	r2, r3
 800424a:	2a00      	cmp	r2, #0
 800424c:	4690      	mov	r8, r2
 800424e:	dd07      	ble.n	8004260 <_printf_float+0x2dc>
 8004250:	4613      	mov	r3, r2
 8004252:	4659      	mov	r1, fp
 8004254:	463a      	mov	r2, r7
 8004256:	4628      	mov	r0, r5
 8004258:	47b0      	blx	r6
 800425a:	3001      	adds	r0, #1
 800425c:	f43f aee9 	beq.w	8004032 <_printf_float+0xae>
 8004260:	f104 031a 	add.w	r3, r4, #26
 8004264:	f04f 0a00 	mov.w	sl, #0
 8004268:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 800426c:	930b      	str	r3, [sp, #44]	; 0x2c
 800426e:	e015      	b.n	800429c <_printf_float+0x318>
 8004270:	7fefffff 	.word	0x7fefffff
 8004274:	08005f3c 	.word	0x08005f3c
 8004278:	08005f38 	.word	0x08005f38
 800427c:	08005f44 	.word	0x08005f44
 8004280:	08005f40 	.word	0x08005f40
 8004284:	08005f48 	.word	0x08005f48
 8004288:	2301      	movs	r3, #1
 800428a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800428c:	4659      	mov	r1, fp
 800428e:	4628      	mov	r0, r5
 8004290:	47b0      	blx	r6
 8004292:	3001      	adds	r0, #1
 8004294:	f43f aecd 	beq.w	8004032 <_printf_float+0xae>
 8004298:	f10a 0a01 	add.w	sl, sl, #1
 800429c:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 80042a0:	eba9 0308 	sub.w	r3, r9, r8
 80042a4:	4553      	cmp	r3, sl
 80042a6:	dcef      	bgt.n	8004288 <_printf_float+0x304>
 80042a8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80042ac:	429a      	cmp	r2, r3
 80042ae:	444f      	add	r7, r9
 80042b0:	db14      	blt.n	80042dc <_printf_float+0x358>
 80042b2:	6823      	ldr	r3, [r4, #0]
 80042b4:	07da      	lsls	r2, r3, #31
 80042b6:	d411      	bmi.n	80042dc <_printf_float+0x358>
 80042b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80042ba:	990d      	ldr	r1, [sp, #52]	; 0x34
 80042bc:	eba3 0209 	sub.w	r2, r3, r9
 80042c0:	eba3 0901 	sub.w	r9, r3, r1
 80042c4:	4591      	cmp	r9, r2
 80042c6:	bfa8      	it	ge
 80042c8:	4691      	movge	r9, r2
 80042ca:	f1b9 0f00 	cmp.w	r9, #0
 80042ce:	dc0d      	bgt.n	80042ec <_printf_float+0x368>
 80042d0:	2700      	movs	r7, #0
 80042d2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80042d6:	f104 081a 	add.w	r8, r4, #26
 80042da:	e018      	b.n	800430e <_printf_float+0x38a>
 80042dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80042e0:	4659      	mov	r1, fp
 80042e2:	4628      	mov	r0, r5
 80042e4:	47b0      	blx	r6
 80042e6:	3001      	adds	r0, #1
 80042e8:	d1e6      	bne.n	80042b8 <_printf_float+0x334>
 80042ea:	e6a2      	b.n	8004032 <_printf_float+0xae>
 80042ec:	464b      	mov	r3, r9
 80042ee:	463a      	mov	r2, r7
 80042f0:	4659      	mov	r1, fp
 80042f2:	4628      	mov	r0, r5
 80042f4:	47b0      	blx	r6
 80042f6:	3001      	adds	r0, #1
 80042f8:	d1ea      	bne.n	80042d0 <_printf_float+0x34c>
 80042fa:	e69a      	b.n	8004032 <_printf_float+0xae>
 80042fc:	2301      	movs	r3, #1
 80042fe:	4642      	mov	r2, r8
 8004300:	4659      	mov	r1, fp
 8004302:	4628      	mov	r0, r5
 8004304:	47b0      	blx	r6
 8004306:	3001      	adds	r0, #1
 8004308:	f43f ae93 	beq.w	8004032 <_printf_float+0xae>
 800430c:	3701      	adds	r7, #1
 800430e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004312:	1a9b      	subs	r3, r3, r2
 8004314:	eba3 0309 	sub.w	r3, r3, r9
 8004318:	42bb      	cmp	r3, r7
 800431a:	dcef      	bgt.n	80042fc <_printf_float+0x378>
 800431c:	e74d      	b.n	80041ba <_printf_float+0x236>
 800431e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004320:	2a01      	cmp	r2, #1
 8004322:	dc01      	bgt.n	8004328 <_printf_float+0x3a4>
 8004324:	07db      	lsls	r3, r3, #31
 8004326:	d538      	bpl.n	800439a <_printf_float+0x416>
 8004328:	2301      	movs	r3, #1
 800432a:	463a      	mov	r2, r7
 800432c:	4659      	mov	r1, fp
 800432e:	4628      	mov	r0, r5
 8004330:	47b0      	blx	r6
 8004332:	3001      	adds	r0, #1
 8004334:	f43f ae7d 	beq.w	8004032 <_printf_float+0xae>
 8004338:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800433c:	4659      	mov	r1, fp
 800433e:	4628      	mov	r0, r5
 8004340:	47b0      	blx	r6
 8004342:	3001      	adds	r0, #1
 8004344:	f107 0701 	add.w	r7, r7, #1
 8004348:	f43f ae73 	beq.w	8004032 <_printf_float+0xae>
 800434c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004350:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004352:	2200      	movs	r2, #0
 8004354:	f103 38ff 	add.w	r8, r3, #4294967295
 8004358:	2300      	movs	r3, #0
 800435a:	f7fc fb25 	bl	80009a8 <__aeabi_dcmpeq>
 800435e:	b9c0      	cbnz	r0, 8004392 <_printf_float+0x40e>
 8004360:	4643      	mov	r3, r8
 8004362:	463a      	mov	r2, r7
 8004364:	4659      	mov	r1, fp
 8004366:	4628      	mov	r0, r5
 8004368:	47b0      	blx	r6
 800436a:	3001      	adds	r0, #1
 800436c:	d10d      	bne.n	800438a <_printf_float+0x406>
 800436e:	e660      	b.n	8004032 <_printf_float+0xae>
 8004370:	2301      	movs	r3, #1
 8004372:	4642      	mov	r2, r8
 8004374:	4659      	mov	r1, fp
 8004376:	4628      	mov	r0, r5
 8004378:	47b0      	blx	r6
 800437a:	3001      	adds	r0, #1
 800437c:	f43f ae59 	beq.w	8004032 <_printf_float+0xae>
 8004380:	3701      	adds	r7, #1
 8004382:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004384:	3b01      	subs	r3, #1
 8004386:	42bb      	cmp	r3, r7
 8004388:	dcf2      	bgt.n	8004370 <_printf_float+0x3ec>
 800438a:	464b      	mov	r3, r9
 800438c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004390:	e6e4      	b.n	800415c <_printf_float+0x1d8>
 8004392:	2700      	movs	r7, #0
 8004394:	f104 081a 	add.w	r8, r4, #26
 8004398:	e7f3      	b.n	8004382 <_printf_float+0x3fe>
 800439a:	2301      	movs	r3, #1
 800439c:	e7e1      	b.n	8004362 <_printf_float+0x3de>
 800439e:	2301      	movs	r3, #1
 80043a0:	4642      	mov	r2, r8
 80043a2:	4659      	mov	r1, fp
 80043a4:	4628      	mov	r0, r5
 80043a6:	47b0      	blx	r6
 80043a8:	3001      	adds	r0, #1
 80043aa:	f43f ae42 	beq.w	8004032 <_printf_float+0xae>
 80043ae:	3701      	adds	r7, #1
 80043b0:	68e3      	ldr	r3, [r4, #12]
 80043b2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80043b4:	1a9b      	subs	r3, r3, r2
 80043b6:	42bb      	cmp	r3, r7
 80043b8:	dcf1      	bgt.n	800439e <_printf_float+0x41a>
 80043ba:	e702      	b.n	80041c2 <_printf_float+0x23e>
 80043bc:	2700      	movs	r7, #0
 80043be:	f104 0819 	add.w	r8, r4, #25
 80043c2:	e7f5      	b.n	80043b0 <_printf_float+0x42c>
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	f43f ae94 	beq.w	80040f2 <_printf_float+0x16e>
 80043ca:	f04f 0c00 	mov.w	ip, #0
 80043ce:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80043d2:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 80043d6:	6022      	str	r2, [r4, #0]
 80043d8:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80043dc:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80043e0:	9300      	str	r3, [sp, #0]
 80043e2:	463a      	mov	r2, r7
 80043e4:	464b      	mov	r3, r9
 80043e6:	4628      	mov	r0, r5
 80043e8:	f7ff fd3a 	bl	8003e60 <__cvt>
 80043ec:	4607      	mov	r7, r0
 80043ee:	e64f      	b.n	8004090 <_printf_float+0x10c>

080043f0 <_printf_common>:
 80043f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043f4:	4691      	mov	r9, r2
 80043f6:	461f      	mov	r7, r3
 80043f8:	688a      	ldr	r2, [r1, #8]
 80043fa:	690b      	ldr	r3, [r1, #16]
 80043fc:	4606      	mov	r6, r0
 80043fe:	4293      	cmp	r3, r2
 8004400:	bfb8      	it	lt
 8004402:	4613      	movlt	r3, r2
 8004404:	f8c9 3000 	str.w	r3, [r9]
 8004408:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800440c:	460c      	mov	r4, r1
 800440e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004412:	b112      	cbz	r2, 800441a <_printf_common+0x2a>
 8004414:	3301      	adds	r3, #1
 8004416:	f8c9 3000 	str.w	r3, [r9]
 800441a:	6823      	ldr	r3, [r4, #0]
 800441c:	0699      	lsls	r1, r3, #26
 800441e:	bf42      	ittt	mi
 8004420:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004424:	3302      	addmi	r3, #2
 8004426:	f8c9 3000 	strmi.w	r3, [r9]
 800442a:	6825      	ldr	r5, [r4, #0]
 800442c:	f015 0506 	ands.w	r5, r5, #6
 8004430:	d107      	bne.n	8004442 <_printf_common+0x52>
 8004432:	f104 0a19 	add.w	sl, r4, #25
 8004436:	68e3      	ldr	r3, [r4, #12]
 8004438:	f8d9 2000 	ldr.w	r2, [r9]
 800443c:	1a9b      	subs	r3, r3, r2
 800443e:	42ab      	cmp	r3, r5
 8004440:	dc29      	bgt.n	8004496 <_printf_common+0xa6>
 8004442:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004446:	6822      	ldr	r2, [r4, #0]
 8004448:	3300      	adds	r3, #0
 800444a:	bf18      	it	ne
 800444c:	2301      	movne	r3, #1
 800444e:	0692      	lsls	r2, r2, #26
 8004450:	d42e      	bmi.n	80044b0 <_printf_common+0xc0>
 8004452:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004456:	4639      	mov	r1, r7
 8004458:	4630      	mov	r0, r6
 800445a:	47c0      	blx	r8
 800445c:	3001      	adds	r0, #1
 800445e:	d021      	beq.n	80044a4 <_printf_common+0xb4>
 8004460:	6823      	ldr	r3, [r4, #0]
 8004462:	68e5      	ldr	r5, [r4, #12]
 8004464:	f003 0306 	and.w	r3, r3, #6
 8004468:	2b04      	cmp	r3, #4
 800446a:	bf18      	it	ne
 800446c:	2500      	movne	r5, #0
 800446e:	f8d9 2000 	ldr.w	r2, [r9]
 8004472:	f04f 0900 	mov.w	r9, #0
 8004476:	bf08      	it	eq
 8004478:	1aad      	subeq	r5, r5, r2
 800447a:	68a3      	ldr	r3, [r4, #8]
 800447c:	6922      	ldr	r2, [r4, #16]
 800447e:	bf08      	it	eq
 8004480:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004484:	4293      	cmp	r3, r2
 8004486:	bfc4      	itt	gt
 8004488:	1a9b      	subgt	r3, r3, r2
 800448a:	18ed      	addgt	r5, r5, r3
 800448c:	341a      	adds	r4, #26
 800448e:	454d      	cmp	r5, r9
 8004490:	d11a      	bne.n	80044c8 <_printf_common+0xd8>
 8004492:	2000      	movs	r0, #0
 8004494:	e008      	b.n	80044a8 <_printf_common+0xb8>
 8004496:	2301      	movs	r3, #1
 8004498:	4652      	mov	r2, sl
 800449a:	4639      	mov	r1, r7
 800449c:	4630      	mov	r0, r6
 800449e:	47c0      	blx	r8
 80044a0:	3001      	adds	r0, #1
 80044a2:	d103      	bne.n	80044ac <_printf_common+0xbc>
 80044a4:	f04f 30ff 	mov.w	r0, #4294967295
 80044a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044ac:	3501      	adds	r5, #1
 80044ae:	e7c2      	b.n	8004436 <_printf_common+0x46>
 80044b0:	2030      	movs	r0, #48	; 0x30
 80044b2:	18e1      	adds	r1, r4, r3
 80044b4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80044b8:	1c5a      	adds	r2, r3, #1
 80044ba:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80044be:	4422      	add	r2, r4
 80044c0:	3302      	adds	r3, #2
 80044c2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80044c6:	e7c4      	b.n	8004452 <_printf_common+0x62>
 80044c8:	2301      	movs	r3, #1
 80044ca:	4622      	mov	r2, r4
 80044cc:	4639      	mov	r1, r7
 80044ce:	4630      	mov	r0, r6
 80044d0:	47c0      	blx	r8
 80044d2:	3001      	adds	r0, #1
 80044d4:	d0e6      	beq.n	80044a4 <_printf_common+0xb4>
 80044d6:	f109 0901 	add.w	r9, r9, #1
 80044da:	e7d8      	b.n	800448e <_printf_common+0x9e>

080044dc <_printf_i>:
 80044dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80044e0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80044e4:	460c      	mov	r4, r1
 80044e6:	7e09      	ldrb	r1, [r1, #24]
 80044e8:	b085      	sub	sp, #20
 80044ea:	296e      	cmp	r1, #110	; 0x6e
 80044ec:	4617      	mov	r7, r2
 80044ee:	4606      	mov	r6, r0
 80044f0:	4698      	mov	r8, r3
 80044f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80044f4:	f000 80b3 	beq.w	800465e <_printf_i+0x182>
 80044f8:	d822      	bhi.n	8004540 <_printf_i+0x64>
 80044fa:	2963      	cmp	r1, #99	; 0x63
 80044fc:	d036      	beq.n	800456c <_printf_i+0x90>
 80044fe:	d80a      	bhi.n	8004516 <_printf_i+0x3a>
 8004500:	2900      	cmp	r1, #0
 8004502:	f000 80b9 	beq.w	8004678 <_printf_i+0x19c>
 8004506:	2958      	cmp	r1, #88	; 0x58
 8004508:	f000 8083 	beq.w	8004612 <_printf_i+0x136>
 800450c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004510:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004514:	e032      	b.n	800457c <_printf_i+0xa0>
 8004516:	2964      	cmp	r1, #100	; 0x64
 8004518:	d001      	beq.n	800451e <_printf_i+0x42>
 800451a:	2969      	cmp	r1, #105	; 0x69
 800451c:	d1f6      	bne.n	800450c <_printf_i+0x30>
 800451e:	6820      	ldr	r0, [r4, #0]
 8004520:	6813      	ldr	r3, [r2, #0]
 8004522:	0605      	lsls	r5, r0, #24
 8004524:	f103 0104 	add.w	r1, r3, #4
 8004528:	d52a      	bpl.n	8004580 <_printf_i+0xa4>
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	6011      	str	r1, [r2, #0]
 800452e:	2b00      	cmp	r3, #0
 8004530:	da03      	bge.n	800453a <_printf_i+0x5e>
 8004532:	222d      	movs	r2, #45	; 0x2d
 8004534:	425b      	negs	r3, r3
 8004536:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800453a:	486f      	ldr	r0, [pc, #444]	; (80046f8 <_printf_i+0x21c>)
 800453c:	220a      	movs	r2, #10
 800453e:	e039      	b.n	80045b4 <_printf_i+0xd8>
 8004540:	2973      	cmp	r1, #115	; 0x73
 8004542:	f000 809d 	beq.w	8004680 <_printf_i+0x1a4>
 8004546:	d808      	bhi.n	800455a <_printf_i+0x7e>
 8004548:	296f      	cmp	r1, #111	; 0x6f
 800454a:	d020      	beq.n	800458e <_printf_i+0xb2>
 800454c:	2970      	cmp	r1, #112	; 0x70
 800454e:	d1dd      	bne.n	800450c <_printf_i+0x30>
 8004550:	6823      	ldr	r3, [r4, #0]
 8004552:	f043 0320 	orr.w	r3, r3, #32
 8004556:	6023      	str	r3, [r4, #0]
 8004558:	e003      	b.n	8004562 <_printf_i+0x86>
 800455a:	2975      	cmp	r1, #117	; 0x75
 800455c:	d017      	beq.n	800458e <_printf_i+0xb2>
 800455e:	2978      	cmp	r1, #120	; 0x78
 8004560:	d1d4      	bne.n	800450c <_printf_i+0x30>
 8004562:	2378      	movs	r3, #120	; 0x78
 8004564:	4865      	ldr	r0, [pc, #404]	; (80046fc <_printf_i+0x220>)
 8004566:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800456a:	e055      	b.n	8004618 <_printf_i+0x13c>
 800456c:	6813      	ldr	r3, [r2, #0]
 800456e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004572:	1d19      	adds	r1, r3, #4
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	6011      	str	r1, [r2, #0]
 8004578:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800457c:	2301      	movs	r3, #1
 800457e:	e08c      	b.n	800469a <_printf_i+0x1be>
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004586:	6011      	str	r1, [r2, #0]
 8004588:	bf18      	it	ne
 800458a:	b21b      	sxthne	r3, r3
 800458c:	e7cf      	b.n	800452e <_printf_i+0x52>
 800458e:	6813      	ldr	r3, [r2, #0]
 8004590:	6825      	ldr	r5, [r4, #0]
 8004592:	1d18      	adds	r0, r3, #4
 8004594:	6010      	str	r0, [r2, #0]
 8004596:	0628      	lsls	r0, r5, #24
 8004598:	d501      	bpl.n	800459e <_printf_i+0xc2>
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	e002      	b.n	80045a4 <_printf_i+0xc8>
 800459e:	0668      	lsls	r0, r5, #25
 80045a0:	d5fb      	bpl.n	800459a <_printf_i+0xbe>
 80045a2:	881b      	ldrh	r3, [r3, #0]
 80045a4:	296f      	cmp	r1, #111	; 0x6f
 80045a6:	bf14      	ite	ne
 80045a8:	220a      	movne	r2, #10
 80045aa:	2208      	moveq	r2, #8
 80045ac:	4852      	ldr	r0, [pc, #328]	; (80046f8 <_printf_i+0x21c>)
 80045ae:	2100      	movs	r1, #0
 80045b0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80045b4:	6865      	ldr	r5, [r4, #4]
 80045b6:	2d00      	cmp	r5, #0
 80045b8:	60a5      	str	r5, [r4, #8]
 80045ba:	f2c0 8095 	blt.w	80046e8 <_printf_i+0x20c>
 80045be:	6821      	ldr	r1, [r4, #0]
 80045c0:	f021 0104 	bic.w	r1, r1, #4
 80045c4:	6021      	str	r1, [r4, #0]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d13d      	bne.n	8004646 <_printf_i+0x16a>
 80045ca:	2d00      	cmp	r5, #0
 80045cc:	f040 808e 	bne.w	80046ec <_printf_i+0x210>
 80045d0:	4665      	mov	r5, ip
 80045d2:	2a08      	cmp	r2, #8
 80045d4:	d10b      	bne.n	80045ee <_printf_i+0x112>
 80045d6:	6823      	ldr	r3, [r4, #0]
 80045d8:	07db      	lsls	r3, r3, #31
 80045da:	d508      	bpl.n	80045ee <_printf_i+0x112>
 80045dc:	6923      	ldr	r3, [r4, #16]
 80045de:	6862      	ldr	r2, [r4, #4]
 80045e0:	429a      	cmp	r2, r3
 80045e2:	bfde      	ittt	le
 80045e4:	2330      	movle	r3, #48	; 0x30
 80045e6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80045ea:	f105 35ff 	addle.w	r5, r5, #4294967295
 80045ee:	ebac 0305 	sub.w	r3, ip, r5
 80045f2:	6123      	str	r3, [r4, #16]
 80045f4:	f8cd 8000 	str.w	r8, [sp]
 80045f8:	463b      	mov	r3, r7
 80045fa:	aa03      	add	r2, sp, #12
 80045fc:	4621      	mov	r1, r4
 80045fe:	4630      	mov	r0, r6
 8004600:	f7ff fef6 	bl	80043f0 <_printf_common>
 8004604:	3001      	adds	r0, #1
 8004606:	d14d      	bne.n	80046a4 <_printf_i+0x1c8>
 8004608:	f04f 30ff 	mov.w	r0, #4294967295
 800460c:	b005      	add	sp, #20
 800460e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004612:	4839      	ldr	r0, [pc, #228]	; (80046f8 <_printf_i+0x21c>)
 8004614:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004618:	6813      	ldr	r3, [r2, #0]
 800461a:	6821      	ldr	r1, [r4, #0]
 800461c:	1d1d      	adds	r5, r3, #4
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	6015      	str	r5, [r2, #0]
 8004622:	060a      	lsls	r2, r1, #24
 8004624:	d50b      	bpl.n	800463e <_printf_i+0x162>
 8004626:	07ca      	lsls	r2, r1, #31
 8004628:	bf44      	itt	mi
 800462a:	f041 0120 	orrmi.w	r1, r1, #32
 800462e:	6021      	strmi	r1, [r4, #0]
 8004630:	b91b      	cbnz	r3, 800463a <_printf_i+0x15e>
 8004632:	6822      	ldr	r2, [r4, #0]
 8004634:	f022 0220 	bic.w	r2, r2, #32
 8004638:	6022      	str	r2, [r4, #0]
 800463a:	2210      	movs	r2, #16
 800463c:	e7b7      	b.n	80045ae <_printf_i+0xd2>
 800463e:	064d      	lsls	r5, r1, #25
 8004640:	bf48      	it	mi
 8004642:	b29b      	uxthmi	r3, r3
 8004644:	e7ef      	b.n	8004626 <_printf_i+0x14a>
 8004646:	4665      	mov	r5, ip
 8004648:	fbb3 f1f2 	udiv	r1, r3, r2
 800464c:	fb02 3311 	mls	r3, r2, r1, r3
 8004650:	5cc3      	ldrb	r3, [r0, r3]
 8004652:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004656:	460b      	mov	r3, r1
 8004658:	2900      	cmp	r1, #0
 800465a:	d1f5      	bne.n	8004648 <_printf_i+0x16c>
 800465c:	e7b9      	b.n	80045d2 <_printf_i+0xf6>
 800465e:	6813      	ldr	r3, [r2, #0]
 8004660:	6825      	ldr	r5, [r4, #0]
 8004662:	1d18      	adds	r0, r3, #4
 8004664:	6961      	ldr	r1, [r4, #20]
 8004666:	6010      	str	r0, [r2, #0]
 8004668:	0628      	lsls	r0, r5, #24
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	d501      	bpl.n	8004672 <_printf_i+0x196>
 800466e:	6019      	str	r1, [r3, #0]
 8004670:	e002      	b.n	8004678 <_printf_i+0x19c>
 8004672:	066a      	lsls	r2, r5, #25
 8004674:	d5fb      	bpl.n	800466e <_printf_i+0x192>
 8004676:	8019      	strh	r1, [r3, #0]
 8004678:	2300      	movs	r3, #0
 800467a:	4665      	mov	r5, ip
 800467c:	6123      	str	r3, [r4, #16]
 800467e:	e7b9      	b.n	80045f4 <_printf_i+0x118>
 8004680:	6813      	ldr	r3, [r2, #0]
 8004682:	1d19      	adds	r1, r3, #4
 8004684:	6011      	str	r1, [r2, #0]
 8004686:	681d      	ldr	r5, [r3, #0]
 8004688:	6862      	ldr	r2, [r4, #4]
 800468a:	2100      	movs	r1, #0
 800468c:	4628      	mov	r0, r5
 800468e:	f000 feb1 	bl	80053f4 <memchr>
 8004692:	b108      	cbz	r0, 8004698 <_printf_i+0x1bc>
 8004694:	1b40      	subs	r0, r0, r5
 8004696:	6060      	str	r0, [r4, #4]
 8004698:	6863      	ldr	r3, [r4, #4]
 800469a:	6123      	str	r3, [r4, #16]
 800469c:	2300      	movs	r3, #0
 800469e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046a2:	e7a7      	b.n	80045f4 <_printf_i+0x118>
 80046a4:	6923      	ldr	r3, [r4, #16]
 80046a6:	462a      	mov	r2, r5
 80046a8:	4639      	mov	r1, r7
 80046aa:	4630      	mov	r0, r6
 80046ac:	47c0      	blx	r8
 80046ae:	3001      	adds	r0, #1
 80046b0:	d0aa      	beq.n	8004608 <_printf_i+0x12c>
 80046b2:	6823      	ldr	r3, [r4, #0]
 80046b4:	079b      	lsls	r3, r3, #30
 80046b6:	d413      	bmi.n	80046e0 <_printf_i+0x204>
 80046b8:	68e0      	ldr	r0, [r4, #12]
 80046ba:	9b03      	ldr	r3, [sp, #12]
 80046bc:	4298      	cmp	r0, r3
 80046be:	bfb8      	it	lt
 80046c0:	4618      	movlt	r0, r3
 80046c2:	e7a3      	b.n	800460c <_printf_i+0x130>
 80046c4:	2301      	movs	r3, #1
 80046c6:	464a      	mov	r2, r9
 80046c8:	4639      	mov	r1, r7
 80046ca:	4630      	mov	r0, r6
 80046cc:	47c0      	blx	r8
 80046ce:	3001      	adds	r0, #1
 80046d0:	d09a      	beq.n	8004608 <_printf_i+0x12c>
 80046d2:	3501      	adds	r5, #1
 80046d4:	68e3      	ldr	r3, [r4, #12]
 80046d6:	9a03      	ldr	r2, [sp, #12]
 80046d8:	1a9b      	subs	r3, r3, r2
 80046da:	42ab      	cmp	r3, r5
 80046dc:	dcf2      	bgt.n	80046c4 <_printf_i+0x1e8>
 80046de:	e7eb      	b.n	80046b8 <_printf_i+0x1dc>
 80046e0:	2500      	movs	r5, #0
 80046e2:	f104 0919 	add.w	r9, r4, #25
 80046e6:	e7f5      	b.n	80046d4 <_printf_i+0x1f8>
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d1ac      	bne.n	8004646 <_printf_i+0x16a>
 80046ec:	7803      	ldrb	r3, [r0, #0]
 80046ee:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80046f2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80046f6:	e76c      	b.n	80045d2 <_printf_i+0xf6>
 80046f8:	08005f4a 	.word	0x08005f4a
 80046fc:	08005f5b 	.word	0x08005f5b

08004700 <siprintf>:
 8004700:	b40e      	push	{r1, r2, r3}
 8004702:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004706:	b500      	push	{lr}
 8004708:	b09c      	sub	sp, #112	; 0x70
 800470a:	ab1d      	add	r3, sp, #116	; 0x74
 800470c:	9002      	str	r0, [sp, #8]
 800470e:	9006      	str	r0, [sp, #24]
 8004710:	9107      	str	r1, [sp, #28]
 8004712:	9104      	str	r1, [sp, #16]
 8004714:	4808      	ldr	r0, [pc, #32]	; (8004738 <siprintf+0x38>)
 8004716:	4909      	ldr	r1, [pc, #36]	; (800473c <siprintf+0x3c>)
 8004718:	f853 2b04 	ldr.w	r2, [r3], #4
 800471c:	9105      	str	r1, [sp, #20]
 800471e:	6800      	ldr	r0, [r0, #0]
 8004720:	a902      	add	r1, sp, #8
 8004722:	9301      	str	r3, [sp, #4]
 8004724:	f001 fa6a 	bl	8005bfc <_svfiprintf_r>
 8004728:	2200      	movs	r2, #0
 800472a:	9b02      	ldr	r3, [sp, #8]
 800472c:	701a      	strb	r2, [r3, #0]
 800472e:	b01c      	add	sp, #112	; 0x70
 8004730:	f85d eb04 	ldr.w	lr, [sp], #4
 8004734:	b003      	add	sp, #12
 8004736:	4770      	bx	lr
 8004738:	2000000c 	.word	0x2000000c
 800473c:	ffff0208 	.word	0xffff0208

08004740 <quorem>:
 8004740:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004744:	6903      	ldr	r3, [r0, #16]
 8004746:	690c      	ldr	r4, [r1, #16]
 8004748:	4680      	mov	r8, r0
 800474a:	42a3      	cmp	r3, r4
 800474c:	f2c0 8084 	blt.w	8004858 <quorem+0x118>
 8004750:	3c01      	subs	r4, #1
 8004752:	f101 0714 	add.w	r7, r1, #20
 8004756:	f100 0614 	add.w	r6, r0, #20
 800475a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800475e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8004762:	3501      	adds	r5, #1
 8004764:	fbb0 f5f5 	udiv	r5, r0, r5
 8004768:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800476c:	eb06 030c 	add.w	r3, r6, ip
 8004770:	eb07 090c 	add.w	r9, r7, ip
 8004774:	9301      	str	r3, [sp, #4]
 8004776:	b39d      	cbz	r5, 80047e0 <quorem+0xa0>
 8004778:	f04f 0a00 	mov.w	sl, #0
 800477c:	4638      	mov	r0, r7
 800477e:	46b6      	mov	lr, r6
 8004780:	46d3      	mov	fp, sl
 8004782:	f850 2b04 	ldr.w	r2, [r0], #4
 8004786:	b293      	uxth	r3, r2
 8004788:	fb05 a303 	mla	r3, r5, r3, sl
 800478c:	0c12      	lsrs	r2, r2, #16
 800478e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004792:	fb05 a202 	mla	r2, r5, r2, sl
 8004796:	b29b      	uxth	r3, r3
 8004798:	ebab 0303 	sub.w	r3, fp, r3
 800479c:	f8de b000 	ldr.w	fp, [lr]
 80047a0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80047a4:	fa1f fb8b 	uxth.w	fp, fp
 80047a8:	445b      	add	r3, fp
 80047aa:	fa1f fb82 	uxth.w	fp, r2
 80047ae:	f8de 2000 	ldr.w	r2, [lr]
 80047b2:	4581      	cmp	r9, r0
 80047b4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80047b8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80047bc:	b29b      	uxth	r3, r3
 80047be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80047c2:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80047c6:	f84e 3b04 	str.w	r3, [lr], #4
 80047ca:	d2da      	bcs.n	8004782 <quorem+0x42>
 80047cc:	f856 300c 	ldr.w	r3, [r6, ip]
 80047d0:	b933      	cbnz	r3, 80047e0 <quorem+0xa0>
 80047d2:	9b01      	ldr	r3, [sp, #4]
 80047d4:	3b04      	subs	r3, #4
 80047d6:	429e      	cmp	r6, r3
 80047d8:	461a      	mov	r2, r3
 80047da:	d331      	bcc.n	8004840 <quorem+0x100>
 80047dc:	f8c8 4010 	str.w	r4, [r8, #16]
 80047e0:	4640      	mov	r0, r8
 80047e2:	f001 f835 	bl	8005850 <__mcmp>
 80047e6:	2800      	cmp	r0, #0
 80047e8:	db26      	blt.n	8004838 <quorem+0xf8>
 80047ea:	4630      	mov	r0, r6
 80047ec:	f04f 0c00 	mov.w	ip, #0
 80047f0:	3501      	adds	r5, #1
 80047f2:	f857 1b04 	ldr.w	r1, [r7], #4
 80047f6:	f8d0 e000 	ldr.w	lr, [r0]
 80047fa:	b28b      	uxth	r3, r1
 80047fc:	ebac 0303 	sub.w	r3, ip, r3
 8004800:	fa1f f28e 	uxth.w	r2, lr
 8004804:	4413      	add	r3, r2
 8004806:	0c0a      	lsrs	r2, r1, #16
 8004808:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800480c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004810:	b29b      	uxth	r3, r3
 8004812:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004816:	45b9      	cmp	r9, r7
 8004818:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800481c:	f840 3b04 	str.w	r3, [r0], #4
 8004820:	d2e7      	bcs.n	80047f2 <quorem+0xb2>
 8004822:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8004826:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800482a:	b92a      	cbnz	r2, 8004838 <quorem+0xf8>
 800482c:	3b04      	subs	r3, #4
 800482e:	429e      	cmp	r6, r3
 8004830:	461a      	mov	r2, r3
 8004832:	d30b      	bcc.n	800484c <quorem+0x10c>
 8004834:	f8c8 4010 	str.w	r4, [r8, #16]
 8004838:	4628      	mov	r0, r5
 800483a:	b003      	add	sp, #12
 800483c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004840:	6812      	ldr	r2, [r2, #0]
 8004842:	3b04      	subs	r3, #4
 8004844:	2a00      	cmp	r2, #0
 8004846:	d1c9      	bne.n	80047dc <quorem+0x9c>
 8004848:	3c01      	subs	r4, #1
 800484a:	e7c4      	b.n	80047d6 <quorem+0x96>
 800484c:	6812      	ldr	r2, [r2, #0]
 800484e:	3b04      	subs	r3, #4
 8004850:	2a00      	cmp	r2, #0
 8004852:	d1ef      	bne.n	8004834 <quorem+0xf4>
 8004854:	3c01      	subs	r4, #1
 8004856:	e7ea      	b.n	800482e <quorem+0xee>
 8004858:	2000      	movs	r0, #0
 800485a:	e7ee      	b.n	800483a <quorem+0xfa>
 800485c:	0000      	movs	r0, r0
	...

08004860 <_dtoa_r>:
 8004860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004864:	4616      	mov	r6, r2
 8004866:	461f      	mov	r7, r3
 8004868:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800486a:	b095      	sub	sp, #84	; 0x54
 800486c:	4604      	mov	r4, r0
 800486e:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8004872:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8004876:	b93d      	cbnz	r5, 8004888 <_dtoa_r+0x28>
 8004878:	2010      	movs	r0, #16
 800487a:	f000 fdb3 	bl	80053e4 <malloc>
 800487e:	6260      	str	r0, [r4, #36]	; 0x24
 8004880:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004884:	6005      	str	r5, [r0, #0]
 8004886:	60c5      	str	r5, [r0, #12]
 8004888:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800488a:	6819      	ldr	r1, [r3, #0]
 800488c:	b151      	cbz	r1, 80048a4 <_dtoa_r+0x44>
 800488e:	685a      	ldr	r2, [r3, #4]
 8004890:	2301      	movs	r3, #1
 8004892:	4093      	lsls	r3, r2
 8004894:	604a      	str	r2, [r1, #4]
 8004896:	608b      	str	r3, [r1, #8]
 8004898:	4620      	mov	r0, r4
 800489a:	f000 fdf8 	bl	800548e <_Bfree>
 800489e:	2200      	movs	r2, #0
 80048a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80048a2:	601a      	str	r2, [r3, #0]
 80048a4:	1e3b      	subs	r3, r7, #0
 80048a6:	bfaf      	iteee	ge
 80048a8:	2300      	movge	r3, #0
 80048aa:	2201      	movlt	r2, #1
 80048ac:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80048b0:	9303      	strlt	r3, [sp, #12]
 80048b2:	bfac      	ite	ge
 80048b4:	f8c8 3000 	strge.w	r3, [r8]
 80048b8:	f8c8 2000 	strlt.w	r2, [r8]
 80048bc:	4bae      	ldr	r3, [pc, #696]	; (8004b78 <_dtoa_r+0x318>)
 80048be:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80048c2:	ea33 0308 	bics.w	r3, r3, r8
 80048c6:	d11b      	bne.n	8004900 <_dtoa_r+0xa0>
 80048c8:	f242 730f 	movw	r3, #9999	; 0x270f
 80048cc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80048ce:	6013      	str	r3, [r2, #0]
 80048d0:	9b02      	ldr	r3, [sp, #8]
 80048d2:	b923      	cbnz	r3, 80048de <_dtoa_r+0x7e>
 80048d4:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80048d8:	2800      	cmp	r0, #0
 80048da:	f000 8545 	beq.w	8005368 <_dtoa_r+0xb08>
 80048de:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80048e0:	b953      	cbnz	r3, 80048f8 <_dtoa_r+0x98>
 80048e2:	4ba6      	ldr	r3, [pc, #664]	; (8004b7c <_dtoa_r+0x31c>)
 80048e4:	e021      	b.n	800492a <_dtoa_r+0xca>
 80048e6:	4ba6      	ldr	r3, [pc, #664]	; (8004b80 <_dtoa_r+0x320>)
 80048e8:	9306      	str	r3, [sp, #24]
 80048ea:	3308      	adds	r3, #8
 80048ec:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80048ee:	6013      	str	r3, [r2, #0]
 80048f0:	9806      	ldr	r0, [sp, #24]
 80048f2:	b015      	add	sp, #84	; 0x54
 80048f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048f8:	4ba0      	ldr	r3, [pc, #640]	; (8004b7c <_dtoa_r+0x31c>)
 80048fa:	9306      	str	r3, [sp, #24]
 80048fc:	3303      	adds	r3, #3
 80048fe:	e7f5      	b.n	80048ec <_dtoa_r+0x8c>
 8004900:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004904:	2200      	movs	r2, #0
 8004906:	2300      	movs	r3, #0
 8004908:	4630      	mov	r0, r6
 800490a:	4639      	mov	r1, r7
 800490c:	f7fc f84c 	bl	80009a8 <__aeabi_dcmpeq>
 8004910:	4682      	mov	sl, r0
 8004912:	b160      	cbz	r0, 800492e <_dtoa_r+0xce>
 8004914:	2301      	movs	r3, #1
 8004916:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004918:	6013      	str	r3, [r2, #0]
 800491a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800491c:	2b00      	cmp	r3, #0
 800491e:	f000 8520 	beq.w	8005362 <_dtoa_r+0xb02>
 8004922:	4b98      	ldr	r3, [pc, #608]	; (8004b84 <_dtoa_r+0x324>)
 8004924:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004926:	6013      	str	r3, [r2, #0]
 8004928:	3b01      	subs	r3, #1
 800492a:	9306      	str	r3, [sp, #24]
 800492c:	e7e0      	b.n	80048f0 <_dtoa_r+0x90>
 800492e:	ab12      	add	r3, sp, #72	; 0x48
 8004930:	9301      	str	r3, [sp, #4]
 8004932:	ab13      	add	r3, sp, #76	; 0x4c
 8004934:	9300      	str	r3, [sp, #0]
 8004936:	4632      	mov	r2, r6
 8004938:	463b      	mov	r3, r7
 800493a:	4620      	mov	r0, r4
 800493c:	f001 f800 	bl	8005940 <__d2b>
 8004940:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8004944:	4683      	mov	fp, r0
 8004946:	2d00      	cmp	r5, #0
 8004948:	d07d      	beq.n	8004a46 <_dtoa_r+0x1e6>
 800494a:	46b0      	mov	r8, r6
 800494c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004950:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8004954:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8004958:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800495c:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8004960:	2200      	movs	r2, #0
 8004962:	4b89      	ldr	r3, [pc, #548]	; (8004b88 <_dtoa_r+0x328>)
 8004964:	4640      	mov	r0, r8
 8004966:	4649      	mov	r1, r9
 8004968:	f7fb fbfe 	bl	8000168 <__aeabi_dsub>
 800496c:	a37c      	add	r3, pc, #496	; (adr r3, 8004b60 <_dtoa_r+0x300>)
 800496e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004972:	f7fb fdb1 	bl	80004d8 <__aeabi_dmul>
 8004976:	a37c      	add	r3, pc, #496	; (adr r3, 8004b68 <_dtoa_r+0x308>)
 8004978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800497c:	f7fb fbf6 	bl	800016c <__adddf3>
 8004980:	4606      	mov	r6, r0
 8004982:	4628      	mov	r0, r5
 8004984:	460f      	mov	r7, r1
 8004986:	f7fb fd3d 	bl	8000404 <__aeabi_i2d>
 800498a:	a379      	add	r3, pc, #484	; (adr r3, 8004b70 <_dtoa_r+0x310>)
 800498c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004990:	f7fb fda2 	bl	80004d8 <__aeabi_dmul>
 8004994:	4602      	mov	r2, r0
 8004996:	460b      	mov	r3, r1
 8004998:	4630      	mov	r0, r6
 800499a:	4639      	mov	r1, r7
 800499c:	f7fb fbe6 	bl	800016c <__adddf3>
 80049a0:	4606      	mov	r6, r0
 80049a2:	460f      	mov	r7, r1
 80049a4:	f7fc f848 	bl	8000a38 <__aeabi_d2iz>
 80049a8:	2200      	movs	r2, #0
 80049aa:	4682      	mov	sl, r0
 80049ac:	2300      	movs	r3, #0
 80049ae:	4630      	mov	r0, r6
 80049b0:	4639      	mov	r1, r7
 80049b2:	f7fc f803 	bl	80009bc <__aeabi_dcmplt>
 80049b6:	b148      	cbz	r0, 80049cc <_dtoa_r+0x16c>
 80049b8:	4650      	mov	r0, sl
 80049ba:	f7fb fd23 	bl	8000404 <__aeabi_i2d>
 80049be:	4632      	mov	r2, r6
 80049c0:	463b      	mov	r3, r7
 80049c2:	f7fb fff1 	bl	80009a8 <__aeabi_dcmpeq>
 80049c6:	b908      	cbnz	r0, 80049cc <_dtoa_r+0x16c>
 80049c8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80049cc:	f1ba 0f16 	cmp.w	sl, #22
 80049d0:	d85a      	bhi.n	8004a88 <_dtoa_r+0x228>
 80049d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80049d6:	496d      	ldr	r1, [pc, #436]	; (8004b8c <_dtoa_r+0x32c>)
 80049d8:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80049dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80049e0:	f7fc f80a 	bl	80009f8 <__aeabi_dcmpgt>
 80049e4:	2800      	cmp	r0, #0
 80049e6:	d051      	beq.n	8004a8c <_dtoa_r+0x22c>
 80049e8:	2300      	movs	r3, #0
 80049ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 80049ee:	930d      	str	r3, [sp, #52]	; 0x34
 80049f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80049f2:	1b5d      	subs	r5, r3, r5
 80049f4:	1e6b      	subs	r3, r5, #1
 80049f6:	9307      	str	r3, [sp, #28]
 80049f8:	bf43      	ittte	mi
 80049fa:	2300      	movmi	r3, #0
 80049fc:	f1c5 0901 	rsbmi	r9, r5, #1
 8004a00:	9307      	strmi	r3, [sp, #28]
 8004a02:	f04f 0900 	movpl.w	r9, #0
 8004a06:	f1ba 0f00 	cmp.w	sl, #0
 8004a0a:	db41      	blt.n	8004a90 <_dtoa_r+0x230>
 8004a0c:	9b07      	ldr	r3, [sp, #28]
 8004a0e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8004a12:	4453      	add	r3, sl
 8004a14:	9307      	str	r3, [sp, #28]
 8004a16:	2300      	movs	r3, #0
 8004a18:	9308      	str	r3, [sp, #32]
 8004a1a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004a1c:	2b09      	cmp	r3, #9
 8004a1e:	f200 808f 	bhi.w	8004b40 <_dtoa_r+0x2e0>
 8004a22:	2b05      	cmp	r3, #5
 8004a24:	bfc4      	itt	gt
 8004a26:	3b04      	subgt	r3, #4
 8004a28:	931e      	strgt	r3, [sp, #120]	; 0x78
 8004a2a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004a2c:	bfc8      	it	gt
 8004a2e:	2500      	movgt	r5, #0
 8004a30:	f1a3 0302 	sub.w	r3, r3, #2
 8004a34:	bfd8      	it	le
 8004a36:	2501      	movle	r5, #1
 8004a38:	2b03      	cmp	r3, #3
 8004a3a:	f200 808d 	bhi.w	8004b58 <_dtoa_r+0x2f8>
 8004a3e:	e8df f003 	tbb	[pc, r3]
 8004a42:	7d7b      	.short	0x7d7b
 8004a44:	6f2f      	.short	0x6f2f
 8004a46:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8004a4a:	441d      	add	r5, r3
 8004a4c:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8004a50:	2820      	cmp	r0, #32
 8004a52:	dd13      	ble.n	8004a7c <_dtoa_r+0x21c>
 8004a54:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8004a58:	9b02      	ldr	r3, [sp, #8]
 8004a5a:	fa08 f800 	lsl.w	r8, r8, r0
 8004a5e:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8004a62:	fa23 f000 	lsr.w	r0, r3, r0
 8004a66:	ea48 0000 	orr.w	r0, r8, r0
 8004a6a:	f7fb fcbb 	bl	80003e4 <__aeabi_ui2d>
 8004a6e:	2301      	movs	r3, #1
 8004a70:	4680      	mov	r8, r0
 8004a72:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8004a76:	3d01      	subs	r5, #1
 8004a78:	9310      	str	r3, [sp, #64]	; 0x40
 8004a7a:	e771      	b.n	8004960 <_dtoa_r+0x100>
 8004a7c:	9b02      	ldr	r3, [sp, #8]
 8004a7e:	f1c0 0020 	rsb	r0, r0, #32
 8004a82:	fa03 f000 	lsl.w	r0, r3, r0
 8004a86:	e7f0      	b.n	8004a6a <_dtoa_r+0x20a>
 8004a88:	2301      	movs	r3, #1
 8004a8a:	e7b0      	b.n	80049ee <_dtoa_r+0x18e>
 8004a8c:	900d      	str	r0, [sp, #52]	; 0x34
 8004a8e:	e7af      	b.n	80049f0 <_dtoa_r+0x190>
 8004a90:	f1ca 0300 	rsb	r3, sl, #0
 8004a94:	9308      	str	r3, [sp, #32]
 8004a96:	2300      	movs	r3, #0
 8004a98:	eba9 090a 	sub.w	r9, r9, sl
 8004a9c:	930c      	str	r3, [sp, #48]	; 0x30
 8004a9e:	e7bc      	b.n	8004a1a <_dtoa_r+0x1ba>
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	9309      	str	r3, [sp, #36]	; 0x24
 8004aa4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	dd74      	ble.n	8004b94 <_dtoa_r+0x334>
 8004aaa:	4698      	mov	r8, r3
 8004aac:	9304      	str	r3, [sp, #16]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004ab2:	6072      	str	r2, [r6, #4]
 8004ab4:	2204      	movs	r2, #4
 8004ab6:	f102 0014 	add.w	r0, r2, #20
 8004aba:	4298      	cmp	r0, r3
 8004abc:	6871      	ldr	r1, [r6, #4]
 8004abe:	d96e      	bls.n	8004b9e <_dtoa_r+0x33e>
 8004ac0:	4620      	mov	r0, r4
 8004ac2:	f000 fcb0 	bl	8005426 <_Balloc>
 8004ac6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004ac8:	6030      	str	r0, [r6, #0]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f1b8 0f0e 	cmp.w	r8, #14
 8004ad0:	9306      	str	r3, [sp, #24]
 8004ad2:	f200 80ed 	bhi.w	8004cb0 <_dtoa_r+0x450>
 8004ad6:	2d00      	cmp	r5, #0
 8004ad8:	f000 80ea 	beq.w	8004cb0 <_dtoa_r+0x450>
 8004adc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004ae0:	f1ba 0f00 	cmp.w	sl, #0
 8004ae4:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8004ae8:	dd77      	ble.n	8004bda <_dtoa_r+0x37a>
 8004aea:	4a28      	ldr	r2, [pc, #160]	; (8004b8c <_dtoa_r+0x32c>)
 8004aec:	f00a 030f 	and.w	r3, sl, #15
 8004af0:	ea4f 162a 	mov.w	r6, sl, asr #4
 8004af4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004af8:	06f0      	lsls	r0, r6, #27
 8004afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004afe:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004b02:	d568      	bpl.n	8004bd6 <_dtoa_r+0x376>
 8004b04:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004b08:	4b21      	ldr	r3, [pc, #132]	; (8004b90 <_dtoa_r+0x330>)
 8004b0a:	2503      	movs	r5, #3
 8004b0c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004b10:	f7fb fe0c 	bl	800072c <__aeabi_ddiv>
 8004b14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004b18:	f006 060f 	and.w	r6, r6, #15
 8004b1c:	4f1c      	ldr	r7, [pc, #112]	; (8004b90 <_dtoa_r+0x330>)
 8004b1e:	e04f      	b.n	8004bc0 <_dtoa_r+0x360>
 8004b20:	2301      	movs	r3, #1
 8004b22:	9309      	str	r3, [sp, #36]	; 0x24
 8004b24:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004b26:	4453      	add	r3, sl
 8004b28:	f103 0801 	add.w	r8, r3, #1
 8004b2c:	9304      	str	r3, [sp, #16]
 8004b2e:	4643      	mov	r3, r8
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	bfb8      	it	lt
 8004b34:	2301      	movlt	r3, #1
 8004b36:	e7ba      	b.n	8004aae <_dtoa_r+0x24e>
 8004b38:	2300      	movs	r3, #0
 8004b3a:	e7b2      	b.n	8004aa2 <_dtoa_r+0x242>
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	e7f0      	b.n	8004b22 <_dtoa_r+0x2c2>
 8004b40:	2501      	movs	r5, #1
 8004b42:	2300      	movs	r3, #0
 8004b44:	9509      	str	r5, [sp, #36]	; 0x24
 8004b46:	931e      	str	r3, [sp, #120]	; 0x78
 8004b48:	f04f 33ff 	mov.w	r3, #4294967295
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	9304      	str	r3, [sp, #16]
 8004b50:	4698      	mov	r8, r3
 8004b52:	2312      	movs	r3, #18
 8004b54:	921f      	str	r2, [sp, #124]	; 0x7c
 8004b56:	e7aa      	b.n	8004aae <_dtoa_r+0x24e>
 8004b58:	2301      	movs	r3, #1
 8004b5a:	9309      	str	r3, [sp, #36]	; 0x24
 8004b5c:	e7f4      	b.n	8004b48 <_dtoa_r+0x2e8>
 8004b5e:	bf00      	nop
 8004b60:	636f4361 	.word	0x636f4361
 8004b64:	3fd287a7 	.word	0x3fd287a7
 8004b68:	8b60c8b3 	.word	0x8b60c8b3
 8004b6c:	3fc68a28 	.word	0x3fc68a28
 8004b70:	509f79fb 	.word	0x509f79fb
 8004b74:	3fd34413 	.word	0x3fd34413
 8004b78:	7ff00000 	.word	0x7ff00000
 8004b7c:	08005f75 	.word	0x08005f75
 8004b80:	08005f6c 	.word	0x08005f6c
 8004b84:	08005f49 	.word	0x08005f49
 8004b88:	3ff80000 	.word	0x3ff80000
 8004b8c:	08005fa8 	.word	0x08005fa8
 8004b90:	08005f80 	.word	0x08005f80
 8004b94:	2301      	movs	r3, #1
 8004b96:	9304      	str	r3, [sp, #16]
 8004b98:	4698      	mov	r8, r3
 8004b9a:	461a      	mov	r2, r3
 8004b9c:	e7da      	b.n	8004b54 <_dtoa_r+0x2f4>
 8004b9e:	3101      	adds	r1, #1
 8004ba0:	6071      	str	r1, [r6, #4]
 8004ba2:	0052      	lsls	r2, r2, #1
 8004ba4:	e787      	b.n	8004ab6 <_dtoa_r+0x256>
 8004ba6:	07f1      	lsls	r1, r6, #31
 8004ba8:	d508      	bpl.n	8004bbc <_dtoa_r+0x35c>
 8004baa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004bae:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004bb2:	f7fb fc91 	bl	80004d8 <__aeabi_dmul>
 8004bb6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004bba:	3501      	adds	r5, #1
 8004bbc:	1076      	asrs	r6, r6, #1
 8004bbe:	3708      	adds	r7, #8
 8004bc0:	2e00      	cmp	r6, #0
 8004bc2:	d1f0      	bne.n	8004ba6 <_dtoa_r+0x346>
 8004bc4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004bc8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004bcc:	f7fb fdae 	bl	800072c <__aeabi_ddiv>
 8004bd0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004bd4:	e01b      	b.n	8004c0e <_dtoa_r+0x3ae>
 8004bd6:	2502      	movs	r5, #2
 8004bd8:	e7a0      	b.n	8004b1c <_dtoa_r+0x2bc>
 8004bda:	f000 80a4 	beq.w	8004d26 <_dtoa_r+0x4c6>
 8004bde:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004be2:	f1ca 0600 	rsb	r6, sl, #0
 8004be6:	4ba0      	ldr	r3, [pc, #640]	; (8004e68 <_dtoa_r+0x608>)
 8004be8:	f006 020f 	and.w	r2, r6, #15
 8004bec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bf4:	f7fb fc70 	bl	80004d8 <__aeabi_dmul>
 8004bf8:	2502      	movs	r5, #2
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004c00:	4f9a      	ldr	r7, [pc, #616]	; (8004e6c <_dtoa_r+0x60c>)
 8004c02:	1136      	asrs	r6, r6, #4
 8004c04:	2e00      	cmp	r6, #0
 8004c06:	f040 8083 	bne.w	8004d10 <_dtoa_r+0x4b0>
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d1e0      	bne.n	8004bd0 <_dtoa_r+0x370>
 8004c0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	f000 808a 	beq.w	8004d2a <_dtoa_r+0x4ca>
 8004c16:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004c1a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004c1e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004c22:	2200      	movs	r2, #0
 8004c24:	4b92      	ldr	r3, [pc, #584]	; (8004e70 <_dtoa_r+0x610>)
 8004c26:	f7fb fec9 	bl	80009bc <__aeabi_dcmplt>
 8004c2a:	2800      	cmp	r0, #0
 8004c2c:	d07d      	beq.n	8004d2a <_dtoa_r+0x4ca>
 8004c2e:	f1b8 0f00 	cmp.w	r8, #0
 8004c32:	d07a      	beq.n	8004d2a <_dtoa_r+0x4ca>
 8004c34:	9b04      	ldr	r3, [sp, #16]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	dd36      	ble.n	8004ca8 <_dtoa_r+0x448>
 8004c3a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004c3e:	2200      	movs	r2, #0
 8004c40:	4b8c      	ldr	r3, [pc, #560]	; (8004e74 <_dtoa_r+0x614>)
 8004c42:	f7fb fc49 	bl	80004d8 <__aeabi_dmul>
 8004c46:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004c4a:	9e04      	ldr	r6, [sp, #16]
 8004c4c:	f10a 37ff 	add.w	r7, sl, #4294967295
 8004c50:	3501      	adds	r5, #1
 8004c52:	4628      	mov	r0, r5
 8004c54:	f7fb fbd6 	bl	8000404 <__aeabi_i2d>
 8004c58:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004c5c:	f7fb fc3c 	bl	80004d8 <__aeabi_dmul>
 8004c60:	2200      	movs	r2, #0
 8004c62:	4b85      	ldr	r3, [pc, #532]	; (8004e78 <_dtoa_r+0x618>)
 8004c64:	f7fb fa82 	bl	800016c <__adddf3>
 8004c68:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8004c6c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004c70:	950b      	str	r5, [sp, #44]	; 0x2c
 8004c72:	2e00      	cmp	r6, #0
 8004c74:	d15c      	bne.n	8004d30 <_dtoa_r+0x4d0>
 8004c76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	4b7f      	ldr	r3, [pc, #508]	; (8004e7c <_dtoa_r+0x61c>)
 8004c7e:	f7fb fa73 	bl	8000168 <__aeabi_dsub>
 8004c82:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004c84:	462b      	mov	r3, r5
 8004c86:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004c8a:	f7fb feb5 	bl	80009f8 <__aeabi_dcmpgt>
 8004c8e:	2800      	cmp	r0, #0
 8004c90:	f040 8281 	bne.w	8005196 <_dtoa_r+0x936>
 8004c94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004c9a:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8004c9e:	f7fb fe8d 	bl	80009bc <__aeabi_dcmplt>
 8004ca2:	2800      	cmp	r0, #0
 8004ca4:	f040 8275 	bne.w	8005192 <_dtoa_r+0x932>
 8004ca8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8004cac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004cb0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	f2c0 814b 	blt.w	8004f4e <_dtoa_r+0x6ee>
 8004cb8:	f1ba 0f0e 	cmp.w	sl, #14
 8004cbc:	f300 8147 	bgt.w	8004f4e <_dtoa_r+0x6ee>
 8004cc0:	4b69      	ldr	r3, [pc, #420]	; (8004e68 <_dtoa_r+0x608>)
 8004cc2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004cce:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	f280 80d7 	bge.w	8004e84 <_dtoa_r+0x624>
 8004cd6:	f1b8 0f00 	cmp.w	r8, #0
 8004cda:	f300 80d3 	bgt.w	8004e84 <_dtoa_r+0x624>
 8004cde:	f040 8257 	bne.w	8005190 <_dtoa_r+0x930>
 8004ce2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	4b64      	ldr	r3, [pc, #400]	; (8004e7c <_dtoa_r+0x61c>)
 8004cea:	f7fb fbf5 	bl	80004d8 <__aeabi_dmul>
 8004cee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004cf2:	f7fb fe77 	bl	80009e4 <__aeabi_dcmpge>
 8004cf6:	4646      	mov	r6, r8
 8004cf8:	4647      	mov	r7, r8
 8004cfa:	2800      	cmp	r0, #0
 8004cfc:	f040 822d 	bne.w	800515a <_dtoa_r+0x8fa>
 8004d00:	9b06      	ldr	r3, [sp, #24]
 8004d02:	9a06      	ldr	r2, [sp, #24]
 8004d04:	1c5d      	adds	r5, r3, #1
 8004d06:	2331      	movs	r3, #49	; 0x31
 8004d08:	f10a 0a01 	add.w	sl, sl, #1
 8004d0c:	7013      	strb	r3, [r2, #0]
 8004d0e:	e228      	b.n	8005162 <_dtoa_r+0x902>
 8004d10:	07f2      	lsls	r2, r6, #31
 8004d12:	d505      	bpl.n	8004d20 <_dtoa_r+0x4c0>
 8004d14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d18:	f7fb fbde 	bl	80004d8 <__aeabi_dmul>
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	3501      	adds	r5, #1
 8004d20:	1076      	asrs	r6, r6, #1
 8004d22:	3708      	adds	r7, #8
 8004d24:	e76e      	b.n	8004c04 <_dtoa_r+0x3a4>
 8004d26:	2502      	movs	r5, #2
 8004d28:	e771      	b.n	8004c0e <_dtoa_r+0x3ae>
 8004d2a:	4657      	mov	r7, sl
 8004d2c:	4646      	mov	r6, r8
 8004d2e:	e790      	b.n	8004c52 <_dtoa_r+0x3f2>
 8004d30:	4b4d      	ldr	r3, [pc, #308]	; (8004e68 <_dtoa_r+0x608>)
 8004d32:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004d36:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8004d3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d048      	beq.n	8004dd2 <_dtoa_r+0x572>
 8004d40:	4602      	mov	r2, r0
 8004d42:	460b      	mov	r3, r1
 8004d44:	2000      	movs	r0, #0
 8004d46:	494e      	ldr	r1, [pc, #312]	; (8004e80 <_dtoa_r+0x620>)
 8004d48:	f7fb fcf0 	bl	800072c <__aeabi_ddiv>
 8004d4c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004d50:	f7fb fa0a 	bl	8000168 <__aeabi_dsub>
 8004d54:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004d58:	9d06      	ldr	r5, [sp, #24]
 8004d5a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004d5e:	f7fb fe6b 	bl	8000a38 <__aeabi_d2iz>
 8004d62:	9011      	str	r0, [sp, #68]	; 0x44
 8004d64:	f7fb fb4e 	bl	8000404 <__aeabi_i2d>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	460b      	mov	r3, r1
 8004d6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004d70:	f7fb f9fa 	bl	8000168 <__aeabi_dsub>
 8004d74:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004d76:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004d7a:	3330      	adds	r3, #48	; 0x30
 8004d7c:	f805 3b01 	strb.w	r3, [r5], #1
 8004d80:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004d84:	f7fb fe1a 	bl	80009bc <__aeabi_dcmplt>
 8004d88:	2800      	cmp	r0, #0
 8004d8a:	d163      	bne.n	8004e54 <_dtoa_r+0x5f4>
 8004d8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004d90:	2000      	movs	r0, #0
 8004d92:	4937      	ldr	r1, [pc, #220]	; (8004e70 <_dtoa_r+0x610>)
 8004d94:	f7fb f9e8 	bl	8000168 <__aeabi_dsub>
 8004d98:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004d9c:	f7fb fe0e 	bl	80009bc <__aeabi_dcmplt>
 8004da0:	2800      	cmp	r0, #0
 8004da2:	f040 80b5 	bne.w	8004f10 <_dtoa_r+0x6b0>
 8004da6:	9b06      	ldr	r3, [sp, #24]
 8004da8:	1aeb      	subs	r3, r5, r3
 8004daa:	429e      	cmp	r6, r3
 8004dac:	f77f af7c 	ble.w	8004ca8 <_dtoa_r+0x448>
 8004db0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004db4:	2200      	movs	r2, #0
 8004db6:	4b2f      	ldr	r3, [pc, #188]	; (8004e74 <_dtoa_r+0x614>)
 8004db8:	f7fb fb8e 	bl	80004d8 <__aeabi_dmul>
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004dc2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004dc6:	4b2b      	ldr	r3, [pc, #172]	; (8004e74 <_dtoa_r+0x614>)
 8004dc8:	f7fb fb86 	bl	80004d8 <__aeabi_dmul>
 8004dcc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004dd0:	e7c3      	b.n	8004d5a <_dtoa_r+0x4fa>
 8004dd2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004dd6:	f7fb fb7f 	bl	80004d8 <__aeabi_dmul>
 8004dda:	9b06      	ldr	r3, [sp, #24]
 8004ddc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004de0:	199d      	adds	r5, r3, r6
 8004de2:	461e      	mov	r6, r3
 8004de4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004de8:	f7fb fe26 	bl	8000a38 <__aeabi_d2iz>
 8004dec:	9011      	str	r0, [sp, #68]	; 0x44
 8004dee:	f7fb fb09 	bl	8000404 <__aeabi_i2d>
 8004df2:	4602      	mov	r2, r0
 8004df4:	460b      	mov	r3, r1
 8004df6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004dfa:	f7fb f9b5 	bl	8000168 <__aeabi_dsub>
 8004dfe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004e00:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004e04:	3330      	adds	r3, #48	; 0x30
 8004e06:	f806 3b01 	strb.w	r3, [r6], #1
 8004e0a:	42ae      	cmp	r6, r5
 8004e0c:	f04f 0200 	mov.w	r2, #0
 8004e10:	d124      	bne.n	8004e5c <_dtoa_r+0x5fc>
 8004e12:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004e16:	4b1a      	ldr	r3, [pc, #104]	; (8004e80 <_dtoa_r+0x620>)
 8004e18:	f7fb f9a8 	bl	800016c <__adddf3>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	460b      	mov	r3, r1
 8004e20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e24:	f7fb fde8 	bl	80009f8 <__aeabi_dcmpgt>
 8004e28:	2800      	cmp	r0, #0
 8004e2a:	d171      	bne.n	8004f10 <_dtoa_r+0x6b0>
 8004e2c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004e30:	2000      	movs	r0, #0
 8004e32:	4913      	ldr	r1, [pc, #76]	; (8004e80 <_dtoa_r+0x620>)
 8004e34:	f7fb f998 	bl	8000168 <__aeabi_dsub>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	460b      	mov	r3, r1
 8004e3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e40:	f7fb fdbc 	bl	80009bc <__aeabi_dcmplt>
 8004e44:	2800      	cmp	r0, #0
 8004e46:	f43f af2f 	beq.w	8004ca8 <_dtoa_r+0x448>
 8004e4a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004e4e:	1e6a      	subs	r2, r5, #1
 8004e50:	2b30      	cmp	r3, #48	; 0x30
 8004e52:	d001      	beq.n	8004e58 <_dtoa_r+0x5f8>
 8004e54:	46ba      	mov	sl, r7
 8004e56:	e04a      	b.n	8004eee <_dtoa_r+0x68e>
 8004e58:	4615      	mov	r5, r2
 8004e5a:	e7f6      	b.n	8004e4a <_dtoa_r+0x5ea>
 8004e5c:	4b05      	ldr	r3, [pc, #20]	; (8004e74 <_dtoa_r+0x614>)
 8004e5e:	f7fb fb3b 	bl	80004d8 <__aeabi_dmul>
 8004e62:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004e66:	e7bd      	b.n	8004de4 <_dtoa_r+0x584>
 8004e68:	08005fa8 	.word	0x08005fa8
 8004e6c:	08005f80 	.word	0x08005f80
 8004e70:	3ff00000 	.word	0x3ff00000
 8004e74:	40240000 	.word	0x40240000
 8004e78:	401c0000 	.word	0x401c0000
 8004e7c:	40140000 	.word	0x40140000
 8004e80:	3fe00000 	.word	0x3fe00000
 8004e84:	9d06      	ldr	r5, [sp, #24]
 8004e86:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004e8a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004e8e:	4630      	mov	r0, r6
 8004e90:	4639      	mov	r1, r7
 8004e92:	f7fb fc4b 	bl	800072c <__aeabi_ddiv>
 8004e96:	f7fb fdcf 	bl	8000a38 <__aeabi_d2iz>
 8004e9a:	4681      	mov	r9, r0
 8004e9c:	f7fb fab2 	bl	8000404 <__aeabi_i2d>
 8004ea0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004ea4:	f7fb fb18 	bl	80004d8 <__aeabi_dmul>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	460b      	mov	r3, r1
 8004eac:	4630      	mov	r0, r6
 8004eae:	4639      	mov	r1, r7
 8004eb0:	f7fb f95a 	bl	8000168 <__aeabi_dsub>
 8004eb4:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8004eb8:	f805 6b01 	strb.w	r6, [r5], #1
 8004ebc:	9e06      	ldr	r6, [sp, #24]
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	1bae      	subs	r6, r5, r6
 8004ec2:	45b0      	cmp	r8, r6
 8004ec4:	460b      	mov	r3, r1
 8004ec6:	d135      	bne.n	8004f34 <_dtoa_r+0x6d4>
 8004ec8:	f7fb f950 	bl	800016c <__adddf3>
 8004ecc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004ed0:	4606      	mov	r6, r0
 8004ed2:	460f      	mov	r7, r1
 8004ed4:	f7fb fd90 	bl	80009f8 <__aeabi_dcmpgt>
 8004ed8:	b9c8      	cbnz	r0, 8004f0e <_dtoa_r+0x6ae>
 8004eda:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004ede:	4630      	mov	r0, r6
 8004ee0:	4639      	mov	r1, r7
 8004ee2:	f7fb fd61 	bl	80009a8 <__aeabi_dcmpeq>
 8004ee6:	b110      	cbz	r0, 8004eee <_dtoa_r+0x68e>
 8004ee8:	f019 0f01 	tst.w	r9, #1
 8004eec:	d10f      	bne.n	8004f0e <_dtoa_r+0x6ae>
 8004eee:	4659      	mov	r1, fp
 8004ef0:	4620      	mov	r0, r4
 8004ef2:	f000 facc 	bl	800548e <_Bfree>
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004efa:	702b      	strb	r3, [r5, #0]
 8004efc:	f10a 0301 	add.w	r3, sl, #1
 8004f00:	6013      	str	r3, [r2, #0]
 8004f02:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	f43f acf3 	beq.w	80048f0 <_dtoa_r+0x90>
 8004f0a:	601d      	str	r5, [r3, #0]
 8004f0c:	e4f0      	b.n	80048f0 <_dtoa_r+0x90>
 8004f0e:	4657      	mov	r7, sl
 8004f10:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8004f14:	1e6b      	subs	r3, r5, #1
 8004f16:	2a39      	cmp	r2, #57	; 0x39
 8004f18:	d106      	bne.n	8004f28 <_dtoa_r+0x6c8>
 8004f1a:	9a06      	ldr	r2, [sp, #24]
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	d107      	bne.n	8004f30 <_dtoa_r+0x6d0>
 8004f20:	2330      	movs	r3, #48	; 0x30
 8004f22:	7013      	strb	r3, [r2, #0]
 8004f24:	4613      	mov	r3, r2
 8004f26:	3701      	adds	r7, #1
 8004f28:	781a      	ldrb	r2, [r3, #0]
 8004f2a:	3201      	adds	r2, #1
 8004f2c:	701a      	strb	r2, [r3, #0]
 8004f2e:	e791      	b.n	8004e54 <_dtoa_r+0x5f4>
 8004f30:	461d      	mov	r5, r3
 8004f32:	e7ed      	b.n	8004f10 <_dtoa_r+0x6b0>
 8004f34:	2200      	movs	r2, #0
 8004f36:	4b99      	ldr	r3, [pc, #612]	; (800519c <_dtoa_r+0x93c>)
 8004f38:	f7fb face 	bl	80004d8 <__aeabi_dmul>
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	2300      	movs	r3, #0
 8004f40:	4606      	mov	r6, r0
 8004f42:	460f      	mov	r7, r1
 8004f44:	f7fb fd30 	bl	80009a8 <__aeabi_dcmpeq>
 8004f48:	2800      	cmp	r0, #0
 8004f4a:	d09e      	beq.n	8004e8a <_dtoa_r+0x62a>
 8004f4c:	e7cf      	b.n	8004eee <_dtoa_r+0x68e>
 8004f4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f50:	2a00      	cmp	r2, #0
 8004f52:	f000 8088 	beq.w	8005066 <_dtoa_r+0x806>
 8004f56:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004f58:	2a01      	cmp	r2, #1
 8004f5a:	dc6d      	bgt.n	8005038 <_dtoa_r+0x7d8>
 8004f5c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004f5e:	2a00      	cmp	r2, #0
 8004f60:	d066      	beq.n	8005030 <_dtoa_r+0x7d0>
 8004f62:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004f66:	464d      	mov	r5, r9
 8004f68:	9e08      	ldr	r6, [sp, #32]
 8004f6a:	9a07      	ldr	r2, [sp, #28]
 8004f6c:	2101      	movs	r1, #1
 8004f6e:	441a      	add	r2, r3
 8004f70:	4620      	mov	r0, r4
 8004f72:	4499      	add	r9, r3
 8004f74:	9207      	str	r2, [sp, #28]
 8004f76:	f000 fb2a 	bl	80055ce <__i2b>
 8004f7a:	4607      	mov	r7, r0
 8004f7c:	2d00      	cmp	r5, #0
 8004f7e:	dd0b      	ble.n	8004f98 <_dtoa_r+0x738>
 8004f80:	9b07      	ldr	r3, [sp, #28]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	dd08      	ble.n	8004f98 <_dtoa_r+0x738>
 8004f86:	42ab      	cmp	r3, r5
 8004f88:	bfa8      	it	ge
 8004f8a:	462b      	movge	r3, r5
 8004f8c:	9a07      	ldr	r2, [sp, #28]
 8004f8e:	eba9 0903 	sub.w	r9, r9, r3
 8004f92:	1aed      	subs	r5, r5, r3
 8004f94:	1ad3      	subs	r3, r2, r3
 8004f96:	9307      	str	r3, [sp, #28]
 8004f98:	9b08      	ldr	r3, [sp, #32]
 8004f9a:	b1eb      	cbz	r3, 8004fd8 <_dtoa_r+0x778>
 8004f9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d065      	beq.n	800506e <_dtoa_r+0x80e>
 8004fa2:	b18e      	cbz	r6, 8004fc8 <_dtoa_r+0x768>
 8004fa4:	4639      	mov	r1, r7
 8004fa6:	4632      	mov	r2, r6
 8004fa8:	4620      	mov	r0, r4
 8004faa:	f000 fbaf 	bl	800570c <__pow5mult>
 8004fae:	465a      	mov	r2, fp
 8004fb0:	4601      	mov	r1, r0
 8004fb2:	4607      	mov	r7, r0
 8004fb4:	4620      	mov	r0, r4
 8004fb6:	f000 fb13 	bl	80055e0 <__multiply>
 8004fba:	4659      	mov	r1, fp
 8004fbc:	900a      	str	r0, [sp, #40]	; 0x28
 8004fbe:	4620      	mov	r0, r4
 8004fc0:	f000 fa65 	bl	800548e <_Bfree>
 8004fc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004fc6:	469b      	mov	fp, r3
 8004fc8:	9b08      	ldr	r3, [sp, #32]
 8004fca:	1b9a      	subs	r2, r3, r6
 8004fcc:	d004      	beq.n	8004fd8 <_dtoa_r+0x778>
 8004fce:	4659      	mov	r1, fp
 8004fd0:	4620      	mov	r0, r4
 8004fd2:	f000 fb9b 	bl	800570c <__pow5mult>
 8004fd6:	4683      	mov	fp, r0
 8004fd8:	2101      	movs	r1, #1
 8004fda:	4620      	mov	r0, r4
 8004fdc:	f000 faf7 	bl	80055ce <__i2b>
 8004fe0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004fe2:	4606      	mov	r6, r0
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	f000 81c6 	beq.w	8005376 <_dtoa_r+0xb16>
 8004fea:	461a      	mov	r2, r3
 8004fec:	4601      	mov	r1, r0
 8004fee:	4620      	mov	r0, r4
 8004ff0:	f000 fb8c 	bl	800570c <__pow5mult>
 8004ff4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004ff6:	4606      	mov	r6, r0
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	dc3e      	bgt.n	800507a <_dtoa_r+0x81a>
 8004ffc:	9b02      	ldr	r3, [sp, #8]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d137      	bne.n	8005072 <_dtoa_r+0x812>
 8005002:	9b03      	ldr	r3, [sp, #12]
 8005004:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005008:	2b00      	cmp	r3, #0
 800500a:	d134      	bne.n	8005076 <_dtoa_r+0x816>
 800500c:	9b03      	ldr	r3, [sp, #12]
 800500e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005012:	0d1b      	lsrs	r3, r3, #20
 8005014:	051b      	lsls	r3, r3, #20
 8005016:	b12b      	cbz	r3, 8005024 <_dtoa_r+0x7c4>
 8005018:	9b07      	ldr	r3, [sp, #28]
 800501a:	f109 0901 	add.w	r9, r9, #1
 800501e:	3301      	adds	r3, #1
 8005020:	9307      	str	r3, [sp, #28]
 8005022:	2301      	movs	r3, #1
 8005024:	9308      	str	r3, [sp, #32]
 8005026:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005028:	2b00      	cmp	r3, #0
 800502a:	d128      	bne.n	800507e <_dtoa_r+0x81e>
 800502c:	2001      	movs	r0, #1
 800502e:	e02e      	b.n	800508e <_dtoa_r+0x82e>
 8005030:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005032:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005036:	e796      	b.n	8004f66 <_dtoa_r+0x706>
 8005038:	9b08      	ldr	r3, [sp, #32]
 800503a:	f108 36ff 	add.w	r6, r8, #4294967295
 800503e:	42b3      	cmp	r3, r6
 8005040:	bfb7      	itett	lt
 8005042:	9b08      	ldrlt	r3, [sp, #32]
 8005044:	1b9e      	subge	r6, r3, r6
 8005046:	1af2      	sublt	r2, r6, r3
 8005048:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 800504a:	bfbf      	itttt	lt
 800504c:	9608      	strlt	r6, [sp, #32]
 800504e:	189b      	addlt	r3, r3, r2
 8005050:	930c      	strlt	r3, [sp, #48]	; 0x30
 8005052:	2600      	movlt	r6, #0
 8005054:	f1b8 0f00 	cmp.w	r8, #0
 8005058:	bfb9      	ittee	lt
 800505a:	eba9 0508 	sublt.w	r5, r9, r8
 800505e:	2300      	movlt	r3, #0
 8005060:	464d      	movge	r5, r9
 8005062:	4643      	movge	r3, r8
 8005064:	e781      	b.n	8004f6a <_dtoa_r+0x70a>
 8005066:	9e08      	ldr	r6, [sp, #32]
 8005068:	464d      	mov	r5, r9
 800506a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800506c:	e786      	b.n	8004f7c <_dtoa_r+0x71c>
 800506e:	9a08      	ldr	r2, [sp, #32]
 8005070:	e7ad      	b.n	8004fce <_dtoa_r+0x76e>
 8005072:	2300      	movs	r3, #0
 8005074:	e7d6      	b.n	8005024 <_dtoa_r+0x7c4>
 8005076:	9b02      	ldr	r3, [sp, #8]
 8005078:	e7d4      	b.n	8005024 <_dtoa_r+0x7c4>
 800507a:	2300      	movs	r3, #0
 800507c:	9308      	str	r3, [sp, #32]
 800507e:	6933      	ldr	r3, [r6, #16]
 8005080:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005084:	6918      	ldr	r0, [r3, #16]
 8005086:	f000 fa54 	bl	8005532 <__hi0bits>
 800508a:	f1c0 0020 	rsb	r0, r0, #32
 800508e:	9b07      	ldr	r3, [sp, #28]
 8005090:	4418      	add	r0, r3
 8005092:	f010 001f 	ands.w	r0, r0, #31
 8005096:	d047      	beq.n	8005128 <_dtoa_r+0x8c8>
 8005098:	f1c0 0320 	rsb	r3, r0, #32
 800509c:	2b04      	cmp	r3, #4
 800509e:	dd3b      	ble.n	8005118 <_dtoa_r+0x8b8>
 80050a0:	9b07      	ldr	r3, [sp, #28]
 80050a2:	f1c0 001c 	rsb	r0, r0, #28
 80050a6:	4481      	add	r9, r0
 80050a8:	4405      	add	r5, r0
 80050aa:	4403      	add	r3, r0
 80050ac:	9307      	str	r3, [sp, #28]
 80050ae:	f1b9 0f00 	cmp.w	r9, #0
 80050b2:	dd05      	ble.n	80050c0 <_dtoa_r+0x860>
 80050b4:	4659      	mov	r1, fp
 80050b6:	464a      	mov	r2, r9
 80050b8:	4620      	mov	r0, r4
 80050ba:	f000 fb75 	bl	80057a8 <__lshift>
 80050be:	4683      	mov	fp, r0
 80050c0:	9b07      	ldr	r3, [sp, #28]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	dd05      	ble.n	80050d2 <_dtoa_r+0x872>
 80050c6:	4631      	mov	r1, r6
 80050c8:	461a      	mov	r2, r3
 80050ca:	4620      	mov	r0, r4
 80050cc:	f000 fb6c 	bl	80057a8 <__lshift>
 80050d0:	4606      	mov	r6, r0
 80050d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80050d4:	b353      	cbz	r3, 800512c <_dtoa_r+0x8cc>
 80050d6:	4631      	mov	r1, r6
 80050d8:	4658      	mov	r0, fp
 80050da:	f000 fbb9 	bl	8005850 <__mcmp>
 80050de:	2800      	cmp	r0, #0
 80050e0:	da24      	bge.n	800512c <_dtoa_r+0x8cc>
 80050e2:	2300      	movs	r3, #0
 80050e4:	4659      	mov	r1, fp
 80050e6:	220a      	movs	r2, #10
 80050e8:	4620      	mov	r0, r4
 80050ea:	f000 f9e7 	bl	80054bc <__multadd>
 80050ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050f0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80050f4:	4683      	mov	fp, r0
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	f000 8144 	beq.w	8005384 <_dtoa_r+0xb24>
 80050fc:	2300      	movs	r3, #0
 80050fe:	4639      	mov	r1, r7
 8005100:	220a      	movs	r2, #10
 8005102:	4620      	mov	r0, r4
 8005104:	f000 f9da 	bl	80054bc <__multadd>
 8005108:	9b04      	ldr	r3, [sp, #16]
 800510a:	4607      	mov	r7, r0
 800510c:	2b00      	cmp	r3, #0
 800510e:	dc4d      	bgt.n	80051ac <_dtoa_r+0x94c>
 8005110:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005112:	2b02      	cmp	r3, #2
 8005114:	dd4a      	ble.n	80051ac <_dtoa_r+0x94c>
 8005116:	e011      	b.n	800513c <_dtoa_r+0x8dc>
 8005118:	d0c9      	beq.n	80050ae <_dtoa_r+0x84e>
 800511a:	9a07      	ldr	r2, [sp, #28]
 800511c:	331c      	adds	r3, #28
 800511e:	441a      	add	r2, r3
 8005120:	4499      	add	r9, r3
 8005122:	441d      	add	r5, r3
 8005124:	4613      	mov	r3, r2
 8005126:	e7c1      	b.n	80050ac <_dtoa_r+0x84c>
 8005128:	4603      	mov	r3, r0
 800512a:	e7f6      	b.n	800511a <_dtoa_r+0x8ba>
 800512c:	f1b8 0f00 	cmp.w	r8, #0
 8005130:	dc36      	bgt.n	80051a0 <_dtoa_r+0x940>
 8005132:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005134:	2b02      	cmp	r3, #2
 8005136:	dd33      	ble.n	80051a0 <_dtoa_r+0x940>
 8005138:	f8cd 8010 	str.w	r8, [sp, #16]
 800513c:	9b04      	ldr	r3, [sp, #16]
 800513e:	b963      	cbnz	r3, 800515a <_dtoa_r+0x8fa>
 8005140:	4631      	mov	r1, r6
 8005142:	2205      	movs	r2, #5
 8005144:	4620      	mov	r0, r4
 8005146:	f000 f9b9 	bl	80054bc <__multadd>
 800514a:	4601      	mov	r1, r0
 800514c:	4606      	mov	r6, r0
 800514e:	4658      	mov	r0, fp
 8005150:	f000 fb7e 	bl	8005850 <__mcmp>
 8005154:	2800      	cmp	r0, #0
 8005156:	f73f add3 	bgt.w	8004d00 <_dtoa_r+0x4a0>
 800515a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800515c:	9d06      	ldr	r5, [sp, #24]
 800515e:	ea6f 0a03 	mvn.w	sl, r3
 8005162:	f04f 0900 	mov.w	r9, #0
 8005166:	4631      	mov	r1, r6
 8005168:	4620      	mov	r0, r4
 800516a:	f000 f990 	bl	800548e <_Bfree>
 800516e:	2f00      	cmp	r7, #0
 8005170:	f43f aebd 	beq.w	8004eee <_dtoa_r+0x68e>
 8005174:	f1b9 0f00 	cmp.w	r9, #0
 8005178:	d005      	beq.n	8005186 <_dtoa_r+0x926>
 800517a:	45b9      	cmp	r9, r7
 800517c:	d003      	beq.n	8005186 <_dtoa_r+0x926>
 800517e:	4649      	mov	r1, r9
 8005180:	4620      	mov	r0, r4
 8005182:	f000 f984 	bl	800548e <_Bfree>
 8005186:	4639      	mov	r1, r7
 8005188:	4620      	mov	r0, r4
 800518a:	f000 f980 	bl	800548e <_Bfree>
 800518e:	e6ae      	b.n	8004eee <_dtoa_r+0x68e>
 8005190:	2600      	movs	r6, #0
 8005192:	4637      	mov	r7, r6
 8005194:	e7e1      	b.n	800515a <_dtoa_r+0x8fa>
 8005196:	46ba      	mov	sl, r7
 8005198:	4637      	mov	r7, r6
 800519a:	e5b1      	b.n	8004d00 <_dtoa_r+0x4a0>
 800519c:	40240000 	.word	0x40240000
 80051a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051a2:	f8cd 8010 	str.w	r8, [sp, #16]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	f000 80f3 	beq.w	8005392 <_dtoa_r+0xb32>
 80051ac:	2d00      	cmp	r5, #0
 80051ae:	dd05      	ble.n	80051bc <_dtoa_r+0x95c>
 80051b0:	4639      	mov	r1, r7
 80051b2:	462a      	mov	r2, r5
 80051b4:	4620      	mov	r0, r4
 80051b6:	f000 faf7 	bl	80057a8 <__lshift>
 80051ba:	4607      	mov	r7, r0
 80051bc:	9b08      	ldr	r3, [sp, #32]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d04c      	beq.n	800525c <_dtoa_r+0x9fc>
 80051c2:	6879      	ldr	r1, [r7, #4]
 80051c4:	4620      	mov	r0, r4
 80051c6:	f000 f92e 	bl	8005426 <_Balloc>
 80051ca:	4605      	mov	r5, r0
 80051cc:	693a      	ldr	r2, [r7, #16]
 80051ce:	f107 010c 	add.w	r1, r7, #12
 80051d2:	3202      	adds	r2, #2
 80051d4:	0092      	lsls	r2, r2, #2
 80051d6:	300c      	adds	r0, #12
 80051d8:	f000 f91a 	bl	8005410 <memcpy>
 80051dc:	2201      	movs	r2, #1
 80051de:	4629      	mov	r1, r5
 80051e0:	4620      	mov	r0, r4
 80051e2:	f000 fae1 	bl	80057a8 <__lshift>
 80051e6:	46b9      	mov	r9, r7
 80051e8:	4607      	mov	r7, r0
 80051ea:	9b06      	ldr	r3, [sp, #24]
 80051ec:	9307      	str	r3, [sp, #28]
 80051ee:	9b02      	ldr	r3, [sp, #8]
 80051f0:	f003 0301 	and.w	r3, r3, #1
 80051f4:	9308      	str	r3, [sp, #32]
 80051f6:	4631      	mov	r1, r6
 80051f8:	4658      	mov	r0, fp
 80051fa:	f7ff faa1 	bl	8004740 <quorem>
 80051fe:	4649      	mov	r1, r9
 8005200:	4605      	mov	r5, r0
 8005202:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005206:	4658      	mov	r0, fp
 8005208:	f000 fb22 	bl	8005850 <__mcmp>
 800520c:	463a      	mov	r2, r7
 800520e:	9002      	str	r0, [sp, #8]
 8005210:	4631      	mov	r1, r6
 8005212:	4620      	mov	r0, r4
 8005214:	f000 fb36 	bl	8005884 <__mdiff>
 8005218:	68c3      	ldr	r3, [r0, #12]
 800521a:	4602      	mov	r2, r0
 800521c:	bb03      	cbnz	r3, 8005260 <_dtoa_r+0xa00>
 800521e:	4601      	mov	r1, r0
 8005220:	9009      	str	r0, [sp, #36]	; 0x24
 8005222:	4658      	mov	r0, fp
 8005224:	f000 fb14 	bl	8005850 <__mcmp>
 8005228:	4603      	mov	r3, r0
 800522a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800522c:	4611      	mov	r1, r2
 800522e:	4620      	mov	r0, r4
 8005230:	9309      	str	r3, [sp, #36]	; 0x24
 8005232:	f000 f92c 	bl	800548e <_Bfree>
 8005236:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005238:	b9a3      	cbnz	r3, 8005264 <_dtoa_r+0xa04>
 800523a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800523c:	b992      	cbnz	r2, 8005264 <_dtoa_r+0xa04>
 800523e:	9a08      	ldr	r2, [sp, #32]
 8005240:	b982      	cbnz	r2, 8005264 <_dtoa_r+0xa04>
 8005242:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005246:	d029      	beq.n	800529c <_dtoa_r+0xa3c>
 8005248:	9b02      	ldr	r3, [sp, #8]
 800524a:	2b00      	cmp	r3, #0
 800524c:	dd01      	ble.n	8005252 <_dtoa_r+0x9f2>
 800524e:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8005252:	9b07      	ldr	r3, [sp, #28]
 8005254:	1c5d      	adds	r5, r3, #1
 8005256:	f883 8000 	strb.w	r8, [r3]
 800525a:	e784      	b.n	8005166 <_dtoa_r+0x906>
 800525c:	4638      	mov	r0, r7
 800525e:	e7c2      	b.n	80051e6 <_dtoa_r+0x986>
 8005260:	2301      	movs	r3, #1
 8005262:	e7e3      	b.n	800522c <_dtoa_r+0x9cc>
 8005264:	9a02      	ldr	r2, [sp, #8]
 8005266:	2a00      	cmp	r2, #0
 8005268:	db04      	blt.n	8005274 <_dtoa_r+0xa14>
 800526a:	d123      	bne.n	80052b4 <_dtoa_r+0xa54>
 800526c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800526e:	bb0a      	cbnz	r2, 80052b4 <_dtoa_r+0xa54>
 8005270:	9a08      	ldr	r2, [sp, #32]
 8005272:	b9fa      	cbnz	r2, 80052b4 <_dtoa_r+0xa54>
 8005274:	2b00      	cmp	r3, #0
 8005276:	ddec      	ble.n	8005252 <_dtoa_r+0x9f2>
 8005278:	4659      	mov	r1, fp
 800527a:	2201      	movs	r2, #1
 800527c:	4620      	mov	r0, r4
 800527e:	f000 fa93 	bl	80057a8 <__lshift>
 8005282:	4631      	mov	r1, r6
 8005284:	4683      	mov	fp, r0
 8005286:	f000 fae3 	bl	8005850 <__mcmp>
 800528a:	2800      	cmp	r0, #0
 800528c:	dc03      	bgt.n	8005296 <_dtoa_r+0xa36>
 800528e:	d1e0      	bne.n	8005252 <_dtoa_r+0x9f2>
 8005290:	f018 0f01 	tst.w	r8, #1
 8005294:	d0dd      	beq.n	8005252 <_dtoa_r+0x9f2>
 8005296:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800529a:	d1d8      	bne.n	800524e <_dtoa_r+0x9ee>
 800529c:	9b07      	ldr	r3, [sp, #28]
 800529e:	9a07      	ldr	r2, [sp, #28]
 80052a0:	1c5d      	adds	r5, r3, #1
 80052a2:	2339      	movs	r3, #57	; 0x39
 80052a4:	7013      	strb	r3, [r2, #0]
 80052a6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80052aa:	1e6a      	subs	r2, r5, #1
 80052ac:	2b39      	cmp	r3, #57	; 0x39
 80052ae:	d04d      	beq.n	800534c <_dtoa_r+0xaec>
 80052b0:	3301      	adds	r3, #1
 80052b2:	e052      	b.n	800535a <_dtoa_r+0xafa>
 80052b4:	9a07      	ldr	r2, [sp, #28]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	f102 0501 	add.w	r5, r2, #1
 80052bc:	dd06      	ble.n	80052cc <_dtoa_r+0xa6c>
 80052be:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80052c2:	d0eb      	beq.n	800529c <_dtoa_r+0xa3c>
 80052c4:	f108 0801 	add.w	r8, r8, #1
 80052c8:	9b07      	ldr	r3, [sp, #28]
 80052ca:	e7c4      	b.n	8005256 <_dtoa_r+0x9f6>
 80052cc:	9b06      	ldr	r3, [sp, #24]
 80052ce:	9a04      	ldr	r2, [sp, #16]
 80052d0:	1aeb      	subs	r3, r5, r3
 80052d2:	4293      	cmp	r3, r2
 80052d4:	f805 8c01 	strb.w	r8, [r5, #-1]
 80052d8:	d021      	beq.n	800531e <_dtoa_r+0xabe>
 80052da:	4659      	mov	r1, fp
 80052dc:	2300      	movs	r3, #0
 80052de:	220a      	movs	r2, #10
 80052e0:	4620      	mov	r0, r4
 80052e2:	f000 f8eb 	bl	80054bc <__multadd>
 80052e6:	45b9      	cmp	r9, r7
 80052e8:	4683      	mov	fp, r0
 80052ea:	f04f 0300 	mov.w	r3, #0
 80052ee:	f04f 020a 	mov.w	r2, #10
 80052f2:	4649      	mov	r1, r9
 80052f4:	4620      	mov	r0, r4
 80052f6:	d105      	bne.n	8005304 <_dtoa_r+0xaa4>
 80052f8:	f000 f8e0 	bl	80054bc <__multadd>
 80052fc:	4681      	mov	r9, r0
 80052fe:	4607      	mov	r7, r0
 8005300:	9507      	str	r5, [sp, #28]
 8005302:	e778      	b.n	80051f6 <_dtoa_r+0x996>
 8005304:	f000 f8da 	bl	80054bc <__multadd>
 8005308:	4639      	mov	r1, r7
 800530a:	4681      	mov	r9, r0
 800530c:	2300      	movs	r3, #0
 800530e:	220a      	movs	r2, #10
 8005310:	4620      	mov	r0, r4
 8005312:	f000 f8d3 	bl	80054bc <__multadd>
 8005316:	4607      	mov	r7, r0
 8005318:	e7f2      	b.n	8005300 <_dtoa_r+0xaa0>
 800531a:	f04f 0900 	mov.w	r9, #0
 800531e:	4659      	mov	r1, fp
 8005320:	2201      	movs	r2, #1
 8005322:	4620      	mov	r0, r4
 8005324:	f000 fa40 	bl	80057a8 <__lshift>
 8005328:	4631      	mov	r1, r6
 800532a:	4683      	mov	fp, r0
 800532c:	f000 fa90 	bl	8005850 <__mcmp>
 8005330:	2800      	cmp	r0, #0
 8005332:	dcb8      	bgt.n	80052a6 <_dtoa_r+0xa46>
 8005334:	d102      	bne.n	800533c <_dtoa_r+0xadc>
 8005336:	f018 0f01 	tst.w	r8, #1
 800533a:	d1b4      	bne.n	80052a6 <_dtoa_r+0xa46>
 800533c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005340:	1e6a      	subs	r2, r5, #1
 8005342:	2b30      	cmp	r3, #48	; 0x30
 8005344:	f47f af0f 	bne.w	8005166 <_dtoa_r+0x906>
 8005348:	4615      	mov	r5, r2
 800534a:	e7f7      	b.n	800533c <_dtoa_r+0xadc>
 800534c:	9b06      	ldr	r3, [sp, #24]
 800534e:	4293      	cmp	r3, r2
 8005350:	d105      	bne.n	800535e <_dtoa_r+0xafe>
 8005352:	2331      	movs	r3, #49	; 0x31
 8005354:	9a06      	ldr	r2, [sp, #24]
 8005356:	f10a 0a01 	add.w	sl, sl, #1
 800535a:	7013      	strb	r3, [r2, #0]
 800535c:	e703      	b.n	8005166 <_dtoa_r+0x906>
 800535e:	4615      	mov	r5, r2
 8005360:	e7a1      	b.n	80052a6 <_dtoa_r+0xa46>
 8005362:	4b17      	ldr	r3, [pc, #92]	; (80053c0 <_dtoa_r+0xb60>)
 8005364:	f7ff bae1 	b.w	800492a <_dtoa_r+0xca>
 8005368:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800536a:	2b00      	cmp	r3, #0
 800536c:	f47f aabb 	bne.w	80048e6 <_dtoa_r+0x86>
 8005370:	4b14      	ldr	r3, [pc, #80]	; (80053c4 <_dtoa_r+0xb64>)
 8005372:	f7ff bada 	b.w	800492a <_dtoa_r+0xca>
 8005376:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005378:	2b01      	cmp	r3, #1
 800537a:	f77f ae3f 	ble.w	8004ffc <_dtoa_r+0x79c>
 800537e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005380:	9308      	str	r3, [sp, #32]
 8005382:	e653      	b.n	800502c <_dtoa_r+0x7cc>
 8005384:	9b04      	ldr	r3, [sp, #16]
 8005386:	2b00      	cmp	r3, #0
 8005388:	dc03      	bgt.n	8005392 <_dtoa_r+0xb32>
 800538a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800538c:	2b02      	cmp	r3, #2
 800538e:	f73f aed5 	bgt.w	800513c <_dtoa_r+0x8dc>
 8005392:	9d06      	ldr	r5, [sp, #24]
 8005394:	4631      	mov	r1, r6
 8005396:	4658      	mov	r0, fp
 8005398:	f7ff f9d2 	bl	8004740 <quorem>
 800539c:	9b06      	ldr	r3, [sp, #24]
 800539e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80053a2:	f805 8b01 	strb.w	r8, [r5], #1
 80053a6:	9a04      	ldr	r2, [sp, #16]
 80053a8:	1aeb      	subs	r3, r5, r3
 80053aa:	429a      	cmp	r2, r3
 80053ac:	ddb5      	ble.n	800531a <_dtoa_r+0xaba>
 80053ae:	4659      	mov	r1, fp
 80053b0:	2300      	movs	r3, #0
 80053b2:	220a      	movs	r2, #10
 80053b4:	4620      	mov	r0, r4
 80053b6:	f000 f881 	bl	80054bc <__multadd>
 80053ba:	4683      	mov	fp, r0
 80053bc:	e7ea      	b.n	8005394 <_dtoa_r+0xb34>
 80053be:	bf00      	nop
 80053c0:	08005f48 	.word	0x08005f48
 80053c4:	08005f6c 	.word	0x08005f6c

080053c8 <_localeconv_r>:
 80053c8:	4b04      	ldr	r3, [pc, #16]	; (80053dc <_localeconv_r+0x14>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	6a18      	ldr	r0, [r3, #32]
 80053ce:	4b04      	ldr	r3, [pc, #16]	; (80053e0 <_localeconv_r+0x18>)
 80053d0:	2800      	cmp	r0, #0
 80053d2:	bf08      	it	eq
 80053d4:	4618      	moveq	r0, r3
 80053d6:	30f0      	adds	r0, #240	; 0xf0
 80053d8:	4770      	bx	lr
 80053da:	bf00      	nop
 80053dc:	2000000c 	.word	0x2000000c
 80053e0:	20000070 	.word	0x20000070

080053e4 <malloc>:
 80053e4:	4b02      	ldr	r3, [pc, #8]	; (80053f0 <malloc+0xc>)
 80053e6:	4601      	mov	r1, r0
 80053e8:	6818      	ldr	r0, [r3, #0]
 80053ea:	f000 bb53 	b.w	8005a94 <_malloc_r>
 80053ee:	bf00      	nop
 80053f0:	2000000c 	.word	0x2000000c

080053f4 <memchr>:
 80053f4:	b510      	push	{r4, lr}
 80053f6:	b2c9      	uxtb	r1, r1
 80053f8:	4402      	add	r2, r0
 80053fa:	4290      	cmp	r0, r2
 80053fc:	4603      	mov	r3, r0
 80053fe:	d101      	bne.n	8005404 <memchr+0x10>
 8005400:	2300      	movs	r3, #0
 8005402:	e003      	b.n	800540c <memchr+0x18>
 8005404:	781c      	ldrb	r4, [r3, #0]
 8005406:	3001      	adds	r0, #1
 8005408:	428c      	cmp	r4, r1
 800540a:	d1f6      	bne.n	80053fa <memchr+0x6>
 800540c:	4618      	mov	r0, r3
 800540e:	bd10      	pop	{r4, pc}

08005410 <memcpy>:
 8005410:	b510      	push	{r4, lr}
 8005412:	1e43      	subs	r3, r0, #1
 8005414:	440a      	add	r2, r1
 8005416:	4291      	cmp	r1, r2
 8005418:	d100      	bne.n	800541c <memcpy+0xc>
 800541a:	bd10      	pop	{r4, pc}
 800541c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005420:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005424:	e7f7      	b.n	8005416 <memcpy+0x6>

08005426 <_Balloc>:
 8005426:	b570      	push	{r4, r5, r6, lr}
 8005428:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800542a:	4604      	mov	r4, r0
 800542c:	460e      	mov	r6, r1
 800542e:	b93d      	cbnz	r5, 8005440 <_Balloc+0x1a>
 8005430:	2010      	movs	r0, #16
 8005432:	f7ff ffd7 	bl	80053e4 <malloc>
 8005436:	6260      	str	r0, [r4, #36]	; 0x24
 8005438:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800543c:	6005      	str	r5, [r0, #0]
 800543e:	60c5      	str	r5, [r0, #12]
 8005440:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005442:	68eb      	ldr	r3, [r5, #12]
 8005444:	b183      	cbz	r3, 8005468 <_Balloc+0x42>
 8005446:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005448:	68db      	ldr	r3, [r3, #12]
 800544a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800544e:	b9b8      	cbnz	r0, 8005480 <_Balloc+0x5a>
 8005450:	2101      	movs	r1, #1
 8005452:	fa01 f506 	lsl.w	r5, r1, r6
 8005456:	1d6a      	adds	r2, r5, #5
 8005458:	0092      	lsls	r2, r2, #2
 800545a:	4620      	mov	r0, r4
 800545c:	f000 fabf 	bl	80059de <_calloc_r>
 8005460:	b160      	cbz	r0, 800547c <_Balloc+0x56>
 8005462:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8005466:	e00e      	b.n	8005486 <_Balloc+0x60>
 8005468:	2221      	movs	r2, #33	; 0x21
 800546a:	2104      	movs	r1, #4
 800546c:	4620      	mov	r0, r4
 800546e:	f000 fab6 	bl	80059de <_calloc_r>
 8005472:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005474:	60e8      	str	r0, [r5, #12]
 8005476:	68db      	ldr	r3, [r3, #12]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d1e4      	bne.n	8005446 <_Balloc+0x20>
 800547c:	2000      	movs	r0, #0
 800547e:	bd70      	pop	{r4, r5, r6, pc}
 8005480:	6802      	ldr	r2, [r0, #0]
 8005482:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8005486:	2300      	movs	r3, #0
 8005488:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800548c:	e7f7      	b.n	800547e <_Balloc+0x58>

0800548e <_Bfree>:
 800548e:	b570      	push	{r4, r5, r6, lr}
 8005490:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005492:	4606      	mov	r6, r0
 8005494:	460d      	mov	r5, r1
 8005496:	b93c      	cbnz	r4, 80054a8 <_Bfree+0x1a>
 8005498:	2010      	movs	r0, #16
 800549a:	f7ff ffa3 	bl	80053e4 <malloc>
 800549e:	6270      	str	r0, [r6, #36]	; 0x24
 80054a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80054a4:	6004      	str	r4, [r0, #0]
 80054a6:	60c4      	str	r4, [r0, #12]
 80054a8:	b13d      	cbz	r5, 80054ba <_Bfree+0x2c>
 80054aa:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80054ac:	686a      	ldr	r2, [r5, #4]
 80054ae:	68db      	ldr	r3, [r3, #12]
 80054b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80054b4:	6029      	str	r1, [r5, #0]
 80054b6:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80054ba:	bd70      	pop	{r4, r5, r6, pc}

080054bc <__multadd>:
 80054bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054c0:	461f      	mov	r7, r3
 80054c2:	4606      	mov	r6, r0
 80054c4:	460c      	mov	r4, r1
 80054c6:	2300      	movs	r3, #0
 80054c8:	690d      	ldr	r5, [r1, #16]
 80054ca:	f101 0c14 	add.w	ip, r1, #20
 80054ce:	f8dc 0000 	ldr.w	r0, [ip]
 80054d2:	3301      	adds	r3, #1
 80054d4:	b281      	uxth	r1, r0
 80054d6:	fb02 7101 	mla	r1, r2, r1, r7
 80054da:	0c00      	lsrs	r0, r0, #16
 80054dc:	0c0f      	lsrs	r7, r1, #16
 80054de:	fb02 7000 	mla	r0, r2, r0, r7
 80054e2:	b289      	uxth	r1, r1
 80054e4:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80054e8:	429d      	cmp	r5, r3
 80054ea:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80054ee:	f84c 1b04 	str.w	r1, [ip], #4
 80054f2:	dcec      	bgt.n	80054ce <__multadd+0x12>
 80054f4:	b1d7      	cbz	r7, 800552c <__multadd+0x70>
 80054f6:	68a3      	ldr	r3, [r4, #8]
 80054f8:	42ab      	cmp	r3, r5
 80054fa:	dc12      	bgt.n	8005522 <__multadd+0x66>
 80054fc:	6861      	ldr	r1, [r4, #4]
 80054fe:	4630      	mov	r0, r6
 8005500:	3101      	adds	r1, #1
 8005502:	f7ff ff90 	bl	8005426 <_Balloc>
 8005506:	4680      	mov	r8, r0
 8005508:	6922      	ldr	r2, [r4, #16]
 800550a:	f104 010c 	add.w	r1, r4, #12
 800550e:	3202      	adds	r2, #2
 8005510:	0092      	lsls	r2, r2, #2
 8005512:	300c      	adds	r0, #12
 8005514:	f7ff ff7c 	bl	8005410 <memcpy>
 8005518:	4621      	mov	r1, r4
 800551a:	4630      	mov	r0, r6
 800551c:	f7ff ffb7 	bl	800548e <_Bfree>
 8005520:	4644      	mov	r4, r8
 8005522:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005526:	3501      	adds	r5, #1
 8005528:	615f      	str	r7, [r3, #20]
 800552a:	6125      	str	r5, [r4, #16]
 800552c:	4620      	mov	r0, r4
 800552e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005532 <__hi0bits>:
 8005532:	0c02      	lsrs	r2, r0, #16
 8005534:	0412      	lsls	r2, r2, #16
 8005536:	4603      	mov	r3, r0
 8005538:	b9b2      	cbnz	r2, 8005568 <__hi0bits+0x36>
 800553a:	0403      	lsls	r3, r0, #16
 800553c:	2010      	movs	r0, #16
 800553e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005542:	bf04      	itt	eq
 8005544:	021b      	lsleq	r3, r3, #8
 8005546:	3008      	addeq	r0, #8
 8005548:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800554c:	bf04      	itt	eq
 800554e:	011b      	lsleq	r3, r3, #4
 8005550:	3004      	addeq	r0, #4
 8005552:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005556:	bf04      	itt	eq
 8005558:	009b      	lsleq	r3, r3, #2
 800555a:	3002      	addeq	r0, #2
 800555c:	2b00      	cmp	r3, #0
 800555e:	db06      	blt.n	800556e <__hi0bits+0x3c>
 8005560:	005b      	lsls	r3, r3, #1
 8005562:	d503      	bpl.n	800556c <__hi0bits+0x3a>
 8005564:	3001      	adds	r0, #1
 8005566:	4770      	bx	lr
 8005568:	2000      	movs	r0, #0
 800556a:	e7e8      	b.n	800553e <__hi0bits+0xc>
 800556c:	2020      	movs	r0, #32
 800556e:	4770      	bx	lr

08005570 <__lo0bits>:
 8005570:	6803      	ldr	r3, [r0, #0]
 8005572:	4601      	mov	r1, r0
 8005574:	f013 0207 	ands.w	r2, r3, #7
 8005578:	d00b      	beq.n	8005592 <__lo0bits+0x22>
 800557a:	07da      	lsls	r2, r3, #31
 800557c:	d423      	bmi.n	80055c6 <__lo0bits+0x56>
 800557e:	0798      	lsls	r0, r3, #30
 8005580:	bf49      	itett	mi
 8005582:	085b      	lsrmi	r3, r3, #1
 8005584:	089b      	lsrpl	r3, r3, #2
 8005586:	2001      	movmi	r0, #1
 8005588:	600b      	strmi	r3, [r1, #0]
 800558a:	bf5c      	itt	pl
 800558c:	600b      	strpl	r3, [r1, #0]
 800558e:	2002      	movpl	r0, #2
 8005590:	4770      	bx	lr
 8005592:	b298      	uxth	r0, r3
 8005594:	b9a8      	cbnz	r0, 80055c2 <__lo0bits+0x52>
 8005596:	2010      	movs	r0, #16
 8005598:	0c1b      	lsrs	r3, r3, #16
 800559a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800559e:	bf04      	itt	eq
 80055a0:	0a1b      	lsreq	r3, r3, #8
 80055a2:	3008      	addeq	r0, #8
 80055a4:	071a      	lsls	r2, r3, #28
 80055a6:	bf04      	itt	eq
 80055a8:	091b      	lsreq	r3, r3, #4
 80055aa:	3004      	addeq	r0, #4
 80055ac:	079a      	lsls	r2, r3, #30
 80055ae:	bf04      	itt	eq
 80055b0:	089b      	lsreq	r3, r3, #2
 80055b2:	3002      	addeq	r0, #2
 80055b4:	07da      	lsls	r2, r3, #31
 80055b6:	d402      	bmi.n	80055be <__lo0bits+0x4e>
 80055b8:	085b      	lsrs	r3, r3, #1
 80055ba:	d006      	beq.n	80055ca <__lo0bits+0x5a>
 80055bc:	3001      	adds	r0, #1
 80055be:	600b      	str	r3, [r1, #0]
 80055c0:	4770      	bx	lr
 80055c2:	4610      	mov	r0, r2
 80055c4:	e7e9      	b.n	800559a <__lo0bits+0x2a>
 80055c6:	2000      	movs	r0, #0
 80055c8:	4770      	bx	lr
 80055ca:	2020      	movs	r0, #32
 80055cc:	4770      	bx	lr

080055ce <__i2b>:
 80055ce:	b510      	push	{r4, lr}
 80055d0:	460c      	mov	r4, r1
 80055d2:	2101      	movs	r1, #1
 80055d4:	f7ff ff27 	bl	8005426 <_Balloc>
 80055d8:	2201      	movs	r2, #1
 80055da:	6144      	str	r4, [r0, #20]
 80055dc:	6102      	str	r2, [r0, #16]
 80055de:	bd10      	pop	{r4, pc}

080055e0 <__multiply>:
 80055e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055e4:	4614      	mov	r4, r2
 80055e6:	690a      	ldr	r2, [r1, #16]
 80055e8:	6923      	ldr	r3, [r4, #16]
 80055ea:	4688      	mov	r8, r1
 80055ec:	429a      	cmp	r2, r3
 80055ee:	bfbe      	ittt	lt
 80055f0:	460b      	movlt	r3, r1
 80055f2:	46a0      	movlt	r8, r4
 80055f4:	461c      	movlt	r4, r3
 80055f6:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80055fa:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80055fe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005602:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005606:	eb07 0609 	add.w	r6, r7, r9
 800560a:	42b3      	cmp	r3, r6
 800560c:	bfb8      	it	lt
 800560e:	3101      	addlt	r1, #1
 8005610:	f7ff ff09 	bl	8005426 <_Balloc>
 8005614:	f100 0514 	add.w	r5, r0, #20
 8005618:	462b      	mov	r3, r5
 800561a:	2200      	movs	r2, #0
 800561c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8005620:	4573      	cmp	r3, lr
 8005622:	d316      	bcc.n	8005652 <__multiply+0x72>
 8005624:	f104 0214 	add.w	r2, r4, #20
 8005628:	f108 0114 	add.w	r1, r8, #20
 800562c:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8005630:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8005634:	9300      	str	r3, [sp, #0]
 8005636:	9b00      	ldr	r3, [sp, #0]
 8005638:	9201      	str	r2, [sp, #4]
 800563a:	4293      	cmp	r3, r2
 800563c:	d80c      	bhi.n	8005658 <__multiply+0x78>
 800563e:	2e00      	cmp	r6, #0
 8005640:	dd03      	ble.n	800564a <__multiply+0x6a>
 8005642:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8005646:	2b00      	cmp	r3, #0
 8005648:	d05d      	beq.n	8005706 <__multiply+0x126>
 800564a:	6106      	str	r6, [r0, #16]
 800564c:	b003      	add	sp, #12
 800564e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005652:	f843 2b04 	str.w	r2, [r3], #4
 8005656:	e7e3      	b.n	8005620 <__multiply+0x40>
 8005658:	f8b2 b000 	ldrh.w	fp, [r2]
 800565c:	f1bb 0f00 	cmp.w	fp, #0
 8005660:	d023      	beq.n	80056aa <__multiply+0xca>
 8005662:	4689      	mov	r9, r1
 8005664:	46ac      	mov	ip, r5
 8005666:	f04f 0800 	mov.w	r8, #0
 800566a:	f859 4b04 	ldr.w	r4, [r9], #4
 800566e:	f8dc a000 	ldr.w	sl, [ip]
 8005672:	b2a3      	uxth	r3, r4
 8005674:	fa1f fa8a 	uxth.w	sl, sl
 8005678:	fb0b a303 	mla	r3, fp, r3, sl
 800567c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005680:	f8dc 4000 	ldr.w	r4, [ip]
 8005684:	4443      	add	r3, r8
 8005686:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800568a:	fb0b 840a 	mla	r4, fp, sl, r8
 800568e:	46e2      	mov	sl, ip
 8005690:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8005694:	b29b      	uxth	r3, r3
 8005696:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800569a:	454f      	cmp	r7, r9
 800569c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80056a0:	f84a 3b04 	str.w	r3, [sl], #4
 80056a4:	d82b      	bhi.n	80056fe <__multiply+0x11e>
 80056a6:	f8cc 8004 	str.w	r8, [ip, #4]
 80056aa:	9b01      	ldr	r3, [sp, #4]
 80056ac:	3204      	adds	r2, #4
 80056ae:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80056b2:	f1ba 0f00 	cmp.w	sl, #0
 80056b6:	d020      	beq.n	80056fa <__multiply+0x11a>
 80056b8:	4689      	mov	r9, r1
 80056ba:	46a8      	mov	r8, r5
 80056bc:	f04f 0b00 	mov.w	fp, #0
 80056c0:	682b      	ldr	r3, [r5, #0]
 80056c2:	f8b9 c000 	ldrh.w	ip, [r9]
 80056c6:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	fb0a 440c 	mla	r4, sl, ip, r4
 80056d0:	46c4      	mov	ip, r8
 80056d2:	445c      	add	r4, fp
 80056d4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80056d8:	f84c 3b04 	str.w	r3, [ip], #4
 80056dc:	f859 3b04 	ldr.w	r3, [r9], #4
 80056e0:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80056e4:	0c1b      	lsrs	r3, r3, #16
 80056e6:	fb0a b303 	mla	r3, sl, r3, fp
 80056ea:	454f      	cmp	r7, r9
 80056ec:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80056f0:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80056f4:	d805      	bhi.n	8005702 <__multiply+0x122>
 80056f6:	f8c8 3004 	str.w	r3, [r8, #4]
 80056fa:	3504      	adds	r5, #4
 80056fc:	e79b      	b.n	8005636 <__multiply+0x56>
 80056fe:	46d4      	mov	ip, sl
 8005700:	e7b3      	b.n	800566a <__multiply+0x8a>
 8005702:	46e0      	mov	r8, ip
 8005704:	e7dd      	b.n	80056c2 <__multiply+0xe2>
 8005706:	3e01      	subs	r6, #1
 8005708:	e799      	b.n	800563e <__multiply+0x5e>
	...

0800570c <__pow5mult>:
 800570c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005710:	4615      	mov	r5, r2
 8005712:	f012 0203 	ands.w	r2, r2, #3
 8005716:	4606      	mov	r6, r0
 8005718:	460f      	mov	r7, r1
 800571a:	d007      	beq.n	800572c <__pow5mult+0x20>
 800571c:	4c21      	ldr	r4, [pc, #132]	; (80057a4 <__pow5mult+0x98>)
 800571e:	3a01      	subs	r2, #1
 8005720:	2300      	movs	r3, #0
 8005722:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005726:	f7ff fec9 	bl	80054bc <__multadd>
 800572a:	4607      	mov	r7, r0
 800572c:	10ad      	asrs	r5, r5, #2
 800572e:	d035      	beq.n	800579c <__pow5mult+0x90>
 8005730:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005732:	b93c      	cbnz	r4, 8005744 <__pow5mult+0x38>
 8005734:	2010      	movs	r0, #16
 8005736:	f7ff fe55 	bl	80053e4 <malloc>
 800573a:	6270      	str	r0, [r6, #36]	; 0x24
 800573c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005740:	6004      	str	r4, [r0, #0]
 8005742:	60c4      	str	r4, [r0, #12]
 8005744:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005748:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800574c:	b94c      	cbnz	r4, 8005762 <__pow5mult+0x56>
 800574e:	f240 2171 	movw	r1, #625	; 0x271
 8005752:	4630      	mov	r0, r6
 8005754:	f7ff ff3b 	bl	80055ce <__i2b>
 8005758:	2300      	movs	r3, #0
 800575a:	4604      	mov	r4, r0
 800575c:	f8c8 0008 	str.w	r0, [r8, #8]
 8005760:	6003      	str	r3, [r0, #0]
 8005762:	f04f 0800 	mov.w	r8, #0
 8005766:	07eb      	lsls	r3, r5, #31
 8005768:	d50a      	bpl.n	8005780 <__pow5mult+0x74>
 800576a:	4639      	mov	r1, r7
 800576c:	4622      	mov	r2, r4
 800576e:	4630      	mov	r0, r6
 8005770:	f7ff ff36 	bl	80055e0 <__multiply>
 8005774:	4681      	mov	r9, r0
 8005776:	4639      	mov	r1, r7
 8005778:	4630      	mov	r0, r6
 800577a:	f7ff fe88 	bl	800548e <_Bfree>
 800577e:	464f      	mov	r7, r9
 8005780:	106d      	asrs	r5, r5, #1
 8005782:	d00b      	beq.n	800579c <__pow5mult+0x90>
 8005784:	6820      	ldr	r0, [r4, #0]
 8005786:	b938      	cbnz	r0, 8005798 <__pow5mult+0x8c>
 8005788:	4622      	mov	r2, r4
 800578a:	4621      	mov	r1, r4
 800578c:	4630      	mov	r0, r6
 800578e:	f7ff ff27 	bl	80055e0 <__multiply>
 8005792:	6020      	str	r0, [r4, #0]
 8005794:	f8c0 8000 	str.w	r8, [r0]
 8005798:	4604      	mov	r4, r0
 800579a:	e7e4      	b.n	8005766 <__pow5mult+0x5a>
 800579c:	4638      	mov	r0, r7
 800579e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80057a2:	bf00      	nop
 80057a4:	08006070 	.word	0x08006070

080057a8 <__lshift>:
 80057a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057ac:	460c      	mov	r4, r1
 80057ae:	4607      	mov	r7, r0
 80057b0:	4616      	mov	r6, r2
 80057b2:	6923      	ldr	r3, [r4, #16]
 80057b4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80057b8:	eb0a 0903 	add.w	r9, sl, r3
 80057bc:	6849      	ldr	r1, [r1, #4]
 80057be:	68a3      	ldr	r3, [r4, #8]
 80057c0:	f109 0501 	add.w	r5, r9, #1
 80057c4:	42ab      	cmp	r3, r5
 80057c6:	db32      	blt.n	800582e <__lshift+0x86>
 80057c8:	4638      	mov	r0, r7
 80057ca:	f7ff fe2c 	bl	8005426 <_Balloc>
 80057ce:	2300      	movs	r3, #0
 80057d0:	4680      	mov	r8, r0
 80057d2:	461a      	mov	r2, r3
 80057d4:	f100 0114 	add.w	r1, r0, #20
 80057d8:	4553      	cmp	r3, sl
 80057da:	db2b      	blt.n	8005834 <__lshift+0x8c>
 80057dc:	6920      	ldr	r0, [r4, #16]
 80057de:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80057e2:	f104 0314 	add.w	r3, r4, #20
 80057e6:	f016 021f 	ands.w	r2, r6, #31
 80057ea:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80057ee:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80057f2:	d025      	beq.n	8005840 <__lshift+0x98>
 80057f4:	2000      	movs	r0, #0
 80057f6:	f1c2 0e20 	rsb	lr, r2, #32
 80057fa:	468a      	mov	sl, r1
 80057fc:	681e      	ldr	r6, [r3, #0]
 80057fe:	4096      	lsls	r6, r2
 8005800:	4330      	orrs	r0, r6
 8005802:	f84a 0b04 	str.w	r0, [sl], #4
 8005806:	f853 0b04 	ldr.w	r0, [r3], #4
 800580a:	459c      	cmp	ip, r3
 800580c:	fa20 f00e 	lsr.w	r0, r0, lr
 8005810:	d814      	bhi.n	800583c <__lshift+0x94>
 8005812:	6048      	str	r0, [r1, #4]
 8005814:	b108      	cbz	r0, 800581a <__lshift+0x72>
 8005816:	f109 0502 	add.w	r5, r9, #2
 800581a:	3d01      	subs	r5, #1
 800581c:	4638      	mov	r0, r7
 800581e:	f8c8 5010 	str.w	r5, [r8, #16]
 8005822:	4621      	mov	r1, r4
 8005824:	f7ff fe33 	bl	800548e <_Bfree>
 8005828:	4640      	mov	r0, r8
 800582a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800582e:	3101      	adds	r1, #1
 8005830:	005b      	lsls	r3, r3, #1
 8005832:	e7c7      	b.n	80057c4 <__lshift+0x1c>
 8005834:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005838:	3301      	adds	r3, #1
 800583a:	e7cd      	b.n	80057d8 <__lshift+0x30>
 800583c:	4651      	mov	r1, sl
 800583e:	e7dc      	b.n	80057fa <__lshift+0x52>
 8005840:	3904      	subs	r1, #4
 8005842:	f853 2b04 	ldr.w	r2, [r3], #4
 8005846:	459c      	cmp	ip, r3
 8005848:	f841 2f04 	str.w	r2, [r1, #4]!
 800584c:	d8f9      	bhi.n	8005842 <__lshift+0x9a>
 800584e:	e7e4      	b.n	800581a <__lshift+0x72>

08005850 <__mcmp>:
 8005850:	6903      	ldr	r3, [r0, #16]
 8005852:	690a      	ldr	r2, [r1, #16]
 8005854:	b530      	push	{r4, r5, lr}
 8005856:	1a9b      	subs	r3, r3, r2
 8005858:	d10c      	bne.n	8005874 <__mcmp+0x24>
 800585a:	0092      	lsls	r2, r2, #2
 800585c:	3014      	adds	r0, #20
 800585e:	3114      	adds	r1, #20
 8005860:	1884      	adds	r4, r0, r2
 8005862:	4411      	add	r1, r2
 8005864:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005868:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800586c:	4295      	cmp	r5, r2
 800586e:	d003      	beq.n	8005878 <__mcmp+0x28>
 8005870:	d305      	bcc.n	800587e <__mcmp+0x2e>
 8005872:	2301      	movs	r3, #1
 8005874:	4618      	mov	r0, r3
 8005876:	bd30      	pop	{r4, r5, pc}
 8005878:	42a0      	cmp	r0, r4
 800587a:	d3f3      	bcc.n	8005864 <__mcmp+0x14>
 800587c:	e7fa      	b.n	8005874 <__mcmp+0x24>
 800587e:	f04f 33ff 	mov.w	r3, #4294967295
 8005882:	e7f7      	b.n	8005874 <__mcmp+0x24>

08005884 <__mdiff>:
 8005884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005888:	460d      	mov	r5, r1
 800588a:	4607      	mov	r7, r0
 800588c:	4611      	mov	r1, r2
 800588e:	4628      	mov	r0, r5
 8005890:	4614      	mov	r4, r2
 8005892:	f7ff ffdd 	bl	8005850 <__mcmp>
 8005896:	1e06      	subs	r6, r0, #0
 8005898:	d108      	bne.n	80058ac <__mdiff+0x28>
 800589a:	4631      	mov	r1, r6
 800589c:	4638      	mov	r0, r7
 800589e:	f7ff fdc2 	bl	8005426 <_Balloc>
 80058a2:	2301      	movs	r3, #1
 80058a4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80058a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058ac:	bfa4      	itt	ge
 80058ae:	4623      	movge	r3, r4
 80058b0:	462c      	movge	r4, r5
 80058b2:	4638      	mov	r0, r7
 80058b4:	6861      	ldr	r1, [r4, #4]
 80058b6:	bfa6      	itte	ge
 80058b8:	461d      	movge	r5, r3
 80058ba:	2600      	movge	r6, #0
 80058bc:	2601      	movlt	r6, #1
 80058be:	f7ff fdb2 	bl	8005426 <_Balloc>
 80058c2:	f04f 0e00 	mov.w	lr, #0
 80058c6:	60c6      	str	r6, [r0, #12]
 80058c8:	692b      	ldr	r3, [r5, #16]
 80058ca:	6926      	ldr	r6, [r4, #16]
 80058cc:	f104 0214 	add.w	r2, r4, #20
 80058d0:	f105 0914 	add.w	r9, r5, #20
 80058d4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80058d8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80058dc:	f100 0114 	add.w	r1, r0, #20
 80058e0:	f852 ab04 	ldr.w	sl, [r2], #4
 80058e4:	f859 5b04 	ldr.w	r5, [r9], #4
 80058e8:	fa1f f38a 	uxth.w	r3, sl
 80058ec:	4473      	add	r3, lr
 80058ee:	b2ac      	uxth	r4, r5
 80058f0:	1b1b      	subs	r3, r3, r4
 80058f2:	0c2c      	lsrs	r4, r5, #16
 80058f4:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 80058f8:	eb04 4423 	add.w	r4, r4, r3, asr #16
 80058fc:	b29b      	uxth	r3, r3
 80058fe:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8005902:	45c8      	cmp	r8, r9
 8005904:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8005908:	4694      	mov	ip, r2
 800590a:	f841 4b04 	str.w	r4, [r1], #4
 800590e:	d8e7      	bhi.n	80058e0 <__mdiff+0x5c>
 8005910:	45bc      	cmp	ip, r7
 8005912:	d304      	bcc.n	800591e <__mdiff+0x9a>
 8005914:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8005918:	b183      	cbz	r3, 800593c <__mdiff+0xb8>
 800591a:	6106      	str	r6, [r0, #16]
 800591c:	e7c4      	b.n	80058a8 <__mdiff+0x24>
 800591e:	f85c 4b04 	ldr.w	r4, [ip], #4
 8005922:	b2a2      	uxth	r2, r4
 8005924:	4472      	add	r2, lr
 8005926:	1413      	asrs	r3, r2, #16
 8005928:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800592c:	b292      	uxth	r2, r2
 800592e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005932:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8005936:	f841 2b04 	str.w	r2, [r1], #4
 800593a:	e7e9      	b.n	8005910 <__mdiff+0x8c>
 800593c:	3e01      	subs	r6, #1
 800593e:	e7e9      	b.n	8005914 <__mdiff+0x90>

08005940 <__d2b>:
 8005940:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005944:	461c      	mov	r4, r3
 8005946:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800594a:	2101      	movs	r1, #1
 800594c:	4690      	mov	r8, r2
 800594e:	f7ff fd6a 	bl	8005426 <_Balloc>
 8005952:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8005956:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800595a:	4607      	mov	r7, r0
 800595c:	bb34      	cbnz	r4, 80059ac <__d2b+0x6c>
 800595e:	9201      	str	r2, [sp, #4]
 8005960:	f1b8 0200 	subs.w	r2, r8, #0
 8005964:	d027      	beq.n	80059b6 <__d2b+0x76>
 8005966:	a802      	add	r0, sp, #8
 8005968:	f840 2d08 	str.w	r2, [r0, #-8]!
 800596c:	f7ff fe00 	bl	8005570 <__lo0bits>
 8005970:	9900      	ldr	r1, [sp, #0]
 8005972:	b1f0      	cbz	r0, 80059b2 <__d2b+0x72>
 8005974:	9a01      	ldr	r2, [sp, #4]
 8005976:	f1c0 0320 	rsb	r3, r0, #32
 800597a:	fa02 f303 	lsl.w	r3, r2, r3
 800597e:	430b      	orrs	r3, r1
 8005980:	40c2      	lsrs	r2, r0
 8005982:	617b      	str	r3, [r7, #20]
 8005984:	9201      	str	r2, [sp, #4]
 8005986:	9b01      	ldr	r3, [sp, #4]
 8005988:	2b00      	cmp	r3, #0
 800598a:	bf14      	ite	ne
 800598c:	2102      	movne	r1, #2
 800598e:	2101      	moveq	r1, #1
 8005990:	61bb      	str	r3, [r7, #24]
 8005992:	6139      	str	r1, [r7, #16]
 8005994:	b1c4      	cbz	r4, 80059c8 <__d2b+0x88>
 8005996:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800599a:	4404      	add	r4, r0
 800599c:	6034      	str	r4, [r6, #0]
 800599e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80059a2:	6028      	str	r0, [r5, #0]
 80059a4:	4638      	mov	r0, r7
 80059a6:	b002      	add	sp, #8
 80059a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059ac:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80059b0:	e7d5      	b.n	800595e <__d2b+0x1e>
 80059b2:	6179      	str	r1, [r7, #20]
 80059b4:	e7e7      	b.n	8005986 <__d2b+0x46>
 80059b6:	a801      	add	r0, sp, #4
 80059b8:	f7ff fdda 	bl	8005570 <__lo0bits>
 80059bc:	2101      	movs	r1, #1
 80059be:	9b01      	ldr	r3, [sp, #4]
 80059c0:	6139      	str	r1, [r7, #16]
 80059c2:	617b      	str	r3, [r7, #20]
 80059c4:	3020      	adds	r0, #32
 80059c6:	e7e5      	b.n	8005994 <__d2b+0x54>
 80059c8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80059cc:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80059d0:	6030      	str	r0, [r6, #0]
 80059d2:	6918      	ldr	r0, [r3, #16]
 80059d4:	f7ff fdad 	bl	8005532 <__hi0bits>
 80059d8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80059dc:	e7e1      	b.n	80059a2 <__d2b+0x62>

080059de <_calloc_r>:
 80059de:	b538      	push	{r3, r4, r5, lr}
 80059e0:	fb02 f401 	mul.w	r4, r2, r1
 80059e4:	4621      	mov	r1, r4
 80059e6:	f000 f855 	bl	8005a94 <_malloc_r>
 80059ea:	4605      	mov	r5, r0
 80059ec:	b118      	cbz	r0, 80059f6 <_calloc_r+0x18>
 80059ee:	4622      	mov	r2, r4
 80059f0:	2100      	movs	r1, #0
 80059f2:	f7fe fa2d 	bl	8003e50 <memset>
 80059f6:	4628      	mov	r0, r5
 80059f8:	bd38      	pop	{r3, r4, r5, pc}
	...

080059fc <_free_r>:
 80059fc:	b538      	push	{r3, r4, r5, lr}
 80059fe:	4605      	mov	r5, r0
 8005a00:	2900      	cmp	r1, #0
 8005a02:	d043      	beq.n	8005a8c <_free_r+0x90>
 8005a04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a08:	1f0c      	subs	r4, r1, #4
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	bfb8      	it	lt
 8005a0e:	18e4      	addlt	r4, r4, r3
 8005a10:	f000 fa27 	bl	8005e62 <__malloc_lock>
 8005a14:	4a1e      	ldr	r2, [pc, #120]	; (8005a90 <_free_r+0x94>)
 8005a16:	6813      	ldr	r3, [r2, #0]
 8005a18:	4610      	mov	r0, r2
 8005a1a:	b933      	cbnz	r3, 8005a2a <_free_r+0x2e>
 8005a1c:	6063      	str	r3, [r4, #4]
 8005a1e:	6014      	str	r4, [r2, #0]
 8005a20:	4628      	mov	r0, r5
 8005a22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a26:	f000 ba1d 	b.w	8005e64 <__malloc_unlock>
 8005a2a:	42a3      	cmp	r3, r4
 8005a2c:	d90b      	bls.n	8005a46 <_free_r+0x4a>
 8005a2e:	6821      	ldr	r1, [r4, #0]
 8005a30:	1862      	adds	r2, r4, r1
 8005a32:	4293      	cmp	r3, r2
 8005a34:	bf01      	itttt	eq
 8005a36:	681a      	ldreq	r2, [r3, #0]
 8005a38:	685b      	ldreq	r3, [r3, #4]
 8005a3a:	1852      	addeq	r2, r2, r1
 8005a3c:	6022      	streq	r2, [r4, #0]
 8005a3e:	6063      	str	r3, [r4, #4]
 8005a40:	6004      	str	r4, [r0, #0]
 8005a42:	e7ed      	b.n	8005a20 <_free_r+0x24>
 8005a44:	4613      	mov	r3, r2
 8005a46:	685a      	ldr	r2, [r3, #4]
 8005a48:	b10a      	cbz	r2, 8005a4e <_free_r+0x52>
 8005a4a:	42a2      	cmp	r2, r4
 8005a4c:	d9fa      	bls.n	8005a44 <_free_r+0x48>
 8005a4e:	6819      	ldr	r1, [r3, #0]
 8005a50:	1858      	adds	r0, r3, r1
 8005a52:	42a0      	cmp	r0, r4
 8005a54:	d10b      	bne.n	8005a6e <_free_r+0x72>
 8005a56:	6820      	ldr	r0, [r4, #0]
 8005a58:	4401      	add	r1, r0
 8005a5a:	1858      	adds	r0, r3, r1
 8005a5c:	4282      	cmp	r2, r0
 8005a5e:	6019      	str	r1, [r3, #0]
 8005a60:	d1de      	bne.n	8005a20 <_free_r+0x24>
 8005a62:	6810      	ldr	r0, [r2, #0]
 8005a64:	6852      	ldr	r2, [r2, #4]
 8005a66:	4401      	add	r1, r0
 8005a68:	6019      	str	r1, [r3, #0]
 8005a6a:	605a      	str	r2, [r3, #4]
 8005a6c:	e7d8      	b.n	8005a20 <_free_r+0x24>
 8005a6e:	d902      	bls.n	8005a76 <_free_r+0x7a>
 8005a70:	230c      	movs	r3, #12
 8005a72:	602b      	str	r3, [r5, #0]
 8005a74:	e7d4      	b.n	8005a20 <_free_r+0x24>
 8005a76:	6820      	ldr	r0, [r4, #0]
 8005a78:	1821      	adds	r1, r4, r0
 8005a7a:	428a      	cmp	r2, r1
 8005a7c:	bf01      	itttt	eq
 8005a7e:	6811      	ldreq	r1, [r2, #0]
 8005a80:	6852      	ldreq	r2, [r2, #4]
 8005a82:	1809      	addeq	r1, r1, r0
 8005a84:	6021      	streq	r1, [r4, #0]
 8005a86:	6062      	str	r2, [r4, #4]
 8005a88:	605c      	str	r4, [r3, #4]
 8005a8a:	e7c9      	b.n	8005a20 <_free_r+0x24>
 8005a8c:	bd38      	pop	{r3, r4, r5, pc}
 8005a8e:	bf00      	nop
 8005a90:	20000204 	.word	0x20000204

08005a94 <_malloc_r>:
 8005a94:	b570      	push	{r4, r5, r6, lr}
 8005a96:	1ccd      	adds	r5, r1, #3
 8005a98:	f025 0503 	bic.w	r5, r5, #3
 8005a9c:	3508      	adds	r5, #8
 8005a9e:	2d0c      	cmp	r5, #12
 8005aa0:	bf38      	it	cc
 8005aa2:	250c      	movcc	r5, #12
 8005aa4:	2d00      	cmp	r5, #0
 8005aa6:	4606      	mov	r6, r0
 8005aa8:	db01      	blt.n	8005aae <_malloc_r+0x1a>
 8005aaa:	42a9      	cmp	r1, r5
 8005aac:	d903      	bls.n	8005ab6 <_malloc_r+0x22>
 8005aae:	230c      	movs	r3, #12
 8005ab0:	6033      	str	r3, [r6, #0]
 8005ab2:	2000      	movs	r0, #0
 8005ab4:	bd70      	pop	{r4, r5, r6, pc}
 8005ab6:	f000 f9d4 	bl	8005e62 <__malloc_lock>
 8005aba:	4a21      	ldr	r2, [pc, #132]	; (8005b40 <_malloc_r+0xac>)
 8005abc:	6814      	ldr	r4, [r2, #0]
 8005abe:	4621      	mov	r1, r4
 8005ac0:	b991      	cbnz	r1, 8005ae8 <_malloc_r+0x54>
 8005ac2:	4c20      	ldr	r4, [pc, #128]	; (8005b44 <_malloc_r+0xb0>)
 8005ac4:	6823      	ldr	r3, [r4, #0]
 8005ac6:	b91b      	cbnz	r3, 8005ad0 <_malloc_r+0x3c>
 8005ac8:	4630      	mov	r0, r6
 8005aca:	f000 f98f 	bl	8005dec <_sbrk_r>
 8005ace:	6020      	str	r0, [r4, #0]
 8005ad0:	4629      	mov	r1, r5
 8005ad2:	4630      	mov	r0, r6
 8005ad4:	f000 f98a 	bl	8005dec <_sbrk_r>
 8005ad8:	1c43      	adds	r3, r0, #1
 8005ada:	d124      	bne.n	8005b26 <_malloc_r+0x92>
 8005adc:	230c      	movs	r3, #12
 8005ade:	4630      	mov	r0, r6
 8005ae0:	6033      	str	r3, [r6, #0]
 8005ae2:	f000 f9bf 	bl	8005e64 <__malloc_unlock>
 8005ae6:	e7e4      	b.n	8005ab2 <_malloc_r+0x1e>
 8005ae8:	680b      	ldr	r3, [r1, #0]
 8005aea:	1b5b      	subs	r3, r3, r5
 8005aec:	d418      	bmi.n	8005b20 <_malloc_r+0x8c>
 8005aee:	2b0b      	cmp	r3, #11
 8005af0:	d90f      	bls.n	8005b12 <_malloc_r+0x7e>
 8005af2:	600b      	str	r3, [r1, #0]
 8005af4:	18cc      	adds	r4, r1, r3
 8005af6:	50cd      	str	r5, [r1, r3]
 8005af8:	4630      	mov	r0, r6
 8005afa:	f000 f9b3 	bl	8005e64 <__malloc_unlock>
 8005afe:	f104 000b 	add.w	r0, r4, #11
 8005b02:	1d23      	adds	r3, r4, #4
 8005b04:	f020 0007 	bic.w	r0, r0, #7
 8005b08:	1ac3      	subs	r3, r0, r3
 8005b0a:	d0d3      	beq.n	8005ab4 <_malloc_r+0x20>
 8005b0c:	425a      	negs	r2, r3
 8005b0e:	50e2      	str	r2, [r4, r3]
 8005b10:	e7d0      	b.n	8005ab4 <_malloc_r+0x20>
 8005b12:	684b      	ldr	r3, [r1, #4]
 8005b14:	428c      	cmp	r4, r1
 8005b16:	bf16      	itet	ne
 8005b18:	6063      	strne	r3, [r4, #4]
 8005b1a:	6013      	streq	r3, [r2, #0]
 8005b1c:	460c      	movne	r4, r1
 8005b1e:	e7eb      	b.n	8005af8 <_malloc_r+0x64>
 8005b20:	460c      	mov	r4, r1
 8005b22:	6849      	ldr	r1, [r1, #4]
 8005b24:	e7cc      	b.n	8005ac0 <_malloc_r+0x2c>
 8005b26:	1cc4      	adds	r4, r0, #3
 8005b28:	f024 0403 	bic.w	r4, r4, #3
 8005b2c:	42a0      	cmp	r0, r4
 8005b2e:	d005      	beq.n	8005b3c <_malloc_r+0xa8>
 8005b30:	1a21      	subs	r1, r4, r0
 8005b32:	4630      	mov	r0, r6
 8005b34:	f000 f95a 	bl	8005dec <_sbrk_r>
 8005b38:	3001      	adds	r0, #1
 8005b3a:	d0cf      	beq.n	8005adc <_malloc_r+0x48>
 8005b3c:	6025      	str	r5, [r4, #0]
 8005b3e:	e7db      	b.n	8005af8 <_malloc_r+0x64>
 8005b40:	20000204 	.word	0x20000204
 8005b44:	20000208 	.word	0x20000208

08005b48 <__ssputs_r>:
 8005b48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b4c:	688e      	ldr	r6, [r1, #8]
 8005b4e:	4682      	mov	sl, r0
 8005b50:	429e      	cmp	r6, r3
 8005b52:	460c      	mov	r4, r1
 8005b54:	4690      	mov	r8, r2
 8005b56:	4699      	mov	r9, r3
 8005b58:	d837      	bhi.n	8005bca <__ssputs_r+0x82>
 8005b5a:	898a      	ldrh	r2, [r1, #12]
 8005b5c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005b60:	d031      	beq.n	8005bc6 <__ssputs_r+0x7e>
 8005b62:	2302      	movs	r3, #2
 8005b64:	6825      	ldr	r5, [r4, #0]
 8005b66:	6909      	ldr	r1, [r1, #16]
 8005b68:	1a6f      	subs	r7, r5, r1
 8005b6a:	6965      	ldr	r5, [r4, #20]
 8005b6c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005b70:	fb95 f5f3 	sdiv	r5, r5, r3
 8005b74:	f109 0301 	add.w	r3, r9, #1
 8005b78:	443b      	add	r3, r7
 8005b7a:	429d      	cmp	r5, r3
 8005b7c:	bf38      	it	cc
 8005b7e:	461d      	movcc	r5, r3
 8005b80:	0553      	lsls	r3, r2, #21
 8005b82:	d530      	bpl.n	8005be6 <__ssputs_r+0x9e>
 8005b84:	4629      	mov	r1, r5
 8005b86:	f7ff ff85 	bl	8005a94 <_malloc_r>
 8005b8a:	4606      	mov	r6, r0
 8005b8c:	b950      	cbnz	r0, 8005ba4 <__ssputs_r+0x5c>
 8005b8e:	230c      	movs	r3, #12
 8005b90:	f04f 30ff 	mov.w	r0, #4294967295
 8005b94:	f8ca 3000 	str.w	r3, [sl]
 8005b98:	89a3      	ldrh	r3, [r4, #12]
 8005b9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b9e:	81a3      	strh	r3, [r4, #12]
 8005ba0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ba4:	463a      	mov	r2, r7
 8005ba6:	6921      	ldr	r1, [r4, #16]
 8005ba8:	f7ff fc32 	bl	8005410 <memcpy>
 8005bac:	89a3      	ldrh	r3, [r4, #12]
 8005bae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005bb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bb6:	81a3      	strh	r3, [r4, #12]
 8005bb8:	6126      	str	r6, [r4, #16]
 8005bba:	443e      	add	r6, r7
 8005bbc:	6026      	str	r6, [r4, #0]
 8005bbe:	464e      	mov	r6, r9
 8005bc0:	6165      	str	r5, [r4, #20]
 8005bc2:	1bed      	subs	r5, r5, r7
 8005bc4:	60a5      	str	r5, [r4, #8]
 8005bc6:	454e      	cmp	r6, r9
 8005bc8:	d900      	bls.n	8005bcc <__ssputs_r+0x84>
 8005bca:	464e      	mov	r6, r9
 8005bcc:	4632      	mov	r2, r6
 8005bce:	4641      	mov	r1, r8
 8005bd0:	6820      	ldr	r0, [r4, #0]
 8005bd2:	f000 f92d 	bl	8005e30 <memmove>
 8005bd6:	68a3      	ldr	r3, [r4, #8]
 8005bd8:	2000      	movs	r0, #0
 8005bda:	1b9b      	subs	r3, r3, r6
 8005bdc:	60a3      	str	r3, [r4, #8]
 8005bde:	6823      	ldr	r3, [r4, #0]
 8005be0:	441e      	add	r6, r3
 8005be2:	6026      	str	r6, [r4, #0]
 8005be4:	e7dc      	b.n	8005ba0 <__ssputs_r+0x58>
 8005be6:	462a      	mov	r2, r5
 8005be8:	f000 f93d 	bl	8005e66 <_realloc_r>
 8005bec:	4606      	mov	r6, r0
 8005bee:	2800      	cmp	r0, #0
 8005bf0:	d1e2      	bne.n	8005bb8 <__ssputs_r+0x70>
 8005bf2:	6921      	ldr	r1, [r4, #16]
 8005bf4:	4650      	mov	r0, sl
 8005bf6:	f7ff ff01 	bl	80059fc <_free_r>
 8005bfa:	e7c8      	b.n	8005b8e <__ssputs_r+0x46>

08005bfc <_svfiprintf_r>:
 8005bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c00:	461d      	mov	r5, r3
 8005c02:	898b      	ldrh	r3, [r1, #12]
 8005c04:	b09d      	sub	sp, #116	; 0x74
 8005c06:	061f      	lsls	r7, r3, #24
 8005c08:	4680      	mov	r8, r0
 8005c0a:	460c      	mov	r4, r1
 8005c0c:	4616      	mov	r6, r2
 8005c0e:	d50f      	bpl.n	8005c30 <_svfiprintf_r+0x34>
 8005c10:	690b      	ldr	r3, [r1, #16]
 8005c12:	b96b      	cbnz	r3, 8005c30 <_svfiprintf_r+0x34>
 8005c14:	2140      	movs	r1, #64	; 0x40
 8005c16:	f7ff ff3d 	bl	8005a94 <_malloc_r>
 8005c1a:	6020      	str	r0, [r4, #0]
 8005c1c:	6120      	str	r0, [r4, #16]
 8005c1e:	b928      	cbnz	r0, 8005c2c <_svfiprintf_r+0x30>
 8005c20:	230c      	movs	r3, #12
 8005c22:	f8c8 3000 	str.w	r3, [r8]
 8005c26:	f04f 30ff 	mov.w	r0, #4294967295
 8005c2a:	e0c8      	b.n	8005dbe <_svfiprintf_r+0x1c2>
 8005c2c:	2340      	movs	r3, #64	; 0x40
 8005c2e:	6163      	str	r3, [r4, #20]
 8005c30:	2300      	movs	r3, #0
 8005c32:	9309      	str	r3, [sp, #36]	; 0x24
 8005c34:	2320      	movs	r3, #32
 8005c36:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005c3a:	2330      	movs	r3, #48	; 0x30
 8005c3c:	f04f 0b01 	mov.w	fp, #1
 8005c40:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005c44:	9503      	str	r5, [sp, #12]
 8005c46:	4637      	mov	r7, r6
 8005c48:	463d      	mov	r5, r7
 8005c4a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005c4e:	b10b      	cbz	r3, 8005c54 <_svfiprintf_r+0x58>
 8005c50:	2b25      	cmp	r3, #37	; 0x25
 8005c52:	d13e      	bne.n	8005cd2 <_svfiprintf_r+0xd6>
 8005c54:	ebb7 0a06 	subs.w	sl, r7, r6
 8005c58:	d00b      	beq.n	8005c72 <_svfiprintf_r+0x76>
 8005c5a:	4653      	mov	r3, sl
 8005c5c:	4632      	mov	r2, r6
 8005c5e:	4621      	mov	r1, r4
 8005c60:	4640      	mov	r0, r8
 8005c62:	f7ff ff71 	bl	8005b48 <__ssputs_r>
 8005c66:	3001      	adds	r0, #1
 8005c68:	f000 80a4 	beq.w	8005db4 <_svfiprintf_r+0x1b8>
 8005c6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c6e:	4453      	add	r3, sl
 8005c70:	9309      	str	r3, [sp, #36]	; 0x24
 8005c72:	783b      	ldrb	r3, [r7, #0]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	f000 809d 	beq.w	8005db4 <_svfiprintf_r+0x1b8>
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	f04f 32ff 	mov.w	r2, #4294967295
 8005c80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005c84:	9304      	str	r3, [sp, #16]
 8005c86:	9307      	str	r3, [sp, #28]
 8005c88:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005c8c:	931a      	str	r3, [sp, #104]	; 0x68
 8005c8e:	462f      	mov	r7, r5
 8005c90:	2205      	movs	r2, #5
 8005c92:	f817 1b01 	ldrb.w	r1, [r7], #1
 8005c96:	4850      	ldr	r0, [pc, #320]	; (8005dd8 <_svfiprintf_r+0x1dc>)
 8005c98:	f7ff fbac 	bl	80053f4 <memchr>
 8005c9c:	9b04      	ldr	r3, [sp, #16]
 8005c9e:	b9d0      	cbnz	r0, 8005cd6 <_svfiprintf_r+0xda>
 8005ca0:	06d9      	lsls	r1, r3, #27
 8005ca2:	bf44      	itt	mi
 8005ca4:	2220      	movmi	r2, #32
 8005ca6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005caa:	071a      	lsls	r2, r3, #28
 8005cac:	bf44      	itt	mi
 8005cae:	222b      	movmi	r2, #43	; 0x2b
 8005cb0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005cb4:	782a      	ldrb	r2, [r5, #0]
 8005cb6:	2a2a      	cmp	r2, #42	; 0x2a
 8005cb8:	d015      	beq.n	8005ce6 <_svfiprintf_r+0xea>
 8005cba:	462f      	mov	r7, r5
 8005cbc:	2000      	movs	r0, #0
 8005cbe:	250a      	movs	r5, #10
 8005cc0:	9a07      	ldr	r2, [sp, #28]
 8005cc2:	4639      	mov	r1, r7
 8005cc4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005cc8:	3b30      	subs	r3, #48	; 0x30
 8005cca:	2b09      	cmp	r3, #9
 8005ccc:	d94d      	bls.n	8005d6a <_svfiprintf_r+0x16e>
 8005cce:	b1b8      	cbz	r0, 8005d00 <_svfiprintf_r+0x104>
 8005cd0:	e00f      	b.n	8005cf2 <_svfiprintf_r+0xf6>
 8005cd2:	462f      	mov	r7, r5
 8005cd4:	e7b8      	b.n	8005c48 <_svfiprintf_r+0x4c>
 8005cd6:	4a40      	ldr	r2, [pc, #256]	; (8005dd8 <_svfiprintf_r+0x1dc>)
 8005cd8:	463d      	mov	r5, r7
 8005cda:	1a80      	subs	r0, r0, r2
 8005cdc:	fa0b f000 	lsl.w	r0, fp, r0
 8005ce0:	4318      	orrs	r0, r3
 8005ce2:	9004      	str	r0, [sp, #16]
 8005ce4:	e7d3      	b.n	8005c8e <_svfiprintf_r+0x92>
 8005ce6:	9a03      	ldr	r2, [sp, #12]
 8005ce8:	1d11      	adds	r1, r2, #4
 8005cea:	6812      	ldr	r2, [r2, #0]
 8005cec:	9103      	str	r1, [sp, #12]
 8005cee:	2a00      	cmp	r2, #0
 8005cf0:	db01      	blt.n	8005cf6 <_svfiprintf_r+0xfa>
 8005cf2:	9207      	str	r2, [sp, #28]
 8005cf4:	e004      	b.n	8005d00 <_svfiprintf_r+0x104>
 8005cf6:	4252      	negs	r2, r2
 8005cf8:	f043 0302 	orr.w	r3, r3, #2
 8005cfc:	9207      	str	r2, [sp, #28]
 8005cfe:	9304      	str	r3, [sp, #16]
 8005d00:	783b      	ldrb	r3, [r7, #0]
 8005d02:	2b2e      	cmp	r3, #46	; 0x2e
 8005d04:	d10c      	bne.n	8005d20 <_svfiprintf_r+0x124>
 8005d06:	787b      	ldrb	r3, [r7, #1]
 8005d08:	2b2a      	cmp	r3, #42	; 0x2a
 8005d0a:	d133      	bne.n	8005d74 <_svfiprintf_r+0x178>
 8005d0c:	9b03      	ldr	r3, [sp, #12]
 8005d0e:	3702      	adds	r7, #2
 8005d10:	1d1a      	adds	r2, r3, #4
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	9203      	str	r2, [sp, #12]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	bfb8      	it	lt
 8005d1a:	f04f 33ff 	movlt.w	r3, #4294967295
 8005d1e:	9305      	str	r3, [sp, #20]
 8005d20:	4d2e      	ldr	r5, [pc, #184]	; (8005ddc <_svfiprintf_r+0x1e0>)
 8005d22:	2203      	movs	r2, #3
 8005d24:	7839      	ldrb	r1, [r7, #0]
 8005d26:	4628      	mov	r0, r5
 8005d28:	f7ff fb64 	bl	80053f4 <memchr>
 8005d2c:	b138      	cbz	r0, 8005d3e <_svfiprintf_r+0x142>
 8005d2e:	2340      	movs	r3, #64	; 0x40
 8005d30:	1b40      	subs	r0, r0, r5
 8005d32:	fa03 f000 	lsl.w	r0, r3, r0
 8005d36:	9b04      	ldr	r3, [sp, #16]
 8005d38:	3701      	adds	r7, #1
 8005d3a:	4303      	orrs	r3, r0
 8005d3c:	9304      	str	r3, [sp, #16]
 8005d3e:	7839      	ldrb	r1, [r7, #0]
 8005d40:	2206      	movs	r2, #6
 8005d42:	4827      	ldr	r0, [pc, #156]	; (8005de0 <_svfiprintf_r+0x1e4>)
 8005d44:	1c7e      	adds	r6, r7, #1
 8005d46:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005d4a:	f7ff fb53 	bl	80053f4 <memchr>
 8005d4e:	2800      	cmp	r0, #0
 8005d50:	d038      	beq.n	8005dc4 <_svfiprintf_r+0x1c8>
 8005d52:	4b24      	ldr	r3, [pc, #144]	; (8005de4 <_svfiprintf_r+0x1e8>)
 8005d54:	bb13      	cbnz	r3, 8005d9c <_svfiprintf_r+0x1a0>
 8005d56:	9b03      	ldr	r3, [sp, #12]
 8005d58:	3307      	adds	r3, #7
 8005d5a:	f023 0307 	bic.w	r3, r3, #7
 8005d5e:	3308      	adds	r3, #8
 8005d60:	9303      	str	r3, [sp, #12]
 8005d62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d64:	444b      	add	r3, r9
 8005d66:	9309      	str	r3, [sp, #36]	; 0x24
 8005d68:	e76d      	b.n	8005c46 <_svfiprintf_r+0x4a>
 8005d6a:	fb05 3202 	mla	r2, r5, r2, r3
 8005d6e:	2001      	movs	r0, #1
 8005d70:	460f      	mov	r7, r1
 8005d72:	e7a6      	b.n	8005cc2 <_svfiprintf_r+0xc6>
 8005d74:	2300      	movs	r3, #0
 8005d76:	250a      	movs	r5, #10
 8005d78:	4619      	mov	r1, r3
 8005d7a:	3701      	adds	r7, #1
 8005d7c:	9305      	str	r3, [sp, #20]
 8005d7e:	4638      	mov	r0, r7
 8005d80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005d84:	3a30      	subs	r2, #48	; 0x30
 8005d86:	2a09      	cmp	r2, #9
 8005d88:	d903      	bls.n	8005d92 <_svfiprintf_r+0x196>
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d0c8      	beq.n	8005d20 <_svfiprintf_r+0x124>
 8005d8e:	9105      	str	r1, [sp, #20]
 8005d90:	e7c6      	b.n	8005d20 <_svfiprintf_r+0x124>
 8005d92:	fb05 2101 	mla	r1, r5, r1, r2
 8005d96:	2301      	movs	r3, #1
 8005d98:	4607      	mov	r7, r0
 8005d9a:	e7f0      	b.n	8005d7e <_svfiprintf_r+0x182>
 8005d9c:	ab03      	add	r3, sp, #12
 8005d9e:	9300      	str	r3, [sp, #0]
 8005da0:	4622      	mov	r2, r4
 8005da2:	4b11      	ldr	r3, [pc, #68]	; (8005de8 <_svfiprintf_r+0x1ec>)
 8005da4:	a904      	add	r1, sp, #16
 8005da6:	4640      	mov	r0, r8
 8005da8:	f7fe f8ec 	bl	8003f84 <_printf_float>
 8005dac:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005db0:	4681      	mov	r9, r0
 8005db2:	d1d6      	bne.n	8005d62 <_svfiprintf_r+0x166>
 8005db4:	89a3      	ldrh	r3, [r4, #12]
 8005db6:	065b      	lsls	r3, r3, #25
 8005db8:	f53f af35 	bmi.w	8005c26 <_svfiprintf_r+0x2a>
 8005dbc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005dbe:	b01d      	add	sp, #116	; 0x74
 8005dc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dc4:	ab03      	add	r3, sp, #12
 8005dc6:	9300      	str	r3, [sp, #0]
 8005dc8:	4622      	mov	r2, r4
 8005dca:	4b07      	ldr	r3, [pc, #28]	; (8005de8 <_svfiprintf_r+0x1ec>)
 8005dcc:	a904      	add	r1, sp, #16
 8005dce:	4640      	mov	r0, r8
 8005dd0:	f7fe fb84 	bl	80044dc <_printf_i>
 8005dd4:	e7ea      	b.n	8005dac <_svfiprintf_r+0x1b0>
 8005dd6:	bf00      	nop
 8005dd8:	0800607c 	.word	0x0800607c
 8005ddc:	08006082 	.word	0x08006082
 8005de0:	08006086 	.word	0x08006086
 8005de4:	08003f85 	.word	0x08003f85
 8005de8:	08005b49 	.word	0x08005b49

08005dec <_sbrk_r>:
 8005dec:	b538      	push	{r3, r4, r5, lr}
 8005dee:	2300      	movs	r3, #0
 8005df0:	4c05      	ldr	r4, [pc, #20]	; (8005e08 <_sbrk_r+0x1c>)
 8005df2:	4605      	mov	r5, r0
 8005df4:	4608      	mov	r0, r1
 8005df6:	6023      	str	r3, [r4, #0]
 8005df8:	f7fb fd2c 	bl	8001854 <_sbrk>
 8005dfc:	1c43      	adds	r3, r0, #1
 8005dfe:	d102      	bne.n	8005e06 <_sbrk_r+0x1a>
 8005e00:	6823      	ldr	r3, [r4, #0]
 8005e02:	b103      	cbz	r3, 8005e06 <_sbrk_r+0x1a>
 8005e04:	602b      	str	r3, [r5, #0]
 8005e06:	bd38      	pop	{r3, r4, r5, pc}
 8005e08:	20000f5c 	.word	0x20000f5c

08005e0c <__ascii_mbtowc>:
 8005e0c:	b082      	sub	sp, #8
 8005e0e:	b901      	cbnz	r1, 8005e12 <__ascii_mbtowc+0x6>
 8005e10:	a901      	add	r1, sp, #4
 8005e12:	b142      	cbz	r2, 8005e26 <__ascii_mbtowc+0x1a>
 8005e14:	b14b      	cbz	r3, 8005e2a <__ascii_mbtowc+0x1e>
 8005e16:	7813      	ldrb	r3, [r2, #0]
 8005e18:	600b      	str	r3, [r1, #0]
 8005e1a:	7812      	ldrb	r2, [r2, #0]
 8005e1c:	1c10      	adds	r0, r2, #0
 8005e1e:	bf18      	it	ne
 8005e20:	2001      	movne	r0, #1
 8005e22:	b002      	add	sp, #8
 8005e24:	4770      	bx	lr
 8005e26:	4610      	mov	r0, r2
 8005e28:	e7fb      	b.n	8005e22 <__ascii_mbtowc+0x16>
 8005e2a:	f06f 0001 	mvn.w	r0, #1
 8005e2e:	e7f8      	b.n	8005e22 <__ascii_mbtowc+0x16>

08005e30 <memmove>:
 8005e30:	4288      	cmp	r0, r1
 8005e32:	b510      	push	{r4, lr}
 8005e34:	eb01 0302 	add.w	r3, r1, r2
 8005e38:	d807      	bhi.n	8005e4a <memmove+0x1a>
 8005e3a:	1e42      	subs	r2, r0, #1
 8005e3c:	4299      	cmp	r1, r3
 8005e3e:	d00a      	beq.n	8005e56 <memmove+0x26>
 8005e40:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e44:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005e48:	e7f8      	b.n	8005e3c <memmove+0xc>
 8005e4a:	4283      	cmp	r3, r0
 8005e4c:	d9f5      	bls.n	8005e3a <memmove+0xa>
 8005e4e:	1881      	adds	r1, r0, r2
 8005e50:	1ad2      	subs	r2, r2, r3
 8005e52:	42d3      	cmn	r3, r2
 8005e54:	d100      	bne.n	8005e58 <memmove+0x28>
 8005e56:	bd10      	pop	{r4, pc}
 8005e58:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005e5c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005e60:	e7f7      	b.n	8005e52 <memmove+0x22>

08005e62 <__malloc_lock>:
 8005e62:	4770      	bx	lr

08005e64 <__malloc_unlock>:
 8005e64:	4770      	bx	lr

08005e66 <_realloc_r>:
 8005e66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e68:	4607      	mov	r7, r0
 8005e6a:	4614      	mov	r4, r2
 8005e6c:	460e      	mov	r6, r1
 8005e6e:	b921      	cbnz	r1, 8005e7a <_realloc_r+0x14>
 8005e70:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005e74:	4611      	mov	r1, r2
 8005e76:	f7ff be0d 	b.w	8005a94 <_malloc_r>
 8005e7a:	b922      	cbnz	r2, 8005e86 <_realloc_r+0x20>
 8005e7c:	f7ff fdbe 	bl	80059fc <_free_r>
 8005e80:	4625      	mov	r5, r4
 8005e82:	4628      	mov	r0, r5
 8005e84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e86:	f000 f821 	bl	8005ecc <_malloc_usable_size_r>
 8005e8a:	42a0      	cmp	r0, r4
 8005e8c:	d20f      	bcs.n	8005eae <_realloc_r+0x48>
 8005e8e:	4621      	mov	r1, r4
 8005e90:	4638      	mov	r0, r7
 8005e92:	f7ff fdff 	bl	8005a94 <_malloc_r>
 8005e96:	4605      	mov	r5, r0
 8005e98:	2800      	cmp	r0, #0
 8005e9a:	d0f2      	beq.n	8005e82 <_realloc_r+0x1c>
 8005e9c:	4631      	mov	r1, r6
 8005e9e:	4622      	mov	r2, r4
 8005ea0:	f7ff fab6 	bl	8005410 <memcpy>
 8005ea4:	4631      	mov	r1, r6
 8005ea6:	4638      	mov	r0, r7
 8005ea8:	f7ff fda8 	bl	80059fc <_free_r>
 8005eac:	e7e9      	b.n	8005e82 <_realloc_r+0x1c>
 8005eae:	4635      	mov	r5, r6
 8005eb0:	e7e7      	b.n	8005e82 <_realloc_r+0x1c>

08005eb2 <__ascii_wctomb>:
 8005eb2:	b149      	cbz	r1, 8005ec8 <__ascii_wctomb+0x16>
 8005eb4:	2aff      	cmp	r2, #255	; 0xff
 8005eb6:	bf8b      	itete	hi
 8005eb8:	238a      	movhi	r3, #138	; 0x8a
 8005eba:	700a      	strbls	r2, [r1, #0]
 8005ebc:	6003      	strhi	r3, [r0, #0]
 8005ebe:	2001      	movls	r0, #1
 8005ec0:	bf88      	it	hi
 8005ec2:	f04f 30ff 	movhi.w	r0, #4294967295
 8005ec6:	4770      	bx	lr
 8005ec8:	4608      	mov	r0, r1
 8005eca:	4770      	bx	lr

08005ecc <_malloc_usable_size_r>:
 8005ecc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ed0:	1f18      	subs	r0, r3, #4
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	bfbc      	itt	lt
 8005ed6:	580b      	ldrlt	r3, [r1, r0]
 8005ed8:	18c0      	addlt	r0, r0, r3
 8005eda:	4770      	bx	lr

08005edc <_init>:
 8005edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ede:	bf00      	nop
 8005ee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ee2:	bc08      	pop	{r3}
 8005ee4:	469e      	mov	lr, r3
 8005ee6:	4770      	bx	lr

08005ee8 <_fini>:
 8005ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eea:	bf00      	nop
 8005eec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005eee:	bc08      	pop	{r3}
 8005ef0:	469e      	mov	lr, r3
 8005ef2:	4770      	bx	lr
